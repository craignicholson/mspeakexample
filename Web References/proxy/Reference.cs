// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace MultiSpeakBrokerLoadTest.proxy {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MDM_ServerSoap", Namespace="http://www.multispeak.org/Version_4.1_Release")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(time))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(meterConditions))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspCIMObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeometryType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IrregularTimePoint[]))]
    public partial class MDM_Server : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        public MultiSpeakMsgHeader MultiSpeakMsgHeaderValue;
        
        private System.Threading.SendOrPostCallback InitiateIHDCapabilitySettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateIHDCapabilitySettingsToGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateManufacturerSpecificCommandOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateManufacturerSpecificCommandToGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback ManufacturerSpecificCommandNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ThermostatAddNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ThermostatRemoveNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ThermostatScheduleNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ThermostatScheduleConfirmedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ThermostatConfigurationNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateThermostatScheduleOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateThermostatScheduleRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateThermostatConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateThermostatConfigurationRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback IHDCapabilitySettingsNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIHDGroupNamesByInHomeDisplayIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback EstablishIHDGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteIHDGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteHANDeviceGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback InHomeDisplayMessageNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateInHomeDisplayMessageToGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateInHomeDisplayMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateHANCommissioningOperationCompleted;
        
        private System.Threading.SendOrPostCallback HANCommissioningNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelInHomeDisplayMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelInHomeDisplayMessageToGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback InHomeDisplayBillingMessageNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReadingScheduleResultNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback MeterEventNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback MeterBaseExchangeNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback MeterBaseInstalledNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback MeterBaseChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback MeterBaseRemoveNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback MeterBaseRetireNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback MeterBaseAddNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConnectDisconnectChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback PricingTiersChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback TemperatureTiersChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadCycleTiersChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ServiceOrderChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ServiceOrderOpenedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ServiceOrderClosedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UsageMonitoringNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback LMDeviceAddNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback LMDeviceChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback LMDeviceExchangeNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback LMDeviceRemoveNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback LMDeviceRetireNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SCADAAnalogChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SCADAAnalogChangedNotificationByPointIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SCADAAnalogChangedNotificationForPowerOperationCompleted;
        
        private System.Threading.SendOrPostCallback SCADAAnalogChangedNotificationForVoltageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SCADAPointChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SCADAPointChangedNotificationForAnalogOperationCompleted;
        
        private System.Threading.SendOrPostCallback SCADAPointChangedNotificationForStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback SCADAStatusChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SCADAStatusChangedNotificationByPointIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback StatusChangedNotificationByPointIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback AnalogChangedNotificationByPointIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubstationNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDownlineCircuitElementsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUplineCircuitElementsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChildCircuitElementsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetParentCircuitElementsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllCircuitElementsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetModifiedCircuitElementsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDownlineMeterConnectivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUplineMeterConnectivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSiblingMeterConnectivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllOtherMetersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllServiceLocationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBilledUsageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBillingDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBillingDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChargeableDevicesByAccountNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIHDGroupMembersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIHDGroupNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateHANRegistrationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelHANRegistrationOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateHANRegistrationStatusRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback HANRegistrationNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMeterHistoryByMeterIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPPMBalanceAdjustmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPPMCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPPMPaymentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceOrderByServiceOrderIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceOrdersByServiceLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceOrdersByStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustPPMBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitPaymentTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnrollPPMCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnenrollPPMCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPrePayStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMeterConnectivityByMeterIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateMeterEventMonitoringOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelMeterEventMonitoringOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMetersByMeterConnectionStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMeterByTransponderIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsCDSupportedOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateThresholdMonitoringOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustThresholdMonitoringOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelThresholdMonitoringOperationCompleted;
        
        private System.Threading.SendOrPostCallback ThresholdEventNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateMeterExchangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback MeterExchangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomersAffectedByOutageOperationCompleted;
        
        private System.Threading.SendOrPostCallback MeterConfigurationNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback RateChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateMeterInstallationOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateInHomeDisplayBillingMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelInHomeDisplayBillingMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateHistoricalMeterReadingsByMeterIDAndDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSupportedMeterEventCodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateBillingDeterminantsOperationCompleted;
        
        private System.Threading.SendOrPostCallback LMDeviceInstalledNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReadingsByMeterIDAndFieldNameIntervalDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatestReadingsByMeterIDListIntervalDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatestReadingsByMeterListIntervalDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback OutageReasonChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback OutageReasonContainerChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback OutageEventChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertInHomeDisplayInIHDGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveInHomeDisplayFromIHDGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelCriticalPeakPriceEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelCriticalPeakPriceEventToGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback CriticalPeakPriceEventNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateCriticalPeakPriceEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateCriticalPeakPriceEventToGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateLoadManagementEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateLoadManagementEventsOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiatePowerFactorManagementEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiatePlannedOutageOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelPlannedOutageOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateUsageMonitoringOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelUsageMonitoringOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateDisconnectedStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelDisconnectedStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateMeterReadingsByMeterIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback EstablishMeterGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback EstablishHANDeviceGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertIntoHANDeviceGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveFromHANDeviceGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHANDeviceGroupNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHANDeviceGroupMembersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHANDeviceGroupNamesByHANDeviceIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMeterGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertMeterInMeterGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveMetersFromMeterGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertMeterInConfigurationGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveMetersFromConfigurationGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateGroupMeterReadingOperationCompleted;
        
        private System.Threading.SendOrPostCallback ScheduleGroupMeterReadingOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateMeterReadingByMeterIDAndFieldNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateMeterReadingByObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateOutageDetectionEventRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateODEventRequestByObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateODMonitoringRequestByObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisplayODMonitoringRequestsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelODMonitoringRequestByObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateConnectDisconnectOperationCompleted;
        
        private System.Threading.SendOrPostCallback CDStateChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CDStatesChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateServiceLocationDisplaysOperationCompleted;
        
        private System.Threading.SendOrPostCallback IntervalDataNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateLPMeterReadingsByMeterIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateCDStateRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback CDStateNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CDStatesNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelDemandResponseEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelDemandResponseEventToGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback DemandResponseEventNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback DemandResponseSetupNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateDemandResponseEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateDemandResponseEventStatusRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateDemandResponseEventToGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateDemandResponseEventStatusRequestToGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateDemandResponseSetupOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateDemandResetOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateArmCDDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateEnableCDDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateDisableCDDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback EstablishSchedulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteScheduleOperationCompleted;
        
        private System.Threading.SendOrPostCallback EstablishReadingSchedulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnableReadingSchedulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisableReadingScheduleOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteReadingScheduleOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateMeterReadingsByFieldNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateODEventRequestByServiceLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllActiveOutageEventsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOutageEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCircuitElementByObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllLoadManagementDevicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAmountOfControllableLoadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAmountOfControlledLoadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLoadManagementDeviceByMeterIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLoadManagementDeviceByServiceLocationIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsLoadManagementActiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllSubstationLoadControlStatusesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifyODDataForOutageDetectionDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback BlinkAlarmNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback VoltageAlarmNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback AccountChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ServiceLocationChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback MeterChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback MeterRemoveNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback MeterRetireNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback MeterAddNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback MeterExchangeNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomersAffectedByOutageNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback MeterConnectivityNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback EndDeviceShipmentNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback FormattedBlockNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ODEventNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ODDeviceChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CDDeviceAddNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CDDeviceChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CDDeviceExchangeNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CDDeviceRemoveNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CDDeviceInstalledNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CDDeviceRetireNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback HistoryLogChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadProfileChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback MeterTestNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback MeterInstalledNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback PPMMeterExchangeNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChargeableDeviceChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifyCBDataForCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifyCBDataForServiceLocationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifyCBDataForMetersOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReadingChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback IHDMessageStatusNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback IHDMessageConfirmedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback InHomeDisplayAddNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback InHomeDisplayChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback InHomeDisplayExchangeNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback InHomeDisplayInstalledNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback InHomeDisplayRemoveNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback InHomeDisplayRetireNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateHANPricingOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateHANPricingRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback HANPricingNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback PingURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMethodsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDomainNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDomainMembersOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestRegistrationIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterForServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnregisterForServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRegistrationInfoByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPublishMethodsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DomainMembersChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback DomainNamesChangedNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllMetersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAMRSupportedMetersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetModifiedAMRMetersOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsAMRMeterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReadingsByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReadingsByMeterIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReadingsByMeterIDListAndFieldNameIntervalDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatestReadingByMeterIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReadingsByBillingCycleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReadingByMeterIDFormattedBlockOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReadingsByDateFormattedBlockOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistoryLogByMeterIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistoryLogsByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistoryLogsByMeterIDAndEventCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistoryLogsByDateAndEventCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatestMeterReadingsByMeterGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatestReadingByMeterIDAndFieldNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatestReadingByFieldNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReadingsByDateAndFieldNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSupportedFieldNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReadingsByMeterIDAndFieldNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatestReadingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllInHomeDisplaysOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReadingsByUOMAndDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllOutageDetectionDevicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOutageDetectionDevicesByMeterIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOutageDetectionDevicesByStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOutageDetectionDevicesByTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOutagedODDevicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCDSupportedMetersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetModifiedCDMetersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCDMeterStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOutageEventStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActiveOutagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOutageEventStatusByOutageLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllElectricMetersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllGasMetersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllWaterMetersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllPropaneMetersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetElectricMetersByAccountNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGasMetersByAccountNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWaterMetersByAccountNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPropaneMetersByAccountNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllCustomersByServiceTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllMetersByServiceTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllServiceLocationsByServiceTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMetersByAccountNumberAndServiceTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllCustomersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetModifiedCustomersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetModifiedServiceLocationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerByCustomerIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerByMeterIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerByDBANameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDeviceTreeConnectivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMeterConnectivityBySubstationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEndDeviceShipmentByShipmentIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEndDeviceShipmentsByDateRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEndDeviceShipmentByMeterIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEndDeviceShipmentByTransponderIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLPDataByMeterIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMeterByMeterIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMeterByServiceLocationIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllMetersByAccountNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMeterByCustomerIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMetersByAMRTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMeterGroupNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMeterGroupNamesByMeterIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMeterGroupMembersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetModifiedMetersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceLocationByServiceStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceLocationByServiceLocationIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceLocationByCustomerIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceLocationByMeterIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceLocationByAccountNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceLocationByGridLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceLocationByPhaseCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceLocationByLoadGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceLocationByServiceTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceLocationByShutOffDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMetersByEALocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMetersByFacilityIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMetersBySiteIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMetersByCustomerNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMetersByHomePhoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMetersBySearchStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLPReadingsByMeterIDFormattedBlockOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLPReadingsByDateFormattedBlockOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLPReadingsByBillingCycleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllAccountsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountsByCustomerIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountByMeterIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountByServiceLocationIDAndServiceTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetConfigurationGroupNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetConfigurationGroupNamesByMeterIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetConfigurationGroupMembersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSchedulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScheduleByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReadingSchedulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReadingScheduleByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatestReadingsByMeterIDListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMeterBaseByObjectIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFormattedBlockTemplatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatestReadingsByMeterListFormattedBlockOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllConnectDisconnectEventsByReasonCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSupportedReadingStatusCodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLPReadingsByMeterIDIntervalDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLPReadingsByDateIntervalDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLPReadingsByBillingCycleIntervalDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReadingsByBillingCycleIntervalDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReadingByMeterIDIntervalDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReadingsByDateIntervalDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatestMeterReadingsByMeterGroupIntervalDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatestReadingByMeterIDAndFieldNameIntervalDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatestReadingByFieldNameIntervalDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReadingsByDateAndFieldNameIntervalDataOperationCompleted;
        
        /// CodeRemarks
        public MDM_Server() {
            this.Url = "http://10.87.1.95/MultiSpeak/416/1/MDM_Server.asmx";
        }
        
        public MDM_Server(string url) {
            this.Url = url;
        }
        
        /// CodeRemarks
        public event InitiateIHDCapabilitySettingsCompletedEventHandler InitiateIHDCapabilitySettingsCompleted;
        
        /// CodeRemarks
        public event InitiateIHDCapabilitySettingsToGroupCompletedEventHandler InitiateIHDCapabilitySettingsToGroupCompleted;
        
        /// CodeRemarks
        public event InitiateManufacturerSpecificCommandCompletedEventHandler InitiateManufacturerSpecificCommandCompleted;
        
        /// CodeRemarks
        public event InitiateManufacturerSpecificCommandToGroupCompletedEventHandler InitiateManufacturerSpecificCommandToGroupCompleted;
        
        /// CodeRemarks
        public event ManufacturerSpecificCommandNotificationCompletedEventHandler ManufacturerSpecificCommandNotificationCompleted;
        
        /// CodeRemarks
        public event ThermostatAddNotificationCompletedEventHandler ThermostatAddNotificationCompleted;
        
        /// CodeRemarks
        public event ThermostatRemoveNotificationCompletedEventHandler ThermostatRemoveNotificationCompleted;
        
        /// CodeRemarks
        public event ThermostatScheduleNotificationCompletedEventHandler ThermostatScheduleNotificationCompleted;
        
        /// CodeRemarks
        public event ThermostatScheduleConfirmedNotificationCompletedEventHandler ThermostatScheduleConfirmedNotificationCompleted;
        
        /// CodeRemarks
        public event ThermostatConfigurationNotificationCompletedEventHandler ThermostatConfigurationNotificationCompleted;
        
        /// CodeRemarks
        public event InitiateThermostatScheduleCompletedEventHandler InitiateThermostatScheduleCompleted;
        
        /// CodeRemarks
        public event InitiateThermostatScheduleRequestCompletedEventHandler InitiateThermostatScheduleRequestCompleted;
        
        /// CodeRemarks
        public event InitiateThermostatConfigurationCompletedEventHandler InitiateThermostatConfigurationCompleted;
        
        /// CodeRemarks
        public event InitiateThermostatConfigurationRequestCompletedEventHandler InitiateThermostatConfigurationRequestCompleted;
        
        /// CodeRemarks
        public event IHDCapabilitySettingsNotificationCompletedEventHandler IHDCapabilitySettingsNotificationCompleted;
        
        /// CodeRemarks
        public event GetIHDGroupNamesByInHomeDisplayIDCompletedEventHandler GetIHDGroupNamesByInHomeDisplayIDCompleted;
        
        /// CodeRemarks
        public event EstablishIHDGroupCompletedEventHandler EstablishIHDGroupCompleted;
        
        /// CodeRemarks
        public event DeleteIHDGroupCompletedEventHandler DeleteIHDGroupCompleted;
        
        /// CodeRemarks
        public event DeleteHANDeviceGroupCompletedEventHandler DeleteHANDeviceGroupCompleted;
        
        /// CodeRemarks
        public event InHomeDisplayMessageNotificationCompletedEventHandler InHomeDisplayMessageNotificationCompleted;
        
        /// CodeRemarks
        public event InitiateInHomeDisplayMessageToGroupCompletedEventHandler InitiateInHomeDisplayMessageToGroupCompleted;
        
        /// CodeRemarks
        public event InitiateInHomeDisplayMessageCompletedEventHandler InitiateInHomeDisplayMessageCompleted;
        
        /// CodeRemarks
        public event InitiateHANCommissioningCompletedEventHandler InitiateHANCommissioningCompleted;
        
        /// CodeRemarks
        public event HANCommissioningNotificationCompletedEventHandler HANCommissioningNotificationCompleted;
        
        /// CodeRemarks
        public event CancelInHomeDisplayMessageCompletedEventHandler CancelInHomeDisplayMessageCompleted;
        
        /// CodeRemarks
        public event CancelInHomeDisplayMessageToGroupCompletedEventHandler CancelInHomeDisplayMessageToGroupCompleted;
        
        /// CodeRemarks
        public event InHomeDisplayBillingMessageNotificationCompletedEventHandler InHomeDisplayBillingMessageNotificationCompleted;
        
        /// CodeRemarks
        public event ReadingScheduleResultNotificationCompletedEventHandler ReadingScheduleResultNotificationCompleted;
        
        /// CodeRemarks
        public event MeterEventNotificationCompletedEventHandler MeterEventNotificationCompleted;
        
        /// CodeRemarks
        public event MeterBaseExchangeNotificationCompletedEventHandler MeterBaseExchangeNotificationCompleted;
        
        /// CodeRemarks
        public event MeterBaseInstalledNotificationCompletedEventHandler MeterBaseInstalledNotificationCompleted;
        
        /// CodeRemarks
        public event MeterBaseChangedNotificationCompletedEventHandler MeterBaseChangedNotificationCompleted;
        
        /// CodeRemarks
        public event MeterBaseRemoveNotificationCompletedEventHandler MeterBaseRemoveNotificationCompleted;
        
        /// CodeRemarks
        public event MeterBaseRetireNotificationCompletedEventHandler MeterBaseRetireNotificationCompleted;
        
        /// CodeRemarks
        public event MeterBaseAddNotificationCompletedEventHandler MeterBaseAddNotificationCompleted;
        
        /// CodeRemarks
        public event ConnectDisconnectChangedNotificationCompletedEventHandler ConnectDisconnectChangedNotificationCompleted;
        
        /// CodeRemarks
        public event PricingTiersChangedNotificationCompletedEventHandler PricingTiersChangedNotificationCompleted;
        
        /// CodeRemarks
        public event TemperatureTiersChangedNotificationCompletedEventHandler TemperatureTiersChangedNotificationCompleted;
        
        /// CodeRemarks
        public event LoadCycleTiersChangedNotificationCompletedEventHandler LoadCycleTiersChangedNotificationCompleted;
        
        /// CodeRemarks
        public event ServiceOrderChangedNotificationCompletedEventHandler ServiceOrderChangedNotificationCompleted;
        
        /// CodeRemarks
        public event ServiceOrderOpenedNotificationCompletedEventHandler ServiceOrderOpenedNotificationCompleted;
        
        /// CodeRemarks
        public event ServiceOrderClosedNotificationCompletedEventHandler ServiceOrderClosedNotificationCompleted;
        
        /// CodeRemarks
        public event UsageMonitoringNotificationCompletedEventHandler UsageMonitoringNotificationCompleted;
        
        /// CodeRemarks
        public event LMDeviceAddNotificationCompletedEventHandler LMDeviceAddNotificationCompleted;
        
        /// CodeRemarks
        public event LMDeviceChangedNotificationCompletedEventHandler LMDeviceChangedNotificationCompleted;
        
        /// CodeRemarks
        public event LMDeviceExchangeNotificationCompletedEventHandler LMDeviceExchangeNotificationCompleted;
        
        /// CodeRemarks
        public event LMDeviceRemoveNotificationCompletedEventHandler LMDeviceRemoveNotificationCompleted;
        
        /// CodeRemarks
        public event LMDeviceRetireNotificationCompletedEventHandler LMDeviceRetireNotificationCompleted;
        
        /// CodeRemarks
        public event SCADAAnalogChangedNotificationCompletedEventHandler SCADAAnalogChangedNotificationCompleted;
        
        /// CodeRemarks
        public event SCADAAnalogChangedNotificationByPointIDCompletedEventHandler SCADAAnalogChangedNotificationByPointIDCompleted;
        
        /// CodeRemarks
        public event SCADAAnalogChangedNotificationForPowerCompletedEventHandler SCADAAnalogChangedNotificationForPowerCompleted;
        
        /// CodeRemarks
        public event SCADAAnalogChangedNotificationForVoltageCompletedEventHandler SCADAAnalogChangedNotificationForVoltageCompleted;
        
        /// CodeRemarks
        public event SCADAPointChangedNotificationCompletedEventHandler SCADAPointChangedNotificationCompleted;
        
        /// CodeRemarks
        public event SCADAPointChangedNotificationForAnalogCompletedEventHandler SCADAPointChangedNotificationForAnalogCompleted;
        
        /// CodeRemarks
        public event SCADAPointChangedNotificationForStatusCompletedEventHandler SCADAPointChangedNotificationForStatusCompleted;
        
        /// CodeRemarks
        public event SCADAStatusChangedNotificationCompletedEventHandler SCADAStatusChangedNotificationCompleted;
        
        /// CodeRemarks
        public event SCADAStatusChangedNotificationByPointIDCompletedEventHandler SCADAStatusChangedNotificationByPointIDCompleted;
        
        /// CodeRemarks
        public event StatusChangedNotificationByPointIDCompletedEventHandler StatusChangedNotificationByPointIDCompleted;
        
        /// CodeRemarks
        public event AnalogChangedNotificationByPointIDCompletedEventHandler AnalogChangedNotificationByPointIDCompleted;
        
        /// CodeRemarks
        public event GetSubstationNamesCompletedEventHandler GetSubstationNamesCompleted;
        
        /// CodeRemarks
        public event GetDownlineCircuitElementsCompletedEventHandler GetDownlineCircuitElementsCompleted;
        
        /// CodeRemarks
        public event GetUplineCircuitElementsCompletedEventHandler GetUplineCircuitElementsCompleted;
        
        /// CodeRemarks
        public event GetChildCircuitElementsCompletedEventHandler GetChildCircuitElementsCompleted;
        
        /// CodeRemarks
        public event GetParentCircuitElementsCompletedEventHandler GetParentCircuitElementsCompleted;
        
        /// CodeRemarks
        public event GetAllCircuitElementsCompletedEventHandler GetAllCircuitElementsCompleted;
        
        /// CodeRemarks
        public event GetModifiedCircuitElementsCompletedEventHandler GetModifiedCircuitElementsCompleted;
        
        /// CodeRemarks
        public event GetDownlineMeterConnectivityCompletedEventHandler GetDownlineMeterConnectivityCompleted;
        
        /// CodeRemarks
        public event GetUplineMeterConnectivityCompletedEventHandler GetUplineMeterConnectivityCompleted;
        
        /// CodeRemarks
        public event GetSiblingMeterConnectivityCompletedEventHandler GetSiblingMeterConnectivityCompleted;
        
        /// CodeRemarks
        public event GetAllOtherMetersCompletedEventHandler GetAllOtherMetersCompleted;
        
        /// CodeRemarks
        public event GetAllServiceLocationsCompletedEventHandler GetAllServiceLocationsCompleted;
        
        /// CodeRemarks
        public event GetBilledUsageCompletedEventHandler GetBilledUsageCompleted;
        
        /// CodeRemarks
        public event GetBillingDataCompletedEventHandler GetBillingDataCompleted;
        
        /// CodeRemarks
        public event GetBillingDetailCompletedEventHandler GetBillingDetailCompleted;
        
        /// CodeRemarks
        public event GetChargeableDevicesByAccountNumberCompletedEventHandler GetChargeableDevicesByAccountNumberCompleted;
        
        /// CodeRemarks
        public event GetIHDGroupMembersCompletedEventHandler GetIHDGroupMembersCompleted;
        
        /// CodeRemarks
        public event GetIHDGroupNamesCompletedEventHandler GetIHDGroupNamesCompleted;
        
        /// CodeRemarks
        public event InitiateHANRegistrationCompletedEventHandler InitiateHANRegistrationCompleted;
        
        /// CodeRemarks
        public event CancelHANRegistrationCompletedEventHandler CancelHANRegistrationCompleted;
        
        /// CodeRemarks
        public event InitiateHANRegistrationStatusRequestCompletedEventHandler InitiateHANRegistrationStatusRequestCompleted;
        
        /// CodeRemarks
        public event HANRegistrationNotificationCompletedEventHandler HANRegistrationNotificationCompleted;
        
        /// CodeRemarks
        public event GetMeterHistoryByMeterIDCompletedEventHandler GetMeterHistoryByMeterIDCompleted;
        
        /// CodeRemarks
        public event GetPPMBalanceAdjustmentsCompletedEventHandler GetPPMBalanceAdjustmentsCompleted;
        
        /// CodeRemarks
        public event GetPPMCustomerCompletedEventHandler GetPPMCustomerCompleted;
        
        /// CodeRemarks
        public event GetPPMPaymentsCompletedEventHandler GetPPMPaymentsCompleted;
        
        /// CodeRemarks
        public event GetServiceOrderByServiceOrderIDCompletedEventHandler GetServiceOrderByServiceOrderIDCompleted;
        
        /// CodeRemarks
        public event GetServiceOrdersByServiceLocationCompletedEventHandler GetServiceOrdersByServiceLocationCompleted;
        
        /// CodeRemarks
        public event GetServiceOrdersByStatusCompletedEventHandler GetServiceOrdersByStatusCompleted;
        
        /// CodeRemarks
        public event AdjustPPMBalanceCompletedEventHandler AdjustPPMBalanceCompleted;
        
        /// CodeRemarks
        public event CommitPaymentTransactionCompletedEventHandler CommitPaymentTransactionCompleted;
        
        /// CodeRemarks
        public event EnrollPPMCustomerCompletedEventHandler EnrollPPMCustomerCompleted;
        
        /// CodeRemarks
        public event UnenrollPPMCustomerCompletedEventHandler UnenrollPPMCustomerCompleted;
        
        /// CodeRemarks
        public event GetPrePayStatusCompletedEventHandler GetPrePayStatusCompleted;
        
        /// CodeRemarks
        public event GetMeterConnectivityByMeterIDCompletedEventHandler GetMeterConnectivityByMeterIDCompleted;
        
        /// CodeRemarks
        public event InitiateMeterEventMonitoringCompletedEventHandler InitiateMeterEventMonitoringCompleted;
        
        /// CodeRemarks
        public event CancelMeterEventMonitoringCompletedEventHandler CancelMeterEventMonitoringCompleted;
        
        /// CodeRemarks
        public event GetMetersByMeterConnectionStatusCompletedEventHandler GetMetersByMeterConnectionStatusCompleted;
        
        /// CodeRemarks
        public event GetMeterByTransponderIDCompletedEventHandler GetMeterByTransponderIDCompleted;
        
        /// CodeRemarks
        public event IsCDSupportedCompletedEventHandler IsCDSupportedCompleted;
        
        /// CodeRemarks
        public event InitiateThresholdMonitoringCompletedEventHandler InitiateThresholdMonitoringCompleted;
        
        /// CodeRemarks
        public event AdjustThresholdMonitoringCompletedEventHandler AdjustThresholdMonitoringCompleted;
        
        /// CodeRemarks
        public event CancelThresholdMonitoringCompletedEventHandler CancelThresholdMonitoringCompleted;
        
        /// CodeRemarks
        public event ThresholdEventNotificationCompletedEventHandler ThresholdEventNotificationCompleted;
        
        /// CodeRemarks
        public event InitiateMeterExchangeCompletedEventHandler InitiateMeterExchangeCompleted;
        
        /// CodeRemarks
        public event MeterExchangedNotificationCompletedEventHandler MeterExchangedNotificationCompleted;
        
        /// CodeRemarks
        public event GetCustomersAffectedByOutageCompletedEventHandler GetCustomersAffectedByOutageCompleted;
        
        /// CodeRemarks
        public event MeterConfigurationNotificationCompletedEventHandler MeterConfigurationNotificationCompleted;
        
        /// CodeRemarks
        public event RateChangedNotificationCompletedEventHandler RateChangedNotificationCompleted;
        
        /// CodeRemarks
        public event InitiateMeterInstallationCompletedEventHandler InitiateMeterInstallationCompleted;
        
        /// CodeRemarks
        public event InitiateInHomeDisplayBillingMessageCompletedEventHandler InitiateInHomeDisplayBillingMessageCompleted;
        
        /// CodeRemarks
        public event CancelInHomeDisplayBillingMessageCompletedEventHandler CancelInHomeDisplayBillingMessageCompleted;
        
        /// CodeRemarks
        public event InitiateHistoricalMeterReadingsByMeterIDAndDateCompletedEventHandler InitiateHistoricalMeterReadingsByMeterIDAndDateCompleted;
        
        /// CodeRemarks
        public event GetSupportedMeterEventCodesCompletedEventHandler GetSupportedMeterEventCodesCompleted;
        
        /// CodeRemarks
        public event InitiateBillingDeterminantsCompletedEventHandler InitiateBillingDeterminantsCompleted;
        
        /// CodeRemarks
        public event LMDeviceInstalledNotificationCompletedEventHandler LMDeviceInstalledNotificationCompleted;
        
        /// CodeRemarks
        public event GetReadingsByMeterIDAndFieldNameIntervalDataCompletedEventHandler GetReadingsByMeterIDAndFieldNameIntervalDataCompleted;
        
        /// CodeRemarks
        public event GetLatestReadingsByMeterIDListIntervalDataCompletedEventHandler GetLatestReadingsByMeterIDListIntervalDataCompleted;
        
        /// CodeRemarks
        public event GetLatestReadingsByMeterListIntervalDataCompletedEventHandler GetLatestReadingsByMeterListIntervalDataCompleted;
        
        /// CodeRemarks
        public event OutageReasonChangedNotificationCompletedEventHandler OutageReasonChangedNotificationCompleted;
        
        /// CodeRemarks
        public event OutageReasonContainerChangedNotificationCompletedEventHandler OutageReasonContainerChangedNotificationCompleted;
        
        /// CodeRemarks
        public event OutageEventChangedNotificationCompletedEventHandler OutageEventChangedNotificationCompleted;
        
        /// CodeRemarks
        public event InsertInHomeDisplayInIHDGroupCompletedEventHandler InsertInHomeDisplayInIHDGroupCompleted;
        
        /// CodeRemarks
        public event RemoveInHomeDisplayFromIHDGroupCompletedEventHandler RemoveInHomeDisplayFromIHDGroupCompleted;
        
        /// CodeRemarks
        public event CancelCriticalPeakPriceEventCompletedEventHandler CancelCriticalPeakPriceEventCompleted;
        
        /// CodeRemarks
        public event CancelCriticalPeakPriceEventToGroupCompletedEventHandler CancelCriticalPeakPriceEventToGroupCompleted;
        
        /// CodeRemarks
        public event CriticalPeakPriceEventNotificationCompletedEventHandler CriticalPeakPriceEventNotificationCompleted;
        
        /// CodeRemarks
        public event InitiateCriticalPeakPriceEventCompletedEventHandler InitiateCriticalPeakPriceEventCompleted;
        
        /// CodeRemarks
        public event InitiateCriticalPeakPriceEventToGroupCompletedEventHandler InitiateCriticalPeakPriceEventToGroupCompleted;
        
        /// CodeRemarks
        public event InitiateLoadManagementEventCompletedEventHandler InitiateLoadManagementEventCompleted;
        
        /// CodeRemarks
        public event InitiateLoadManagementEventsCompletedEventHandler InitiateLoadManagementEventsCompleted;
        
        /// CodeRemarks
        public event InitiatePowerFactorManagementEventCompletedEventHandler InitiatePowerFactorManagementEventCompleted;
        
        /// CodeRemarks
        public event InitiatePlannedOutageCompletedEventHandler InitiatePlannedOutageCompleted;
        
        /// CodeRemarks
        public event CancelPlannedOutageCompletedEventHandler CancelPlannedOutageCompleted;
        
        /// CodeRemarks
        public event InitiateUsageMonitoringCompletedEventHandler InitiateUsageMonitoringCompleted;
        
        /// CodeRemarks
        public event CancelUsageMonitoringCompletedEventHandler CancelUsageMonitoringCompleted;
        
        /// CodeRemarks
        public event InitiateDisconnectedStatusCompletedEventHandler InitiateDisconnectedStatusCompleted;
        
        /// CodeRemarks
        public event CancelDisconnectedStatusCompletedEventHandler CancelDisconnectedStatusCompleted;
        
        /// CodeRemarks
        public event InitiateMeterReadingsByMeterIDCompletedEventHandler InitiateMeterReadingsByMeterIDCompleted;
        
        /// CodeRemarks
        public event EstablishMeterGroupCompletedEventHandler EstablishMeterGroupCompleted;
        
        /// CodeRemarks
        public event EstablishHANDeviceGroupCompletedEventHandler EstablishHANDeviceGroupCompleted;
        
        /// CodeRemarks
        public event InsertIntoHANDeviceGroupCompletedEventHandler InsertIntoHANDeviceGroupCompleted;
        
        /// CodeRemarks
        public event RemoveFromHANDeviceGroupCompletedEventHandler RemoveFromHANDeviceGroupCompleted;
        
        /// CodeRemarks
        public event GetHANDeviceGroupNamesCompletedEventHandler GetHANDeviceGroupNamesCompleted;
        
        /// CodeRemarks
        public event GetHANDeviceGroupMembersCompletedEventHandler GetHANDeviceGroupMembersCompleted;
        
        /// CodeRemarks
        public event GetHANDeviceGroupNamesByHANDeviceIDCompletedEventHandler GetHANDeviceGroupNamesByHANDeviceIDCompleted;
        
        /// CodeRemarks
        public event DeleteMeterGroupCompletedEventHandler DeleteMeterGroupCompleted;
        
        /// CodeRemarks
        public event InsertMeterInMeterGroupCompletedEventHandler InsertMeterInMeterGroupCompleted;
        
        /// CodeRemarks
        public event RemoveMetersFromMeterGroupCompletedEventHandler RemoveMetersFromMeterGroupCompleted;
        
        /// CodeRemarks
        public event InsertMeterInConfigurationGroupCompletedEventHandler InsertMeterInConfigurationGroupCompleted;
        
        /// CodeRemarks
        public event RemoveMetersFromConfigurationGroupCompletedEventHandler RemoveMetersFromConfigurationGroupCompleted;
        
        /// CodeRemarks
        public event InitiateGroupMeterReadingCompletedEventHandler InitiateGroupMeterReadingCompleted;
        
        /// CodeRemarks
        public event ScheduleGroupMeterReadingCompletedEventHandler ScheduleGroupMeterReadingCompleted;
        
        /// CodeRemarks
        public event InitiateMeterReadingByMeterIDAndFieldNameCompletedEventHandler InitiateMeterReadingByMeterIDAndFieldNameCompleted;
        
        /// CodeRemarks
        public event InitiateMeterReadingByObjectCompletedEventHandler InitiateMeterReadingByObjectCompleted;
        
        /// CodeRemarks
        public event InitiateOutageDetectionEventRequestCompletedEventHandler InitiateOutageDetectionEventRequestCompleted;
        
        /// CodeRemarks
        public event InitiateODEventRequestByObjectCompletedEventHandler InitiateODEventRequestByObjectCompleted;
        
        /// CodeRemarks
        public event InitiateODMonitoringRequestByObjectCompletedEventHandler InitiateODMonitoringRequestByObjectCompleted;
        
        /// CodeRemarks
        public event DisplayODMonitoringRequestsCompletedEventHandler DisplayODMonitoringRequestsCompleted;
        
        /// CodeRemarks
        public event CancelODMonitoringRequestByObjectCompletedEventHandler CancelODMonitoringRequestByObjectCompleted;
        
        /// CodeRemarks
        public event InitiateConnectDisconnectCompletedEventHandler InitiateConnectDisconnectCompleted;
        
        /// CodeRemarks
        public event CDStateChangedNotificationCompletedEventHandler CDStateChangedNotificationCompleted;
        
        /// CodeRemarks
        public event CDStatesChangedNotificationCompletedEventHandler CDStatesChangedNotificationCompleted;
        
        /// CodeRemarks
        public event UpdateServiceLocationDisplaysCompletedEventHandler UpdateServiceLocationDisplaysCompleted;
        
        /// CodeRemarks
        public event IntervalDataNotificationCompletedEventHandler IntervalDataNotificationCompleted;
        
        /// CodeRemarks
        public event InitiateLPMeterReadingsByMeterIDCompletedEventHandler InitiateLPMeterReadingsByMeterIDCompleted;
        
        /// CodeRemarks
        public event InitiateCDStateRequestCompletedEventHandler InitiateCDStateRequestCompleted;
        
        /// CodeRemarks
        public event CDStateNotificationCompletedEventHandler CDStateNotificationCompleted;
        
        /// CodeRemarks
        public event CDStatesNotificationCompletedEventHandler CDStatesNotificationCompleted;
        
        /// CodeRemarks
        public event CancelDemandResponseEventCompletedEventHandler CancelDemandResponseEventCompleted;
        
        /// CodeRemarks
        public event CancelDemandResponseEventToGroupCompletedEventHandler CancelDemandResponseEventToGroupCompleted;
        
        /// CodeRemarks
        public event DemandResponseEventNotificationCompletedEventHandler DemandResponseEventNotificationCompleted;
        
        /// CodeRemarks
        public event DemandResponseSetupNotificationCompletedEventHandler DemandResponseSetupNotificationCompleted;
        
        /// CodeRemarks
        public event InitiateDemandResponseEventCompletedEventHandler InitiateDemandResponseEventCompleted;
        
        /// CodeRemarks
        public event InitiateDemandResponseEventStatusRequestCompletedEventHandler InitiateDemandResponseEventStatusRequestCompleted;
        
        /// CodeRemarks
        public event InitiateDemandResponseEventToGroupCompletedEventHandler InitiateDemandResponseEventToGroupCompleted;
        
        /// CodeRemarks
        public event InitiateDemandResponseEventStatusRequestToGroupCompletedEventHandler InitiateDemandResponseEventStatusRequestToGroupCompleted;
        
        /// CodeRemarks
        public event InitiateDemandResponseSetupCompletedEventHandler InitiateDemandResponseSetupCompleted;
        
        /// CodeRemarks
        public event InitiateDemandResetCompletedEventHandler InitiateDemandResetCompleted;
        
        /// CodeRemarks
        public event InitiateArmCDDeviceCompletedEventHandler InitiateArmCDDeviceCompleted;
        
        /// CodeRemarks
        public event InitiateEnableCDDeviceCompletedEventHandler InitiateEnableCDDeviceCompleted;
        
        /// CodeRemarks
        public event InitiateDisableCDDeviceCompletedEventHandler InitiateDisableCDDeviceCompleted;
        
        /// CodeRemarks
        public event EstablishSchedulesCompletedEventHandler EstablishSchedulesCompleted;
        
        /// CodeRemarks
        public event DeleteScheduleCompletedEventHandler DeleteScheduleCompleted;
        
        /// CodeRemarks
        public event EstablishReadingSchedulesCompletedEventHandler EstablishReadingSchedulesCompleted;
        
        /// CodeRemarks
        public event EnableReadingSchedulesCompletedEventHandler EnableReadingSchedulesCompleted;
        
        /// CodeRemarks
        public event DisableReadingScheduleCompletedEventHandler DisableReadingScheduleCompleted;
        
        /// CodeRemarks
        public event DeleteReadingScheduleCompletedEventHandler DeleteReadingScheduleCompleted;
        
        /// CodeRemarks
        public event InitiateMeterReadingsByFieldNameCompletedEventHandler InitiateMeterReadingsByFieldNameCompleted;
        
        /// CodeRemarks
        public event InitiateODEventRequestByServiceLocationCompletedEventHandler InitiateODEventRequestByServiceLocationCompleted;
        
        /// CodeRemarks
        public event GetAllActiveOutageEventsCompletedEventHandler GetAllActiveOutageEventsCompleted;
        
        /// CodeRemarks
        public event GetOutageEventCompletedEventHandler GetOutageEventCompleted;
        
        /// CodeRemarks
        public event GetCircuitElementByObjectCompletedEventHandler GetCircuitElementByObjectCompleted;
        
        /// CodeRemarks
        public event GetAllLoadManagementDevicesCompletedEventHandler GetAllLoadManagementDevicesCompleted;
        
        /// CodeRemarks
        public event GetAmountOfControllableLoadCompletedEventHandler GetAmountOfControllableLoadCompleted;
        
        /// CodeRemarks
        public event GetAmountOfControlledLoadCompletedEventHandler GetAmountOfControlledLoadCompleted;
        
        /// CodeRemarks
        public event GetLoadManagementDeviceByMeterIDCompletedEventHandler GetLoadManagementDeviceByMeterIDCompleted;
        
        /// CodeRemarks
        public event GetLoadManagementDeviceByServiceLocationIDCompletedEventHandler GetLoadManagementDeviceByServiceLocationIDCompleted;
        
        /// CodeRemarks
        public event IsLoadManagementActiveCompletedEventHandler IsLoadManagementActiveCompleted;
        
        /// CodeRemarks
        public event GetAllSubstationLoadControlStatusesCompletedEventHandler GetAllSubstationLoadControlStatusesCompleted;
        
        /// CodeRemarks
        public event ModifyODDataForOutageDetectionDeviceCompletedEventHandler ModifyODDataForOutageDetectionDeviceCompleted;
        
        /// CodeRemarks
        public event BlinkAlarmNotificationCompletedEventHandler BlinkAlarmNotificationCompleted;
        
        /// CodeRemarks
        public event VoltageAlarmNotificationCompletedEventHandler VoltageAlarmNotificationCompleted;
        
        /// CodeRemarks
        public event CustomerChangedNotificationCompletedEventHandler CustomerChangedNotificationCompleted;
        
        /// CodeRemarks
        public event AccountChangedNotificationCompletedEventHandler AccountChangedNotificationCompleted;
        
        /// CodeRemarks
        public event ServiceLocationChangedNotificationCompletedEventHandler ServiceLocationChangedNotificationCompleted;
        
        /// CodeRemarks
        public event MeterChangedNotificationCompletedEventHandler MeterChangedNotificationCompleted;
        
        /// CodeRemarks
        public event MeterRemoveNotificationCompletedEventHandler MeterRemoveNotificationCompleted;
        
        /// CodeRemarks
        public event MeterRetireNotificationCompletedEventHandler MeterRetireNotificationCompleted;
        
        /// CodeRemarks
        public event MeterAddNotificationCompletedEventHandler MeterAddNotificationCompleted;
        
        /// CodeRemarks
        public event MeterExchangeNotificationCompletedEventHandler MeterExchangeNotificationCompleted;
        
        /// CodeRemarks
        public event CustomersAffectedByOutageNotificationCompletedEventHandler CustomersAffectedByOutageNotificationCompleted;
        
        /// CodeRemarks
        public event MeterConnectivityNotificationCompletedEventHandler MeterConnectivityNotificationCompleted;
        
        /// CodeRemarks
        public event EndDeviceShipmentNotificationCompletedEventHandler EndDeviceShipmentNotificationCompleted;
        
        /// CodeRemarks
        public event FormattedBlockNotificationCompletedEventHandler FormattedBlockNotificationCompleted;
        
        /// CodeRemarks
        public event ODEventNotificationCompletedEventHandler ODEventNotificationCompleted;
        
        /// CodeRemarks
        public event ODDeviceChangedNotificationCompletedEventHandler ODDeviceChangedNotificationCompleted;
        
        /// CodeRemarks
        public event CDDeviceAddNotificationCompletedEventHandler CDDeviceAddNotificationCompleted;
        
        /// CodeRemarks
        public event CDDeviceChangedNotificationCompletedEventHandler CDDeviceChangedNotificationCompleted;
        
        /// CodeRemarks
        public event CDDeviceExchangeNotificationCompletedEventHandler CDDeviceExchangeNotificationCompleted;
        
        /// CodeRemarks
        public event CDDeviceRemoveNotificationCompletedEventHandler CDDeviceRemoveNotificationCompleted;
        
        /// CodeRemarks
        public event CDDeviceInstalledNotificationCompletedEventHandler CDDeviceInstalledNotificationCompleted;
        
        /// CodeRemarks
        public event CDDeviceRetireNotificationCompletedEventHandler CDDeviceRetireNotificationCompleted;
        
        /// CodeRemarks
        public event HistoryLogChangedNotificationCompletedEventHandler HistoryLogChangedNotificationCompleted;
        
        /// CodeRemarks
        public event LoadProfileChangedNotificationCompletedEventHandler LoadProfileChangedNotificationCompleted;
        
        /// CodeRemarks
        public event MeterTestNotificationCompletedEventHandler MeterTestNotificationCompleted;
        
        /// CodeRemarks
        public event MeterInstalledNotificationCompletedEventHandler MeterInstalledNotificationCompleted;
        
        /// CodeRemarks
        public event PPMMeterExchangeNotificationCompletedEventHandler PPMMeterExchangeNotificationCompleted;
        
        /// CodeRemarks
        public event ChargeableDeviceChangedNotificationCompletedEventHandler ChargeableDeviceChangedNotificationCompleted;
        
        /// CodeRemarks
        public event ModifyCBDataForCustomerCompletedEventHandler ModifyCBDataForCustomerCompleted;
        
        /// CodeRemarks
        public event ModifyCBDataForServiceLocationsCompletedEventHandler ModifyCBDataForServiceLocationsCompleted;
        
        /// CodeRemarks
        public event ModifyCBDataForMetersCompletedEventHandler ModifyCBDataForMetersCompleted;
        
        /// CodeRemarks
        public event ReadingChangedNotificationCompletedEventHandler ReadingChangedNotificationCompleted;
        
        /// CodeRemarks
        public event IHDMessageStatusNotificationCompletedEventHandler IHDMessageStatusNotificationCompleted;
        
        /// CodeRemarks
        public event IHDMessageConfirmedNotificationCompletedEventHandler IHDMessageConfirmedNotificationCompleted;
        
        /// CodeRemarks
        public event InHomeDisplayAddNotificationCompletedEventHandler InHomeDisplayAddNotificationCompleted;
        
        /// CodeRemarks
        public event InHomeDisplayChangedNotificationCompletedEventHandler InHomeDisplayChangedNotificationCompleted;
        
        /// CodeRemarks
        public event InHomeDisplayExchangeNotificationCompletedEventHandler InHomeDisplayExchangeNotificationCompleted;
        
        /// CodeRemarks
        public event InHomeDisplayInstalledNotificationCompletedEventHandler InHomeDisplayInstalledNotificationCompleted;
        
        /// CodeRemarks
        public event InHomeDisplayRemoveNotificationCompletedEventHandler InHomeDisplayRemoveNotificationCompleted;
        
        /// CodeRemarks
        public event InHomeDisplayRetireNotificationCompletedEventHandler InHomeDisplayRetireNotificationCompleted;
        
        /// CodeRemarks
        public event InitiateHANPricingCompletedEventHandler InitiateHANPricingCompleted;
        
        /// CodeRemarks
        public event InitiateHANPricingRequestCompletedEventHandler InitiateHANPricingRequestCompleted;
        
        /// CodeRemarks
        public event HANPricingNotificationCompletedEventHandler HANPricingNotificationCompleted;
        
        /// CodeRemarks
        public event PingURLCompletedEventHandler PingURLCompleted;
        
        /// CodeRemarks
        public event GetMethodsCompletedEventHandler GetMethodsCompleted;
        
        /// CodeRemarks
        public event GetDomainNamesCompletedEventHandler GetDomainNamesCompleted;
        
        /// CodeRemarks
        public event GetDomainMembersCompletedEventHandler GetDomainMembersCompleted;
        
        /// CodeRemarks
        public event RequestRegistrationIDCompletedEventHandler RequestRegistrationIDCompleted;
        
        /// CodeRemarks
        public event RegisterForServiceCompletedEventHandler RegisterForServiceCompleted;
        
        /// CodeRemarks
        public event UnregisterForServiceCompletedEventHandler UnregisterForServiceCompleted;
        
        /// CodeRemarks
        public event GetRegistrationInfoByIDCompletedEventHandler GetRegistrationInfoByIDCompleted;
        
        /// CodeRemarks
        public event GetPublishMethodsCompletedEventHandler GetPublishMethodsCompleted;
        
        /// CodeRemarks
        public event DomainMembersChangedNotificationCompletedEventHandler DomainMembersChangedNotificationCompleted;
        
        /// CodeRemarks
        public event DomainNamesChangedNotificationCompletedEventHandler DomainNamesChangedNotificationCompleted;
        
        /// CodeRemarks
        public event GetAllMetersCompletedEventHandler GetAllMetersCompleted;
        
        /// CodeRemarks
        public event GetAMRSupportedMetersCompletedEventHandler GetAMRSupportedMetersCompleted;
        
        /// CodeRemarks
        public event GetModifiedAMRMetersCompletedEventHandler GetModifiedAMRMetersCompleted;
        
        /// CodeRemarks
        public event IsAMRMeterCompletedEventHandler IsAMRMeterCompleted;
        
        /// CodeRemarks
        public event GetReadingsByDateCompletedEventHandler GetReadingsByDateCompleted;
        
        /// CodeRemarks
        public event GetReadingsByMeterIDCompletedEventHandler GetReadingsByMeterIDCompleted;
        
        /// CodeRemarks
        public event GetReadingsByMeterIDListAndFieldNameIntervalDataCompletedEventHandler GetReadingsByMeterIDListAndFieldNameIntervalDataCompleted;
        
        /// CodeRemarks
        public event GetLatestReadingByMeterIDCompletedEventHandler GetLatestReadingByMeterIDCompleted;
        
        /// CodeRemarks
        public event GetReadingsByBillingCycleCompletedEventHandler GetReadingsByBillingCycleCompleted;
        
        /// CodeRemarks
        public event GetReadingByMeterIDFormattedBlockCompletedEventHandler GetReadingByMeterIDFormattedBlockCompleted;
        
        /// CodeRemarks
        public event GetReadingsByDateFormattedBlockCompletedEventHandler GetReadingsByDateFormattedBlockCompleted;
        
        /// CodeRemarks
        public event GetHistoryLogByMeterIDCompletedEventHandler GetHistoryLogByMeterIDCompleted;
        
        /// CodeRemarks
        public event GetHistoryLogsByDateCompletedEventHandler GetHistoryLogsByDateCompleted;
        
        /// CodeRemarks
        public event GetHistoryLogsByMeterIDAndEventCodeCompletedEventHandler GetHistoryLogsByMeterIDAndEventCodeCompleted;
        
        /// CodeRemarks
        public event GetHistoryLogsByDateAndEventCodeCompletedEventHandler GetHistoryLogsByDateAndEventCodeCompleted;
        
        /// CodeRemarks
        public event GetLatestMeterReadingsByMeterGroupCompletedEventHandler GetLatestMeterReadingsByMeterGroupCompleted;
        
        /// CodeRemarks
        public event GetLatestReadingByMeterIDAndFieldNameCompletedEventHandler GetLatestReadingByMeterIDAndFieldNameCompleted;
        
        /// CodeRemarks
        public event GetLatestReadingByFieldNameCompletedEventHandler GetLatestReadingByFieldNameCompleted;
        
        /// CodeRemarks
        public event GetReadingsByDateAndFieldNameCompletedEventHandler GetReadingsByDateAndFieldNameCompleted;
        
        /// CodeRemarks
        public event GetSupportedFieldNamesCompletedEventHandler GetSupportedFieldNamesCompleted;
        
        /// CodeRemarks
        public event GetReadingsByMeterIDAndFieldNameCompletedEventHandler GetReadingsByMeterIDAndFieldNameCompleted;
        
        /// CodeRemarks
        public event GetLatestReadingsCompletedEventHandler GetLatestReadingsCompleted;
        
        /// CodeRemarks
        public event GetAllInHomeDisplaysCompletedEventHandler GetAllInHomeDisplaysCompleted;
        
        /// CodeRemarks
        public event GetReadingsByUOMAndDateCompletedEventHandler GetReadingsByUOMAndDateCompleted;
        
        /// CodeRemarks
        public event GetAllOutageDetectionDevicesCompletedEventHandler GetAllOutageDetectionDevicesCompleted;
        
        /// CodeRemarks
        public event GetOutageDetectionDevicesByMeterIDCompletedEventHandler GetOutageDetectionDevicesByMeterIDCompleted;
        
        /// CodeRemarks
        public event GetOutageDetectionDevicesByStatusCompletedEventHandler GetOutageDetectionDevicesByStatusCompleted;
        
        /// CodeRemarks
        public event GetOutageDetectionDevicesByTypeCompletedEventHandler GetOutageDetectionDevicesByTypeCompleted;
        
        /// CodeRemarks
        public event GetOutagedODDevicesCompletedEventHandler GetOutagedODDevicesCompleted;
        
        /// CodeRemarks
        public event GetCDSupportedMetersCompletedEventHandler GetCDSupportedMetersCompleted;
        
        /// CodeRemarks
        public event GetModifiedCDMetersCompletedEventHandler GetModifiedCDMetersCompleted;
        
        /// CodeRemarks
        public event GetCDMeterStateCompletedEventHandler GetCDMeterStateCompleted;
        
        /// CodeRemarks
        public event GetOutageEventStatusCompletedEventHandler GetOutageEventStatusCompleted;
        
        /// CodeRemarks
        public event GetActiveOutagesCompletedEventHandler GetActiveOutagesCompleted;
        
        /// CodeRemarks
        public event GetOutageEventStatusByOutageLocationCompletedEventHandler GetOutageEventStatusByOutageLocationCompleted;
        
        /// CodeRemarks
        public event GetAllElectricMetersCompletedEventHandler GetAllElectricMetersCompleted;
        
        /// CodeRemarks
        public event GetAllGasMetersCompletedEventHandler GetAllGasMetersCompleted;
        
        /// CodeRemarks
        public event GetAllWaterMetersCompletedEventHandler GetAllWaterMetersCompleted;
        
        /// CodeRemarks
        public event GetAllPropaneMetersCompletedEventHandler GetAllPropaneMetersCompleted;
        
        /// CodeRemarks
        public event GetElectricMetersByAccountNumberCompletedEventHandler GetElectricMetersByAccountNumberCompleted;
        
        /// CodeRemarks
        public event GetGasMetersByAccountNumberCompletedEventHandler GetGasMetersByAccountNumberCompleted;
        
        /// CodeRemarks
        public event GetWaterMetersByAccountNumberCompletedEventHandler GetWaterMetersByAccountNumberCompleted;
        
        /// CodeRemarks
        public event GetPropaneMetersByAccountNumberCompletedEventHandler GetPropaneMetersByAccountNumberCompleted;
        
        /// CodeRemarks
        public event GetAllCustomersByServiceTypeCompletedEventHandler GetAllCustomersByServiceTypeCompleted;
        
        /// CodeRemarks
        public event GetAllMetersByServiceTypeCompletedEventHandler GetAllMetersByServiceTypeCompleted;
        
        /// CodeRemarks
        public event GetAllServiceLocationsByServiceTypeCompletedEventHandler GetAllServiceLocationsByServiceTypeCompleted;
        
        /// CodeRemarks
        public event GetMetersByAccountNumberAndServiceTypeCompletedEventHandler GetMetersByAccountNumberAndServiceTypeCompleted;
        
        /// CodeRemarks
        public event GetAllCustomersCompletedEventHandler GetAllCustomersCompleted;
        
        /// CodeRemarks
        public event GetModifiedCustomersCompletedEventHandler GetModifiedCustomersCompleted;
        
        /// CodeRemarks
        public event GetModifiedServiceLocationsCompletedEventHandler GetModifiedServiceLocationsCompleted;
        
        /// CodeRemarks
        public event GetCustomerByCustomerIDCompletedEventHandler GetCustomerByCustomerIDCompleted;
        
        /// CodeRemarks
        public event GetCustomerByMeterIDCompletedEventHandler GetCustomerByMeterIDCompleted;
        
        /// CodeRemarks
        public event GetCustomerByNameCompletedEventHandler GetCustomerByNameCompleted;
        
        /// CodeRemarks
        public event GetCustomerByDBANameCompletedEventHandler GetCustomerByDBANameCompleted;
        
        /// CodeRemarks
        public event GetDeviceTreeConnectivityCompletedEventHandler GetDeviceTreeConnectivityCompleted;
        
        /// CodeRemarks
        public event GetMeterConnectivityBySubstationCompletedEventHandler GetMeterConnectivityBySubstationCompleted;
        
        /// CodeRemarks
        public event GetEndDeviceShipmentByShipmentIDCompletedEventHandler GetEndDeviceShipmentByShipmentIDCompleted;
        
        /// CodeRemarks
        public event GetEndDeviceShipmentsByDateRangeCompletedEventHandler GetEndDeviceShipmentsByDateRangeCompleted;
        
        /// CodeRemarks
        public event GetEndDeviceShipmentByMeterIDCompletedEventHandler GetEndDeviceShipmentByMeterIDCompleted;
        
        /// CodeRemarks
        public event GetEndDeviceShipmentByTransponderIDCompletedEventHandler GetEndDeviceShipmentByTransponderIDCompleted;
        
        /// CodeRemarks
        public event GetLPDataByMeterIDCompletedEventHandler GetLPDataByMeterIDCompleted;
        
        /// CodeRemarks
        public event GetMeterByMeterIDCompletedEventHandler GetMeterByMeterIDCompleted;
        
        /// CodeRemarks
        public event GetMeterByServiceLocationIDCompletedEventHandler GetMeterByServiceLocationIDCompleted;
        
        /// CodeRemarks
        public event GetAllMetersByAccountNumberCompletedEventHandler GetAllMetersByAccountNumberCompleted;
        
        /// CodeRemarks
        public event GetMeterByCustomerIDCompletedEventHandler GetMeterByCustomerIDCompleted;
        
        /// CodeRemarks
        public event GetMetersByAMRTypeCompletedEventHandler GetMetersByAMRTypeCompleted;
        
        /// CodeRemarks
        public event GetMeterGroupNamesCompletedEventHandler GetMeterGroupNamesCompleted;
        
        /// CodeRemarks
        public event GetMeterGroupNamesByMeterIDCompletedEventHandler GetMeterGroupNamesByMeterIDCompleted;
        
        /// CodeRemarks
        public event GetMeterGroupMembersCompletedEventHandler GetMeterGroupMembersCompleted;
        
        /// CodeRemarks
        public event GetModifiedMetersCompletedEventHandler GetModifiedMetersCompleted;
        
        /// CodeRemarks
        public event GetServiceLocationByServiceStatusCompletedEventHandler GetServiceLocationByServiceStatusCompleted;
        
        /// CodeRemarks
        public event GetServiceLocationByServiceLocationIDCompletedEventHandler GetServiceLocationByServiceLocationIDCompleted;
        
        /// CodeRemarks
        public event GetServiceLocationByCustomerIDCompletedEventHandler GetServiceLocationByCustomerIDCompleted;
        
        /// CodeRemarks
        public event GetServiceLocationByMeterIDCompletedEventHandler GetServiceLocationByMeterIDCompleted;
        
        /// CodeRemarks
        public event GetServiceLocationByAccountNumberCompletedEventHandler GetServiceLocationByAccountNumberCompleted;
        
        /// CodeRemarks
        public event GetServiceLocationByGridLocationCompletedEventHandler GetServiceLocationByGridLocationCompleted;
        
        /// CodeRemarks
        public event GetServiceLocationByPhaseCodeCompletedEventHandler GetServiceLocationByPhaseCodeCompleted;
        
        /// CodeRemarks
        public event GetServiceLocationByLoadGroupCompletedEventHandler GetServiceLocationByLoadGroupCompleted;
        
        /// CodeRemarks
        public event GetServiceLocationByServiceTypeCompletedEventHandler GetServiceLocationByServiceTypeCompleted;
        
        /// CodeRemarks
        public event GetServiceLocationByShutOffDateCompletedEventHandler GetServiceLocationByShutOffDateCompleted;
        
        /// CodeRemarks
        public event GetMetersByEALocationCompletedEventHandler GetMetersByEALocationCompleted;
        
        /// CodeRemarks
        public event GetMetersByFacilityIDCompletedEventHandler GetMetersByFacilityIDCompleted;
        
        /// CodeRemarks
        public event GetMetersBySiteIDCompletedEventHandler GetMetersBySiteIDCompleted;
        
        /// CodeRemarks
        public event GetMetersByCustomerNameCompletedEventHandler GetMetersByCustomerNameCompleted;
        
        /// CodeRemarks
        public event GetMetersByHomePhoneCompletedEventHandler GetMetersByHomePhoneCompleted;
        
        /// CodeRemarks
        public event GetMetersBySearchStringCompletedEventHandler GetMetersBySearchStringCompleted;
        
        /// CodeRemarks
        public event GetLPReadingsByMeterIDFormattedBlockCompletedEventHandler GetLPReadingsByMeterIDFormattedBlockCompleted;
        
        /// CodeRemarks
        public event GetLPReadingsByDateFormattedBlockCompletedEventHandler GetLPReadingsByDateFormattedBlockCompleted;
        
        /// CodeRemarks
        public event GetLPReadingsByBillingCycleCompletedEventHandler GetLPReadingsByBillingCycleCompleted;
        
        /// CodeRemarks
        public event GetAllAccountsCompletedEventHandler GetAllAccountsCompleted;
        
        /// CodeRemarks
        public event GetAccountsByCustomerIDCompletedEventHandler GetAccountsByCustomerIDCompleted;
        
        /// CodeRemarks
        public event GetAccountByMeterIDCompletedEventHandler GetAccountByMeterIDCompleted;
        
        /// CodeRemarks
        public event GetAccountByServiceLocationIDAndServiceTypeCompletedEventHandler GetAccountByServiceLocationIDAndServiceTypeCompleted;
        
        /// CodeRemarks
        public event GetConfigurationGroupNamesCompletedEventHandler GetConfigurationGroupNamesCompleted;
        
        /// CodeRemarks
        public event GetConfigurationGroupNamesByMeterIDCompletedEventHandler GetConfigurationGroupNamesByMeterIDCompleted;
        
        /// CodeRemarks
        public event GetConfigurationGroupMembersCompletedEventHandler GetConfigurationGroupMembersCompleted;
        
        /// CodeRemarks
        public event GetSchedulesCompletedEventHandler GetSchedulesCompleted;
        
        /// CodeRemarks
        public event GetScheduleByIDCompletedEventHandler GetScheduleByIDCompleted;
        
        /// CodeRemarks
        public event GetReadingSchedulesCompletedEventHandler GetReadingSchedulesCompleted;
        
        /// CodeRemarks
        public event GetReadingScheduleByIDCompletedEventHandler GetReadingScheduleByIDCompleted;
        
        /// CodeRemarks
        public event GetLatestReadingsByMeterIDListCompletedEventHandler GetLatestReadingsByMeterIDListCompleted;
        
        /// CodeRemarks
        public event GetMeterBaseByObjectIDCompletedEventHandler GetMeterBaseByObjectIDCompleted;
        
        /// CodeRemarks
        public event GetFormattedBlockTemplatesCompletedEventHandler GetFormattedBlockTemplatesCompleted;
        
        /// CodeRemarks
        public event GetLatestReadingsByMeterListFormattedBlockCompletedEventHandler GetLatestReadingsByMeterListFormattedBlockCompleted;
        
        /// CodeRemarks
        public event GetAllConnectDisconnectEventsByReasonCodeCompletedEventHandler GetAllConnectDisconnectEventsByReasonCodeCompleted;
        
        /// CodeRemarks
        public event GetSupportedReadingStatusCodesCompletedEventHandler GetSupportedReadingStatusCodesCompleted;
        
        /// CodeRemarks
        public event GetLPReadingsByMeterIDIntervalDataCompletedEventHandler GetLPReadingsByMeterIDIntervalDataCompleted;
        
        /// CodeRemarks
        public event GetLPReadingsByDateIntervalDataCompletedEventHandler GetLPReadingsByDateIntervalDataCompleted;
        
        /// CodeRemarks
        public event GetLPReadingsByBillingCycleIntervalDataCompletedEventHandler GetLPReadingsByBillingCycleIntervalDataCompleted;
        
        /// CodeRemarks
        public event GetReadingsByBillingCycleIntervalDataCompletedEventHandler GetReadingsByBillingCycleIntervalDataCompleted;
        
        /// CodeRemarks
        public event GetReadingByMeterIDIntervalDataCompletedEventHandler GetReadingByMeterIDIntervalDataCompleted;
        
        /// CodeRemarks
        public event GetReadingsByDateIntervalDataCompletedEventHandler GetReadingsByDateIntervalDataCompleted;
        
        /// CodeRemarks
        public event GetLatestMeterReadingsByMeterGroupIntervalDataCompletedEventHandler GetLatestMeterReadingsByMeterGroupIntervalDataCompleted;
        
        /// CodeRemarks
        public event GetLatestReadingByMeterIDAndFieldNameIntervalDataCompletedEventHandler GetLatestReadingByMeterIDAndFieldNameIntervalDataCompleted;
        
        /// CodeRemarks
        public event GetLatestReadingByFieldNameIntervalDataCompletedEventHandler GetLatestReadingByFieldNameIntervalDataCompleted;
        
        /// CodeRemarks
        public event GetReadingsByDateAndFieldNameIntervalDataCompletedEventHandler GetReadingsByDateAndFieldNameIntervalDataCompleted;
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateIHDCapabilitySettings", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateIHDCapabilitySettings(inHomeDisplayCapabilitySetting[] inHomeDisplayCapabilitySettings, HANDeviceID deviceID, string transactionID, string responseURL, HANInterfaceID interfaceID) {
            object[] results = this.Invoke("InitiateIHDCapabilitySettings", new object[] {
                        inHomeDisplayCapabilitySettings,
                        deviceID,
                        transactionID,
                        responseURL,
                        interfaceID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateIHDCapabilitySettingsAsync(inHomeDisplayCapabilitySetting[] inHomeDisplayCapabilitySettings, HANDeviceID deviceID, string transactionID, string responseURL, HANInterfaceID interfaceID) {
            this.InitiateIHDCapabilitySettingsAsync(inHomeDisplayCapabilitySettings, deviceID, transactionID, responseURL, interfaceID, null);
        }
        
        /// CodeRemarks
        public void InitiateIHDCapabilitySettingsAsync(inHomeDisplayCapabilitySetting[] inHomeDisplayCapabilitySettings, HANDeviceID deviceID, string transactionID, string responseURL, HANInterfaceID interfaceID, object userState) {
            if ((this.InitiateIHDCapabilitySettingsOperationCompleted == null)) {
                this.InitiateIHDCapabilitySettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateIHDCapabilitySettingsOperationCompleted);
            }
            this.InvokeAsync("InitiateIHDCapabilitySettings", new object[] {
                        inHomeDisplayCapabilitySettings,
                        deviceID,
                        transactionID,
                        responseURL,
                        interfaceID}, this.InitiateIHDCapabilitySettingsOperationCompleted, userState);
        }
        
        private void OnInitiateIHDCapabilitySettingsOperationCompleted(object arg) {
            if ((this.InitiateIHDCapabilitySettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateIHDCapabilitySettingsCompleted(this, new InitiateIHDCapabilitySettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateIHDCapabilitySettingsToGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateIHDCapabilitySettingsToGroup(inHomeDisplayCapabilitySetting[] inHomeDisplayCapabilitySettings, HANGroupID groupID, string transactionID, string responseURL) {
            object[] results = this.Invoke("InitiateIHDCapabilitySettingsToGroup", new object[] {
                        inHomeDisplayCapabilitySettings,
                        groupID,
                        transactionID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateIHDCapabilitySettingsToGroupAsync(inHomeDisplayCapabilitySetting[] inHomeDisplayCapabilitySettings, HANGroupID groupID, string transactionID, string responseURL) {
            this.InitiateIHDCapabilitySettingsToGroupAsync(inHomeDisplayCapabilitySettings, groupID, transactionID, responseURL, null);
        }
        
        /// CodeRemarks
        public void InitiateIHDCapabilitySettingsToGroupAsync(inHomeDisplayCapabilitySetting[] inHomeDisplayCapabilitySettings, HANGroupID groupID, string transactionID, string responseURL, object userState) {
            if ((this.InitiateIHDCapabilitySettingsToGroupOperationCompleted == null)) {
                this.InitiateIHDCapabilitySettingsToGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateIHDCapabilitySettingsToGroupOperationCompleted);
            }
            this.InvokeAsync("InitiateIHDCapabilitySettingsToGroup", new object[] {
                        inHomeDisplayCapabilitySettings,
                        groupID,
                        transactionID,
                        responseURL}, this.InitiateIHDCapabilitySettingsToGroupOperationCompleted, userState);
        }
        
        private void OnInitiateIHDCapabilitySettingsToGroupOperationCompleted(object arg) {
            if ((this.InitiateIHDCapabilitySettingsToGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateIHDCapabilitySettingsToGroupCompleted(this, new InitiateIHDCapabilitySettingsToGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateManufacturerSpecificCommand", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateManufacturerSpecificCommand(HANDeviceID deviceID, string transactionID, tunnelCommandContent command, string responseURL, HANInterfaceID interfaceID) {
            object[] results = this.Invoke("InitiateManufacturerSpecificCommand", new object[] {
                        deviceID,
                        transactionID,
                        command,
                        responseURL,
                        interfaceID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateManufacturerSpecificCommandAsync(HANDeviceID deviceID, string transactionID, tunnelCommandContent command, string responseURL, HANInterfaceID interfaceID) {
            this.InitiateManufacturerSpecificCommandAsync(deviceID, transactionID, command, responseURL, interfaceID, null);
        }
        
        /// CodeRemarks
        public void InitiateManufacturerSpecificCommandAsync(HANDeviceID deviceID, string transactionID, tunnelCommandContent command, string responseURL, HANInterfaceID interfaceID, object userState) {
            if ((this.InitiateManufacturerSpecificCommandOperationCompleted == null)) {
                this.InitiateManufacturerSpecificCommandOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateManufacturerSpecificCommandOperationCompleted);
            }
            this.InvokeAsync("InitiateManufacturerSpecificCommand", new object[] {
                        deviceID,
                        transactionID,
                        command,
                        responseURL,
                        interfaceID}, this.InitiateManufacturerSpecificCommandOperationCompleted, userState);
        }
        
        private void OnInitiateManufacturerSpecificCommandOperationCompleted(object arg) {
            if ((this.InitiateManufacturerSpecificCommandCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateManufacturerSpecificCommandCompleted(this, new InitiateManufacturerSpecificCommandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateManufacturerSpecificCommandToGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateManufacturerSpecificCommandToGroup(HANGroupID groupID, string transactionID, tunnelCommandContent command, string responseURL) {
            object[] results = this.Invoke("InitiateManufacturerSpecificCommandToGroup", new object[] {
                        groupID,
                        transactionID,
                        command,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateManufacturerSpecificCommandToGroupAsync(HANGroupID groupID, string transactionID, tunnelCommandContent command, string responseURL) {
            this.InitiateManufacturerSpecificCommandToGroupAsync(groupID, transactionID, command, responseURL, null);
        }
        
        /// CodeRemarks
        public void InitiateManufacturerSpecificCommandToGroupAsync(HANGroupID groupID, string transactionID, tunnelCommandContent command, string responseURL, object userState) {
            if ((this.InitiateManufacturerSpecificCommandToGroupOperationCompleted == null)) {
                this.InitiateManufacturerSpecificCommandToGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateManufacturerSpecificCommandToGroupOperationCompleted);
            }
            this.InvokeAsync("InitiateManufacturerSpecificCommandToGroup", new object[] {
                        groupID,
                        transactionID,
                        command,
                        responseURL}, this.InitiateManufacturerSpecificCommandToGroupOperationCompleted, userState);
        }
        
        private void OnInitiateManufacturerSpecificCommandToGroupOperationCompleted(object arg) {
            if ((this.InitiateManufacturerSpecificCommandToGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateManufacturerSpecificCommandToGroupCompleted(this, new InitiateManufacturerSpecificCommandToGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/ManufacturerSpecificCommandNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] ManufacturerSpecificCommandNotification(HANDeviceID deviceID, string transactionID, tunnelCommandContent command, HANInterfaceID interfaceID) {
            object[] results = this.Invoke("ManufacturerSpecificCommandNotification", new object[] {
                        deviceID,
                        transactionID,
                        command,
                        interfaceID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void ManufacturerSpecificCommandNotificationAsync(HANDeviceID deviceID, string transactionID, tunnelCommandContent command, HANInterfaceID interfaceID) {
            this.ManufacturerSpecificCommandNotificationAsync(deviceID, transactionID, command, interfaceID, null);
        }
        
        /// CodeRemarks
        public void ManufacturerSpecificCommandNotificationAsync(HANDeviceID deviceID, string transactionID, tunnelCommandContent command, HANInterfaceID interfaceID, object userState) {
            if ((this.ManufacturerSpecificCommandNotificationOperationCompleted == null)) {
                this.ManufacturerSpecificCommandNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnManufacturerSpecificCommandNotificationOperationCompleted);
            }
            this.InvokeAsync("ManufacturerSpecificCommandNotification", new object[] {
                        deviceID,
                        transactionID,
                        command,
                        interfaceID}, this.ManufacturerSpecificCommandNotificationOperationCompleted, userState);
        }
        
        private void OnManufacturerSpecificCommandNotificationOperationCompleted(object arg) {
            if ((this.ManufacturerSpecificCommandNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ManufacturerSpecificCommandNotificationCompleted(this, new ManufacturerSpecificCommandNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/ThermostatAddNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] ThermostatAddNotification(thermostat[] addedThermostats, string transactionID) {
            object[] results = this.Invoke("ThermostatAddNotification", new object[] {
                        addedThermostats,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void ThermostatAddNotificationAsync(thermostat[] addedThermostats, string transactionID) {
            this.ThermostatAddNotificationAsync(addedThermostats, transactionID, null);
        }
        
        /// CodeRemarks
        public void ThermostatAddNotificationAsync(thermostat[] addedThermostats, string transactionID, object userState) {
            if ((this.ThermostatAddNotificationOperationCompleted == null)) {
                this.ThermostatAddNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnThermostatAddNotificationOperationCompleted);
            }
            this.InvokeAsync("ThermostatAddNotification", new object[] {
                        addedThermostats,
                        transactionID}, this.ThermostatAddNotificationOperationCompleted, userState);
        }
        
        private void OnThermostatAddNotificationOperationCompleted(object arg) {
            if ((this.ThermostatAddNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ThermostatAddNotificationCompleted(this, new ThermostatAddNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/ThermostatRemoveNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] ThermostatRemoveNotification(thermostat[] addedThermostats, string transactionID) {
            object[] results = this.Invoke("ThermostatRemoveNotification", new object[] {
                        addedThermostats,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void ThermostatRemoveNotificationAsync(thermostat[] addedThermostats, string transactionID) {
            this.ThermostatRemoveNotificationAsync(addedThermostats, transactionID, null);
        }
        
        /// CodeRemarks
        public void ThermostatRemoveNotificationAsync(thermostat[] addedThermostats, string transactionID, object userState) {
            if ((this.ThermostatRemoveNotificationOperationCompleted == null)) {
                this.ThermostatRemoveNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnThermostatRemoveNotificationOperationCompleted);
            }
            this.InvokeAsync("ThermostatRemoveNotification", new object[] {
                        addedThermostats,
                        transactionID}, this.ThermostatRemoveNotificationOperationCompleted, userState);
        }
        
        private void OnThermostatRemoveNotificationOperationCompleted(object arg) {
            if ((this.ThermostatRemoveNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ThermostatRemoveNotificationCompleted(this, new ThermostatRemoveNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/ThermostatScheduleNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] ThermostatScheduleNotification([System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] thermostatScheduleDay[] schedule, HANDeviceID thermostatID, string transactionID, HANInterfaceID interfaceID) {
            object[] results = this.Invoke("ThermostatScheduleNotification", new object[] {
                        schedule,
                        thermostatID,
                        transactionID,
                        interfaceID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void ThermostatScheduleNotificationAsync(thermostatScheduleDay[] schedule, HANDeviceID thermostatID, string transactionID, HANInterfaceID interfaceID) {
            this.ThermostatScheduleNotificationAsync(schedule, thermostatID, transactionID, interfaceID, null);
        }
        
        /// CodeRemarks
        public void ThermostatScheduleNotificationAsync(thermostatScheduleDay[] schedule, HANDeviceID thermostatID, string transactionID, HANInterfaceID interfaceID, object userState) {
            if ((this.ThermostatScheduleNotificationOperationCompleted == null)) {
                this.ThermostatScheduleNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnThermostatScheduleNotificationOperationCompleted);
            }
            this.InvokeAsync("ThermostatScheduleNotification", new object[] {
                        schedule,
                        thermostatID,
                        transactionID,
                        interfaceID}, this.ThermostatScheduleNotificationOperationCompleted, userState);
        }
        
        private void OnThermostatScheduleNotificationOperationCompleted(object arg) {
            if ((this.ThermostatScheduleNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ThermostatScheduleNotificationCompleted(this, new ThermostatScheduleNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/ThermostatScheduleConfirmedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] ThermostatScheduleConfirmedNotification(HANDeviceID thermostatID, string transactionID, bool isConfirmed, HANInterfaceID interfaceID) {
            object[] results = this.Invoke("ThermostatScheduleConfirmedNotification", new object[] {
                        thermostatID,
                        transactionID,
                        isConfirmed,
                        interfaceID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void ThermostatScheduleConfirmedNotificationAsync(HANDeviceID thermostatID, string transactionID, bool isConfirmed, HANInterfaceID interfaceID) {
            this.ThermostatScheduleConfirmedNotificationAsync(thermostatID, transactionID, isConfirmed, interfaceID, null);
        }
        
        /// CodeRemarks
        public void ThermostatScheduleConfirmedNotificationAsync(HANDeviceID thermostatID, string transactionID, bool isConfirmed, HANInterfaceID interfaceID, object userState) {
            if ((this.ThermostatScheduleConfirmedNotificationOperationCompleted == null)) {
                this.ThermostatScheduleConfirmedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnThermostatScheduleConfirmedNotificationOperationCompleted);
            }
            this.InvokeAsync("ThermostatScheduleConfirmedNotification", new object[] {
                        thermostatID,
                        transactionID,
                        isConfirmed,
                        interfaceID}, this.ThermostatScheduleConfirmedNotificationOperationCompleted, userState);
        }
        
        private void OnThermostatScheduleConfirmedNotificationOperationCompleted(object arg) {
            if ((this.ThermostatScheduleConfirmedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ThermostatScheduleConfirmedNotificationCompleted(this, new ThermostatScheduleConfirmedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/ThermostatConfigurationNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] ThermostatConfigurationNotification(HANDeviceID thermostatID, string transactionID, thermostatCurrentConfiguration currentConfiguration, HANInterfaceID interfaceID) {
            object[] results = this.Invoke("ThermostatConfigurationNotification", new object[] {
                        thermostatID,
                        transactionID,
                        currentConfiguration,
                        interfaceID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void ThermostatConfigurationNotificationAsync(HANDeviceID thermostatID, string transactionID, thermostatCurrentConfiguration currentConfiguration, HANInterfaceID interfaceID) {
            this.ThermostatConfigurationNotificationAsync(thermostatID, transactionID, currentConfiguration, interfaceID, null);
        }
        
        /// CodeRemarks
        public void ThermostatConfigurationNotificationAsync(HANDeviceID thermostatID, string transactionID, thermostatCurrentConfiguration currentConfiguration, HANInterfaceID interfaceID, object userState) {
            if ((this.ThermostatConfigurationNotificationOperationCompleted == null)) {
                this.ThermostatConfigurationNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnThermostatConfigurationNotificationOperationCompleted);
            }
            this.InvokeAsync("ThermostatConfigurationNotification", new object[] {
                        thermostatID,
                        transactionID,
                        currentConfiguration,
                        interfaceID}, this.ThermostatConfigurationNotificationOperationCompleted, userState);
        }
        
        private void OnThermostatConfigurationNotificationOperationCompleted(object arg) {
            if ((this.ThermostatConfigurationNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ThermostatConfigurationNotificationCompleted(this, new ThermostatConfigurationNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateThermostatSchedule", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateThermostatSchedule([System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] thermostatScheduleDay[] schedule, HANDeviceID thermostatID, string transactionID, string responseURL, HANInterfaceID interfaceID) {
            object[] results = this.Invoke("InitiateThermostatSchedule", new object[] {
                        schedule,
                        thermostatID,
                        transactionID,
                        responseURL,
                        interfaceID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateThermostatScheduleAsync(thermostatScheduleDay[] schedule, HANDeviceID thermostatID, string transactionID, string responseURL, HANInterfaceID interfaceID) {
            this.InitiateThermostatScheduleAsync(schedule, thermostatID, transactionID, responseURL, interfaceID, null);
        }
        
        /// CodeRemarks
        public void InitiateThermostatScheduleAsync(thermostatScheduleDay[] schedule, HANDeviceID thermostatID, string transactionID, string responseURL, HANInterfaceID interfaceID, object userState) {
            if ((this.InitiateThermostatScheduleOperationCompleted == null)) {
                this.InitiateThermostatScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateThermostatScheduleOperationCompleted);
            }
            this.InvokeAsync("InitiateThermostatSchedule", new object[] {
                        schedule,
                        thermostatID,
                        transactionID,
                        responseURL,
                        interfaceID}, this.InitiateThermostatScheduleOperationCompleted, userState);
        }
        
        private void OnInitiateThermostatScheduleOperationCompleted(object arg) {
            if ((this.InitiateThermostatScheduleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateThermostatScheduleCompleted(this, new InitiateThermostatScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateThermostatScheduleRequest", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateThermostatScheduleRequest(HANDeviceID thermostatID, string transactionID, string responseURL, HANInterfaceID interfaceID) {
            object[] results = this.Invoke("InitiateThermostatScheduleRequest", new object[] {
                        thermostatID,
                        transactionID,
                        responseURL,
                        interfaceID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateThermostatScheduleRequestAsync(HANDeviceID thermostatID, string transactionID, string responseURL, HANInterfaceID interfaceID) {
            this.InitiateThermostatScheduleRequestAsync(thermostatID, transactionID, responseURL, interfaceID, null);
        }
        
        /// CodeRemarks
        public void InitiateThermostatScheduleRequestAsync(HANDeviceID thermostatID, string transactionID, string responseURL, HANInterfaceID interfaceID, object userState) {
            if ((this.InitiateThermostatScheduleRequestOperationCompleted == null)) {
                this.InitiateThermostatScheduleRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateThermostatScheduleRequestOperationCompleted);
            }
            this.InvokeAsync("InitiateThermostatScheduleRequest", new object[] {
                        thermostatID,
                        transactionID,
                        responseURL,
                        interfaceID}, this.InitiateThermostatScheduleRequestOperationCompleted, userState);
        }
        
        private void OnInitiateThermostatScheduleRequestOperationCompleted(object arg) {
            if ((this.InitiateThermostatScheduleRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateThermostatScheduleRequestCompleted(this, new InitiateThermostatScheduleRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateThermostatConfiguration", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateThermostatConfiguration(thermostatConfiguration configuration, HANDeviceID thermostatID, string transactionID, string responseURL, HANInterfaceID interfaceID) {
            object[] results = this.Invoke("InitiateThermostatConfiguration", new object[] {
                        configuration,
                        thermostatID,
                        transactionID,
                        responseURL,
                        interfaceID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateThermostatConfigurationAsync(thermostatConfiguration configuration, HANDeviceID thermostatID, string transactionID, string responseURL, HANInterfaceID interfaceID) {
            this.InitiateThermostatConfigurationAsync(configuration, thermostatID, transactionID, responseURL, interfaceID, null);
        }
        
        /// CodeRemarks
        public void InitiateThermostatConfigurationAsync(thermostatConfiguration configuration, HANDeviceID thermostatID, string transactionID, string responseURL, HANInterfaceID interfaceID, object userState) {
            if ((this.InitiateThermostatConfigurationOperationCompleted == null)) {
                this.InitiateThermostatConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateThermostatConfigurationOperationCompleted);
            }
            this.InvokeAsync("InitiateThermostatConfiguration", new object[] {
                        configuration,
                        thermostatID,
                        transactionID,
                        responseURL,
                        interfaceID}, this.InitiateThermostatConfigurationOperationCompleted, userState);
        }
        
        private void OnInitiateThermostatConfigurationOperationCompleted(object arg) {
            if ((this.InitiateThermostatConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateThermostatConfigurationCompleted(this, new InitiateThermostatConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateThermostatConfigurationRequest", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateThermostatConfigurationRequest(HANDeviceID thermostatID, string transactionID, string responseURL, HANInterfaceID interfaceID) {
            object[] results = this.Invoke("InitiateThermostatConfigurationRequest", new object[] {
                        thermostatID,
                        transactionID,
                        responseURL,
                        interfaceID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateThermostatConfigurationRequestAsync(HANDeviceID thermostatID, string transactionID, string responseURL, HANInterfaceID interfaceID) {
            this.InitiateThermostatConfigurationRequestAsync(thermostatID, transactionID, responseURL, interfaceID, null);
        }
        
        /// CodeRemarks
        public void InitiateThermostatConfigurationRequestAsync(HANDeviceID thermostatID, string transactionID, string responseURL, HANInterfaceID interfaceID, object userState) {
            if ((this.InitiateThermostatConfigurationRequestOperationCompleted == null)) {
                this.InitiateThermostatConfigurationRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateThermostatConfigurationRequestOperationCompleted);
            }
            this.InvokeAsync("InitiateThermostatConfigurationRequest", new object[] {
                        thermostatID,
                        transactionID,
                        responseURL,
                        interfaceID}, this.InitiateThermostatConfigurationRequestOperationCompleted, userState);
        }
        
        private void OnInitiateThermostatConfigurationRequestOperationCompleted(object arg) {
            if ((this.InitiateThermostatConfigurationRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateThermostatConfigurationRequestCompleted(this, new InitiateThermostatConfigurationRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/IHDCapabilitySettingsNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] IHDCapabilitySettingsNotification(HANDeviceID inHomeDisplayID, string transactionID, HANInterfaceID interfaceID) {
            object[] results = this.Invoke("IHDCapabilitySettingsNotification", new object[] {
                        inHomeDisplayID,
                        transactionID,
                        interfaceID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void IHDCapabilitySettingsNotificationAsync(HANDeviceID inHomeDisplayID, string transactionID, HANInterfaceID interfaceID) {
            this.IHDCapabilitySettingsNotificationAsync(inHomeDisplayID, transactionID, interfaceID, null);
        }
        
        /// CodeRemarks
        public void IHDCapabilitySettingsNotificationAsync(HANDeviceID inHomeDisplayID, string transactionID, HANInterfaceID interfaceID, object userState) {
            if ((this.IHDCapabilitySettingsNotificationOperationCompleted == null)) {
                this.IHDCapabilitySettingsNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIHDCapabilitySettingsNotificationOperationCompleted);
            }
            this.InvokeAsync("IHDCapabilitySettingsNotification", new object[] {
                        inHomeDisplayID,
                        transactionID,
                        interfaceID}, this.IHDCapabilitySettingsNotificationOperationCompleted, userState);
        }
        
        private void OnIHDCapabilitySettingsNotificationOperationCompleted(object arg) {
            if ((this.IHDCapabilitySettingsNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IHDCapabilitySettingsNotificationCompleted(this, new IHDCapabilitySettingsNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetIHDGroupNamesByInHomeDisplayID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetIHDGroupNamesByInHomeDisplayID(string inHomeDisplayID) {
            object[] results = this.Invoke("GetIHDGroupNamesByInHomeDisplayID", new object[] {
                        inHomeDisplayID});
            return ((string[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetIHDGroupNamesByInHomeDisplayIDAsync(string inHomeDisplayID) {
            this.GetIHDGroupNamesByInHomeDisplayIDAsync(inHomeDisplayID, null);
        }
        
        /// CodeRemarks
        public void GetIHDGroupNamesByInHomeDisplayIDAsync(string inHomeDisplayID, object userState) {
            if ((this.GetIHDGroupNamesByInHomeDisplayIDOperationCompleted == null)) {
                this.GetIHDGroupNamesByInHomeDisplayIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIHDGroupNamesByInHomeDisplayIDOperationCompleted);
            }
            this.InvokeAsync("GetIHDGroupNamesByInHomeDisplayID", new object[] {
                        inHomeDisplayID}, this.GetIHDGroupNamesByInHomeDisplayIDOperationCompleted, userState);
        }
        
        private void OnGetIHDGroupNamesByInHomeDisplayIDOperationCompleted(object arg) {
            if ((this.GetIHDGroupNamesByInHomeDisplayIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIHDGroupNamesByInHomeDisplayIDCompleted(this, new GetIHDGroupNamesByInHomeDisplayIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/EstablishIHDGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] EstablishIHDGroup(inHomeDisplayGroup IHDGroup) {
            object[] results = this.Invoke("EstablishIHDGroup", new object[] {
                        IHDGroup});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void EstablishIHDGroupAsync(inHomeDisplayGroup IHDGroup) {
            this.EstablishIHDGroupAsync(IHDGroup, null);
        }
        
        /// CodeRemarks
        public void EstablishIHDGroupAsync(inHomeDisplayGroup IHDGroup, object userState) {
            if ((this.EstablishIHDGroupOperationCompleted == null)) {
                this.EstablishIHDGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEstablishIHDGroupOperationCompleted);
            }
            this.InvokeAsync("EstablishIHDGroup", new object[] {
                        IHDGroup}, this.EstablishIHDGroupOperationCompleted, userState);
        }
        
        private void OnEstablishIHDGroupOperationCompleted(object arg) {
            if ((this.EstablishIHDGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EstablishIHDGroupCompleted(this, new EstablishIHDGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/DeleteIHDGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] DeleteIHDGroup(string IHDGroupID) {
            object[] results = this.Invoke("DeleteIHDGroup", new object[] {
                        IHDGroupID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void DeleteIHDGroupAsync(string IHDGroupID) {
            this.DeleteIHDGroupAsync(IHDGroupID, null);
        }
        
        /// CodeRemarks
        public void DeleteIHDGroupAsync(string IHDGroupID, object userState) {
            if ((this.DeleteIHDGroupOperationCompleted == null)) {
                this.DeleteIHDGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteIHDGroupOperationCompleted);
            }
            this.InvokeAsync("DeleteIHDGroup", new object[] {
                        IHDGroupID}, this.DeleteIHDGroupOperationCompleted, userState);
        }
        
        private void OnDeleteIHDGroupOperationCompleted(object arg) {
            if ((this.DeleteIHDGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteIHDGroupCompleted(this, new DeleteIHDGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/DeleteHANDeviceGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] DeleteHANDeviceGroup(HANGroupID groupID) {
            object[] results = this.Invoke("DeleteHANDeviceGroup", new object[] {
                        groupID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void DeleteHANDeviceGroupAsync(HANGroupID groupID) {
            this.DeleteHANDeviceGroupAsync(groupID, null);
        }
        
        /// CodeRemarks
        public void DeleteHANDeviceGroupAsync(HANGroupID groupID, object userState) {
            if ((this.DeleteHANDeviceGroupOperationCompleted == null)) {
                this.DeleteHANDeviceGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteHANDeviceGroupOperationCompleted);
            }
            this.InvokeAsync("DeleteHANDeviceGroup", new object[] {
                        groupID}, this.DeleteHANDeviceGroupOperationCompleted, userState);
        }
        
        private void OnDeleteHANDeviceGroupOperationCompleted(object arg) {
            if ((this.DeleteHANDeviceGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteHANDeviceGroupCompleted(this, new DeleteHANDeviceGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InHomeDisplayMessageNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InHomeDisplayMessageNotification(inHomeDisplayMessage message) {
            object[] results = this.Invoke("InHomeDisplayMessageNotification", new object[] {
                        message});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InHomeDisplayMessageNotificationAsync(inHomeDisplayMessage message) {
            this.InHomeDisplayMessageNotificationAsync(message, null);
        }
        
        /// CodeRemarks
        public void InHomeDisplayMessageNotificationAsync(inHomeDisplayMessage message, object userState) {
            if ((this.InHomeDisplayMessageNotificationOperationCompleted == null)) {
                this.InHomeDisplayMessageNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInHomeDisplayMessageNotificationOperationCompleted);
            }
            this.InvokeAsync("InHomeDisplayMessageNotification", new object[] {
                        message}, this.InHomeDisplayMessageNotificationOperationCompleted, userState);
        }
        
        private void OnInHomeDisplayMessageNotificationOperationCompleted(object arg) {
            if ((this.InHomeDisplayMessageNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InHomeDisplayMessageNotificationCompleted(this, new InHomeDisplayMessageNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateInHomeDisplayMessageToGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateInHomeDisplayMessageToGroup(inHomeDisplayMessage[] messages, HANGroupID hanGroupID, string transactionID, string responseURL) {
            object[] results = this.Invoke("InitiateInHomeDisplayMessageToGroup", new object[] {
                        messages,
                        hanGroupID,
                        transactionID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateInHomeDisplayMessageToGroupAsync(inHomeDisplayMessage[] messages, HANGroupID hanGroupID, string transactionID, string responseURL) {
            this.InitiateInHomeDisplayMessageToGroupAsync(messages, hanGroupID, transactionID, responseURL, null);
        }
        
        /// CodeRemarks
        public void InitiateInHomeDisplayMessageToGroupAsync(inHomeDisplayMessage[] messages, HANGroupID hanGroupID, string transactionID, string responseURL, object userState) {
            if ((this.InitiateInHomeDisplayMessageToGroupOperationCompleted == null)) {
                this.InitiateInHomeDisplayMessageToGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateInHomeDisplayMessageToGroupOperationCompleted);
            }
            this.InvokeAsync("InitiateInHomeDisplayMessageToGroup", new object[] {
                        messages,
                        hanGroupID,
                        transactionID,
                        responseURL}, this.InitiateInHomeDisplayMessageToGroupOperationCompleted, userState);
        }
        
        private void OnInitiateInHomeDisplayMessageToGroupOperationCompleted(object arg) {
            if ((this.InitiateInHomeDisplayMessageToGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateInHomeDisplayMessageToGroupCompleted(this, new InitiateInHomeDisplayMessageToGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateInHomeDisplayMessage", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateInHomeDisplayMessage(inHomeDisplayMessage message, HANDeviceID deviceID, string transactionID, string responseURL, HANInterfaceID interfaceID) {
            object[] results = this.Invoke("InitiateInHomeDisplayMessage", new object[] {
                        message,
                        deviceID,
                        transactionID,
                        responseURL,
                        interfaceID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateInHomeDisplayMessageAsync(inHomeDisplayMessage message, HANDeviceID deviceID, string transactionID, string responseURL, HANInterfaceID interfaceID) {
            this.InitiateInHomeDisplayMessageAsync(message, deviceID, transactionID, responseURL, interfaceID, null);
        }
        
        /// CodeRemarks
        public void InitiateInHomeDisplayMessageAsync(inHomeDisplayMessage message, HANDeviceID deviceID, string transactionID, string responseURL, HANInterfaceID interfaceID, object userState) {
            if ((this.InitiateInHomeDisplayMessageOperationCompleted == null)) {
                this.InitiateInHomeDisplayMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateInHomeDisplayMessageOperationCompleted);
            }
            this.InvokeAsync("InitiateInHomeDisplayMessage", new object[] {
                        message,
                        deviceID,
                        transactionID,
                        responseURL,
                        interfaceID}, this.InitiateInHomeDisplayMessageOperationCompleted, userState);
        }
        
        private void OnInitiateInHomeDisplayMessageOperationCompleted(object arg) {
            if ((this.InitiateInHomeDisplayMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateInHomeDisplayMessageCompleted(this, new InitiateInHomeDisplayMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateHANCommissioning", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateHANCommissioning(HANInterfaceID interfaceID, string type, duration timeout, string transactionID, string responseURL) {
            object[] results = this.Invoke("InitiateHANCommissioning", new object[] {
                        interfaceID,
                        type,
                        timeout,
                        transactionID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateHANCommissioningAsync(HANInterfaceID interfaceID, string type, duration timeout, string transactionID, string responseURL) {
            this.InitiateHANCommissioningAsync(interfaceID, type, timeout, transactionID, responseURL, null);
        }
        
        /// CodeRemarks
        public void InitiateHANCommissioningAsync(HANInterfaceID interfaceID, string type, duration timeout, string transactionID, string responseURL, object userState) {
            if ((this.InitiateHANCommissioningOperationCompleted == null)) {
                this.InitiateHANCommissioningOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateHANCommissioningOperationCompleted);
            }
            this.InvokeAsync("InitiateHANCommissioning", new object[] {
                        interfaceID,
                        type,
                        timeout,
                        transactionID,
                        responseURL}, this.InitiateHANCommissioningOperationCompleted, userState);
        }
        
        private void OnInitiateHANCommissioningOperationCompleted(object arg) {
            if ((this.InitiateHANCommissioningCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateHANCommissioningCompleted(this, new InitiateHANCommissioningCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/HANCommissioningNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] HANCommissioningNotification(HANCommission[] commissions, string transactionID) {
            object[] results = this.Invoke("HANCommissioningNotification", new object[] {
                        commissions,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void HANCommissioningNotificationAsync(HANCommission[] commissions, string transactionID) {
            this.HANCommissioningNotificationAsync(commissions, transactionID, null);
        }
        
        /// CodeRemarks
        public void HANCommissioningNotificationAsync(HANCommission[] commissions, string transactionID, object userState) {
            if ((this.HANCommissioningNotificationOperationCompleted == null)) {
                this.HANCommissioningNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHANCommissioningNotificationOperationCompleted);
            }
            this.InvokeAsync("HANCommissioningNotification", new object[] {
                        commissions,
                        transactionID}, this.HANCommissioningNotificationOperationCompleted, userState);
        }
        
        private void OnHANCommissioningNotificationOperationCompleted(object arg) {
            if ((this.HANCommissioningNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HANCommissioningNotificationCompleted(this, new HANCommissioningNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CancelInHomeDisplayMessage", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CancelInHomeDisplayMessage(string inHomeDisplayMessageID, HANDeviceID deviceID, HANInterfaceID interfaceID, string transactionID, string responseURL) {
            object[] results = this.Invoke("CancelInHomeDisplayMessage", new object[] {
                        inHomeDisplayMessageID,
                        deviceID,
                        interfaceID,
                        transactionID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CancelInHomeDisplayMessageAsync(string inHomeDisplayMessageID, HANDeviceID deviceID, HANInterfaceID interfaceID, string transactionID, string responseURL) {
            this.CancelInHomeDisplayMessageAsync(inHomeDisplayMessageID, deviceID, interfaceID, transactionID, responseURL, null);
        }
        
        /// CodeRemarks
        public void CancelInHomeDisplayMessageAsync(string inHomeDisplayMessageID, HANDeviceID deviceID, HANInterfaceID interfaceID, string transactionID, string responseURL, object userState) {
            if ((this.CancelInHomeDisplayMessageOperationCompleted == null)) {
                this.CancelInHomeDisplayMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelInHomeDisplayMessageOperationCompleted);
            }
            this.InvokeAsync("CancelInHomeDisplayMessage", new object[] {
                        inHomeDisplayMessageID,
                        deviceID,
                        interfaceID,
                        transactionID,
                        responseURL}, this.CancelInHomeDisplayMessageOperationCompleted, userState);
        }
        
        private void OnCancelInHomeDisplayMessageOperationCompleted(object arg) {
            if ((this.CancelInHomeDisplayMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelInHomeDisplayMessageCompleted(this, new CancelInHomeDisplayMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CancelInHomeDisplayMessageToGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CancelInHomeDisplayMessageToGroup(string inHomeDisplayMessageID, HANGroupID HANGroupID, string transactionID, string responseURL) {
            object[] results = this.Invoke("CancelInHomeDisplayMessageToGroup", new object[] {
                        inHomeDisplayMessageID,
                        HANGroupID,
                        transactionID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CancelInHomeDisplayMessageToGroupAsync(string inHomeDisplayMessageID, HANGroupID HANGroupID, string transactionID, string responseURL) {
            this.CancelInHomeDisplayMessageToGroupAsync(inHomeDisplayMessageID, HANGroupID, transactionID, responseURL, null);
        }
        
        /// CodeRemarks
        public void CancelInHomeDisplayMessageToGroupAsync(string inHomeDisplayMessageID, HANGroupID HANGroupID, string transactionID, string responseURL, object userState) {
            if ((this.CancelInHomeDisplayMessageToGroupOperationCompleted == null)) {
                this.CancelInHomeDisplayMessageToGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelInHomeDisplayMessageToGroupOperationCompleted);
            }
            this.InvokeAsync("CancelInHomeDisplayMessageToGroup", new object[] {
                        inHomeDisplayMessageID,
                        HANGroupID,
                        transactionID,
                        responseURL}, this.CancelInHomeDisplayMessageToGroupOperationCompleted, userState);
        }
        
        private void OnCancelInHomeDisplayMessageToGroupOperationCompleted(object arg) {
            if ((this.CancelInHomeDisplayMessageToGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelInHomeDisplayMessageToGroupCompleted(this, new CancelInHomeDisplayMessageToGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InHomeDisplayBillingMessageNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InHomeDisplayBillingMessageNotification(inHomeDisplayBillingMessage message) {
            object[] results = this.Invoke("InHomeDisplayBillingMessageNotification", new object[] {
                        message});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InHomeDisplayBillingMessageNotificationAsync(inHomeDisplayBillingMessage message) {
            this.InHomeDisplayBillingMessageNotificationAsync(message, null);
        }
        
        /// CodeRemarks
        public void InHomeDisplayBillingMessageNotificationAsync(inHomeDisplayBillingMessage message, object userState) {
            if ((this.InHomeDisplayBillingMessageNotificationOperationCompleted == null)) {
                this.InHomeDisplayBillingMessageNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInHomeDisplayBillingMessageNotificationOperationCompleted);
            }
            this.InvokeAsync("InHomeDisplayBillingMessageNotification", new object[] {
                        message}, this.InHomeDisplayBillingMessageNotificationOperationCompleted, userState);
        }
        
        private void OnInHomeDisplayBillingMessageNotificationOperationCompleted(object arg) {
            if ((this.InHomeDisplayBillingMessageNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InHomeDisplayBillingMessageNotificationCompleted(this, new InHomeDisplayBillingMessageNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/ReadingScheduleResultNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] ReadingScheduleResultNotification(readingScheduleResult[] scheduleResult, string transactionID, string errorString) {
            object[] results = this.Invoke("ReadingScheduleResultNotification", new object[] {
                        scheduleResult,
                        transactionID,
                        errorString});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void ReadingScheduleResultNotificationAsync(readingScheduleResult[] scheduleResult, string transactionID, string errorString) {
            this.ReadingScheduleResultNotificationAsync(scheduleResult, transactionID, errorString, null);
        }
        
        /// CodeRemarks
        public void ReadingScheduleResultNotificationAsync(readingScheduleResult[] scheduleResult, string transactionID, string errorString, object userState) {
            if ((this.ReadingScheduleResultNotificationOperationCompleted == null)) {
                this.ReadingScheduleResultNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadingScheduleResultNotificationOperationCompleted);
            }
            this.InvokeAsync("ReadingScheduleResultNotification", new object[] {
                        scheduleResult,
                        transactionID,
                        errorString}, this.ReadingScheduleResultNotificationOperationCompleted, userState);
        }
        
        private void OnReadingScheduleResultNotificationOperationCompleted(object arg) {
            if ((this.ReadingScheduleResultNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadingScheduleResultNotificationCompleted(this, new ReadingScheduleResultNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/MeterEventNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] MeterEventNotification(meterEventList events, string transactionID) {
            object[] results = this.Invoke("MeterEventNotification", new object[] {
                        events,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void MeterEventNotificationAsync(meterEventList events, string transactionID) {
            this.MeterEventNotificationAsync(events, transactionID, null);
        }
        
        /// CodeRemarks
        public void MeterEventNotificationAsync(meterEventList events, string transactionID, object userState) {
            if ((this.MeterEventNotificationOperationCompleted == null)) {
                this.MeterEventNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMeterEventNotificationOperationCompleted);
            }
            this.InvokeAsync("MeterEventNotification", new object[] {
                        events,
                        transactionID}, this.MeterEventNotificationOperationCompleted, userState);
        }
        
        private void OnMeterEventNotificationOperationCompleted(object arg) {
            if ((this.MeterEventNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MeterEventNotificationCompleted(this, new MeterEventNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/MeterBaseExchangeNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] MeterBaseExchangeNotification(meterBaseExchange[] MBChangeout) {
            object[] results = this.Invoke("MeterBaseExchangeNotification", new object[] {
                        MBChangeout});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void MeterBaseExchangeNotificationAsync(meterBaseExchange[] MBChangeout) {
            this.MeterBaseExchangeNotificationAsync(MBChangeout, null);
        }
        
        /// CodeRemarks
        public void MeterBaseExchangeNotificationAsync(meterBaseExchange[] MBChangeout, object userState) {
            if ((this.MeterBaseExchangeNotificationOperationCompleted == null)) {
                this.MeterBaseExchangeNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMeterBaseExchangeNotificationOperationCompleted);
            }
            this.InvokeAsync("MeterBaseExchangeNotification", new object[] {
                        MBChangeout}, this.MeterBaseExchangeNotificationOperationCompleted, userState);
        }
        
        private void OnMeterBaseExchangeNotificationOperationCompleted(object arg) {
            if ((this.MeterBaseExchangeNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MeterBaseExchangeNotificationCompleted(this, new MeterBaseExchangeNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/MeterBaseInstalledNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] MeterBaseInstalledNotification(meterBase[] addedMBs) {
            object[] results = this.Invoke("MeterBaseInstalledNotification", new object[] {
                        addedMBs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void MeterBaseInstalledNotificationAsync(meterBase[] addedMBs) {
            this.MeterBaseInstalledNotificationAsync(addedMBs, null);
        }
        
        /// CodeRemarks
        public void MeterBaseInstalledNotificationAsync(meterBase[] addedMBs, object userState) {
            if ((this.MeterBaseInstalledNotificationOperationCompleted == null)) {
                this.MeterBaseInstalledNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMeterBaseInstalledNotificationOperationCompleted);
            }
            this.InvokeAsync("MeterBaseInstalledNotification", new object[] {
                        addedMBs}, this.MeterBaseInstalledNotificationOperationCompleted, userState);
        }
        
        private void OnMeterBaseInstalledNotificationOperationCompleted(object arg) {
            if ((this.MeterBaseInstalledNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MeterBaseInstalledNotificationCompleted(this, new MeterBaseInstalledNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/MeterBaseChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] MeterBaseChangedNotification(meterBase[] changedMBs) {
            object[] results = this.Invoke("MeterBaseChangedNotification", new object[] {
                        changedMBs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void MeterBaseChangedNotificationAsync(meterBase[] changedMBs) {
            this.MeterBaseChangedNotificationAsync(changedMBs, null);
        }
        
        /// CodeRemarks
        public void MeterBaseChangedNotificationAsync(meterBase[] changedMBs, object userState) {
            if ((this.MeterBaseChangedNotificationOperationCompleted == null)) {
                this.MeterBaseChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMeterBaseChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("MeterBaseChangedNotification", new object[] {
                        changedMBs}, this.MeterBaseChangedNotificationOperationCompleted, userState);
        }
        
        private void OnMeterBaseChangedNotificationOperationCompleted(object arg) {
            if ((this.MeterBaseChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MeterBaseChangedNotificationCompleted(this, new MeterBaseChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/MeterBaseRemoveNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] MeterBaseRemoveNotification(meterBase[] removedMBs) {
            object[] results = this.Invoke("MeterBaseRemoveNotification", new object[] {
                        removedMBs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void MeterBaseRemoveNotificationAsync(meterBase[] removedMBs) {
            this.MeterBaseRemoveNotificationAsync(removedMBs, null);
        }
        
        /// CodeRemarks
        public void MeterBaseRemoveNotificationAsync(meterBase[] removedMBs, object userState) {
            if ((this.MeterBaseRemoveNotificationOperationCompleted == null)) {
                this.MeterBaseRemoveNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMeterBaseRemoveNotificationOperationCompleted);
            }
            this.InvokeAsync("MeterBaseRemoveNotification", new object[] {
                        removedMBs}, this.MeterBaseRemoveNotificationOperationCompleted, userState);
        }
        
        private void OnMeterBaseRemoveNotificationOperationCompleted(object arg) {
            if ((this.MeterBaseRemoveNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MeterBaseRemoveNotificationCompleted(this, new MeterBaseRemoveNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/MeterBaseRetireNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] MeterBaseRetireNotification(meterBase[] retiredMBs) {
            object[] results = this.Invoke("MeterBaseRetireNotification", new object[] {
                        retiredMBs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void MeterBaseRetireNotificationAsync(meterBase[] retiredMBs) {
            this.MeterBaseRetireNotificationAsync(retiredMBs, null);
        }
        
        /// CodeRemarks
        public void MeterBaseRetireNotificationAsync(meterBase[] retiredMBs, object userState) {
            if ((this.MeterBaseRetireNotificationOperationCompleted == null)) {
                this.MeterBaseRetireNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMeterBaseRetireNotificationOperationCompleted);
            }
            this.InvokeAsync("MeterBaseRetireNotification", new object[] {
                        retiredMBs}, this.MeterBaseRetireNotificationOperationCompleted, userState);
        }
        
        private void OnMeterBaseRetireNotificationOperationCompleted(object arg) {
            if ((this.MeterBaseRetireNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MeterBaseRetireNotificationCompleted(this, new MeterBaseRetireNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/MeterBaseAddNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] MeterBaseAddNotification(meterBase[] addedMBs) {
            object[] results = this.Invoke("MeterBaseAddNotification", new object[] {
                        addedMBs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void MeterBaseAddNotificationAsync(meterBase[] addedMBs) {
            this.MeterBaseAddNotificationAsync(addedMBs, null);
        }
        
        /// CodeRemarks
        public void MeterBaseAddNotificationAsync(meterBase[] addedMBs, object userState) {
            if ((this.MeterBaseAddNotificationOperationCompleted == null)) {
                this.MeterBaseAddNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMeterBaseAddNotificationOperationCompleted);
            }
            this.InvokeAsync("MeterBaseAddNotification", new object[] {
                        addedMBs}, this.MeterBaseAddNotificationOperationCompleted, userState);
        }
        
        private void OnMeterBaseAddNotificationOperationCompleted(object arg) {
            if ((this.MeterBaseAddNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MeterBaseAddNotificationCompleted(this, new MeterBaseAddNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/ConnectDisconnectChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] ConnectDisconnectChangedNotification(connectDisconnectEvent[] changedCDEvents) {
            object[] results = this.Invoke("ConnectDisconnectChangedNotification", new object[] {
                        changedCDEvents});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void ConnectDisconnectChangedNotificationAsync(connectDisconnectEvent[] changedCDEvents) {
            this.ConnectDisconnectChangedNotificationAsync(changedCDEvents, null);
        }
        
        /// CodeRemarks
        public void ConnectDisconnectChangedNotificationAsync(connectDisconnectEvent[] changedCDEvents, object userState) {
            if ((this.ConnectDisconnectChangedNotificationOperationCompleted == null)) {
                this.ConnectDisconnectChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConnectDisconnectChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("ConnectDisconnectChangedNotification", new object[] {
                        changedCDEvents}, this.ConnectDisconnectChangedNotificationOperationCompleted, userState);
        }
        
        private void OnConnectDisconnectChangedNotificationOperationCompleted(object arg) {
            if ((this.ConnectDisconnectChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConnectDisconnectChangedNotificationCompleted(this, new ConnectDisconnectChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/PricingTiersChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] PricingTiersChangedNotification(HANInterfaceID hanInterfaceID, string transactionID) {
            object[] results = this.Invoke("PricingTiersChangedNotification", new object[] {
                        hanInterfaceID,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void PricingTiersChangedNotificationAsync(HANInterfaceID hanInterfaceID, string transactionID) {
            this.PricingTiersChangedNotificationAsync(hanInterfaceID, transactionID, null);
        }
        
        /// CodeRemarks
        public void PricingTiersChangedNotificationAsync(HANInterfaceID hanInterfaceID, string transactionID, object userState) {
            if ((this.PricingTiersChangedNotificationOperationCompleted == null)) {
                this.PricingTiersChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPricingTiersChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("PricingTiersChangedNotification", new object[] {
                        hanInterfaceID,
                        transactionID}, this.PricingTiersChangedNotificationOperationCompleted, userState);
        }
        
        private void OnPricingTiersChangedNotificationOperationCompleted(object arg) {
            if ((this.PricingTiersChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PricingTiersChangedNotificationCompleted(this, new PricingTiersChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/TemperatureTiersChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] TemperatureTiersChangedNotification(HANDeviceID thermostatID, string transactionID, HANInterfaceID interfaceID) {
            object[] results = this.Invoke("TemperatureTiersChangedNotification", new object[] {
                        thermostatID,
                        transactionID,
                        interfaceID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void TemperatureTiersChangedNotificationAsync(HANDeviceID thermostatID, string transactionID, HANInterfaceID interfaceID) {
            this.TemperatureTiersChangedNotificationAsync(thermostatID, transactionID, interfaceID, null);
        }
        
        /// CodeRemarks
        public void TemperatureTiersChangedNotificationAsync(HANDeviceID thermostatID, string transactionID, HANInterfaceID interfaceID, object userState) {
            if ((this.TemperatureTiersChangedNotificationOperationCompleted == null)) {
                this.TemperatureTiersChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTemperatureTiersChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("TemperatureTiersChangedNotification", new object[] {
                        thermostatID,
                        transactionID,
                        interfaceID}, this.TemperatureTiersChangedNotificationOperationCompleted, userState);
        }
        
        private void OnTemperatureTiersChangedNotificationOperationCompleted(object arg) {
            if ((this.TemperatureTiersChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TemperatureTiersChangedNotificationCompleted(this, new TemperatureTiersChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/LoadCycleTiersChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] LoadCycleTiersChangedNotification(HANDeviceID loadControlDeviceID, string transactionID, HANInterfaceID interfaceID) {
            object[] results = this.Invoke("LoadCycleTiersChangedNotification", new object[] {
                        loadControlDeviceID,
                        transactionID,
                        interfaceID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void LoadCycleTiersChangedNotificationAsync(HANDeviceID loadControlDeviceID, string transactionID, HANInterfaceID interfaceID) {
            this.LoadCycleTiersChangedNotificationAsync(loadControlDeviceID, transactionID, interfaceID, null);
        }
        
        /// CodeRemarks
        public void LoadCycleTiersChangedNotificationAsync(HANDeviceID loadControlDeviceID, string transactionID, HANInterfaceID interfaceID, object userState) {
            if ((this.LoadCycleTiersChangedNotificationOperationCompleted == null)) {
                this.LoadCycleTiersChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadCycleTiersChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("LoadCycleTiersChangedNotification", new object[] {
                        loadControlDeviceID,
                        transactionID,
                        interfaceID}, this.LoadCycleTiersChangedNotificationOperationCompleted, userState);
        }
        
        private void OnLoadCycleTiersChangedNotificationOperationCompleted(object arg) {
            if ((this.LoadCycleTiersChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadCycleTiersChangedNotificationCompleted(this, new LoadCycleTiersChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/ServiceOrderChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] ServiceOrderChangedNotification(serviceOrder[] changedSOs) {
            object[] results = this.Invoke("ServiceOrderChangedNotification", new object[] {
                        changedSOs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void ServiceOrderChangedNotificationAsync(serviceOrder[] changedSOs) {
            this.ServiceOrderChangedNotificationAsync(changedSOs, null);
        }
        
        /// CodeRemarks
        public void ServiceOrderChangedNotificationAsync(serviceOrder[] changedSOs, object userState) {
            if ((this.ServiceOrderChangedNotificationOperationCompleted == null)) {
                this.ServiceOrderChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceOrderChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("ServiceOrderChangedNotification", new object[] {
                        changedSOs}, this.ServiceOrderChangedNotificationOperationCompleted, userState);
        }
        
        private void OnServiceOrderChangedNotificationOperationCompleted(object arg) {
            if ((this.ServiceOrderChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ServiceOrderChangedNotificationCompleted(this, new ServiceOrderChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/ServiceOrderOpenedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] ServiceOrderOpenedNotification(serviceOrder[] changedSOs) {
            object[] results = this.Invoke("ServiceOrderOpenedNotification", new object[] {
                        changedSOs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void ServiceOrderOpenedNotificationAsync(serviceOrder[] changedSOs) {
            this.ServiceOrderOpenedNotificationAsync(changedSOs, null);
        }
        
        /// CodeRemarks
        public void ServiceOrderOpenedNotificationAsync(serviceOrder[] changedSOs, object userState) {
            if ((this.ServiceOrderOpenedNotificationOperationCompleted == null)) {
                this.ServiceOrderOpenedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceOrderOpenedNotificationOperationCompleted);
            }
            this.InvokeAsync("ServiceOrderOpenedNotification", new object[] {
                        changedSOs}, this.ServiceOrderOpenedNotificationOperationCompleted, userState);
        }
        
        private void OnServiceOrderOpenedNotificationOperationCompleted(object arg) {
            if ((this.ServiceOrderOpenedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ServiceOrderOpenedNotificationCompleted(this, new ServiceOrderOpenedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/ServiceOrderClosedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] ServiceOrderClosedNotification(serviceOrder[] changedSOs) {
            object[] results = this.Invoke("ServiceOrderClosedNotification", new object[] {
                        changedSOs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void ServiceOrderClosedNotificationAsync(serviceOrder[] changedSOs) {
            this.ServiceOrderClosedNotificationAsync(changedSOs, null);
        }
        
        /// CodeRemarks
        public void ServiceOrderClosedNotificationAsync(serviceOrder[] changedSOs, object userState) {
            if ((this.ServiceOrderClosedNotificationOperationCompleted == null)) {
                this.ServiceOrderClosedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceOrderClosedNotificationOperationCompleted);
            }
            this.InvokeAsync("ServiceOrderClosedNotification", new object[] {
                        changedSOs}, this.ServiceOrderClosedNotificationOperationCompleted, userState);
        }
        
        private void OnServiceOrderClosedNotificationOperationCompleted(object arg) {
            if ((this.ServiceOrderClosedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ServiceOrderClosedNotificationCompleted(this, new ServiceOrderClosedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/UsageMonitoringNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] UsageMonitoringNotification(meterID[] meters, meterReading[] readings, string transactionID) {
            object[] results = this.Invoke("UsageMonitoringNotification", new object[] {
                        meters,
                        readings,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void UsageMonitoringNotificationAsync(meterID[] meters, meterReading[] readings, string transactionID) {
            this.UsageMonitoringNotificationAsync(meters, readings, transactionID, null);
        }
        
        /// CodeRemarks
        public void UsageMonitoringNotificationAsync(meterID[] meters, meterReading[] readings, string transactionID, object userState) {
            if ((this.UsageMonitoringNotificationOperationCompleted == null)) {
                this.UsageMonitoringNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUsageMonitoringNotificationOperationCompleted);
            }
            this.InvokeAsync("UsageMonitoringNotification", new object[] {
                        meters,
                        readings,
                        transactionID}, this.UsageMonitoringNotificationOperationCompleted, userState);
        }
        
        private void OnUsageMonitoringNotificationOperationCompleted(object arg) {
            if ((this.UsageMonitoringNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UsageMonitoringNotificationCompleted(this, new UsageMonitoringNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/LMDeviceAddNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] LMDeviceAddNotification(loadManagementDevice[] addedLMDs, string transactionID) {
            object[] results = this.Invoke("LMDeviceAddNotification", new object[] {
                        addedLMDs,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void LMDeviceAddNotificationAsync(loadManagementDevice[] addedLMDs, string transactionID) {
            this.LMDeviceAddNotificationAsync(addedLMDs, transactionID, null);
        }
        
        /// CodeRemarks
        public void LMDeviceAddNotificationAsync(loadManagementDevice[] addedLMDs, string transactionID, object userState) {
            if ((this.LMDeviceAddNotificationOperationCompleted == null)) {
                this.LMDeviceAddNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLMDeviceAddNotificationOperationCompleted);
            }
            this.InvokeAsync("LMDeviceAddNotification", new object[] {
                        addedLMDs,
                        transactionID}, this.LMDeviceAddNotificationOperationCompleted, userState);
        }
        
        private void OnLMDeviceAddNotificationOperationCompleted(object arg) {
            if ((this.LMDeviceAddNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LMDeviceAddNotificationCompleted(this, new LMDeviceAddNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/LMDeviceChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] LMDeviceChangedNotification(loadManagementDevice[] changedLMDs, string transactionID) {
            object[] results = this.Invoke("LMDeviceChangedNotification", new object[] {
                        changedLMDs,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void LMDeviceChangedNotificationAsync(loadManagementDevice[] changedLMDs, string transactionID) {
            this.LMDeviceChangedNotificationAsync(changedLMDs, transactionID, null);
        }
        
        /// CodeRemarks
        public void LMDeviceChangedNotificationAsync(loadManagementDevice[] changedLMDs, string transactionID, object userState) {
            if ((this.LMDeviceChangedNotificationOperationCompleted == null)) {
                this.LMDeviceChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLMDeviceChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("LMDeviceChangedNotification", new object[] {
                        changedLMDs,
                        transactionID}, this.LMDeviceChangedNotificationOperationCompleted, userState);
        }
        
        private void OnLMDeviceChangedNotificationOperationCompleted(object arg) {
            if ((this.LMDeviceChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LMDeviceChangedNotificationCompleted(this, new LMDeviceChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/LMDeviceExchangeNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] LMDeviceExchangeNotification(LMDeviceExchange[] LMDChangeout) {
            object[] results = this.Invoke("LMDeviceExchangeNotification", new object[] {
                        LMDChangeout});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void LMDeviceExchangeNotificationAsync(LMDeviceExchange[] LMDChangeout) {
            this.LMDeviceExchangeNotificationAsync(LMDChangeout, null);
        }
        
        /// CodeRemarks
        public void LMDeviceExchangeNotificationAsync(LMDeviceExchange[] LMDChangeout, object userState) {
            if ((this.LMDeviceExchangeNotificationOperationCompleted == null)) {
                this.LMDeviceExchangeNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLMDeviceExchangeNotificationOperationCompleted);
            }
            this.InvokeAsync("LMDeviceExchangeNotification", new object[] {
                        LMDChangeout}, this.LMDeviceExchangeNotificationOperationCompleted, userState);
        }
        
        private void OnLMDeviceExchangeNotificationOperationCompleted(object arg) {
            if ((this.LMDeviceExchangeNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LMDeviceExchangeNotificationCompleted(this, new LMDeviceExchangeNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/LMDeviceRemoveNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] LMDeviceRemoveNotification(loadManagementDevice[] removedLMDs, string transactionID) {
            object[] results = this.Invoke("LMDeviceRemoveNotification", new object[] {
                        removedLMDs,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void LMDeviceRemoveNotificationAsync(loadManagementDevice[] removedLMDs, string transactionID) {
            this.LMDeviceRemoveNotificationAsync(removedLMDs, transactionID, null);
        }
        
        /// CodeRemarks
        public void LMDeviceRemoveNotificationAsync(loadManagementDevice[] removedLMDs, string transactionID, object userState) {
            if ((this.LMDeviceRemoveNotificationOperationCompleted == null)) {
                this.LMDeviceRemoveNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLMDeviceRemoveNotificationOperationCompleted);
            }
            this.InvokeAsync("LMDeviceRemoveNotification", new object[] {
                        removedLMDs,
                        transactionID}, this.LMDeviceRemoveNotificationOperationCompleted, userState);
        }
        
        private void OnLMDeviceRemoveNotificationOperationCompleted(object arg) {
            if ((this.LMDeviceRemoveNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LMDeviceRemoveNotificationCompleted(this, new LMDeviceRemoveNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/LMDeviceRetireNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] LMDeviceRetireNotification(loadManagementDevice[] retiredLMDs) {
            object[] results = this.Invoke("LMDeviceRetireNotification", new object[] {
                        retiredLMDs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void LMDeviceRetireNotificationAsync(loadManagementDevice[] retiredLMDs) {
            this.LMDeviceRetireNotificationAsync(retiredLMDs, null);
        }
        
        /// CodeRemarks
        public void LMDeviceRetireNotificationAsync(loadManagementDevice[] retiredLMDs, object userState) {
            if ((this.LMDeviceRetireNotificationOperationCompleted == null)) {
                this.LMDeviceRetireNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLMDeviceRetireNotificationOperationCompleted);
            }
            this.InvokeAsync("LMDeviceRetireNotification", new object[] {
                        retiredLMDs}, this.LMDeviceRetireNotificationOperationCompleted, userState);
        }
        
        private void OnLMDeviceRetireNotificationOperationCompleted(object arg) {
            if ((this.LMDeviceRetireNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LMDeviceRetireNotificationCompleted(this, new LMDeviceRetireNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/SCADAAnalogChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] SCADAAnalogChangedNotification(scadaAnalog[] scadaAnalogs) {
            object[] results = this.Invoke("SCADAAnalogChangedNotification", new object[] {
                        scadaAnalogs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void SCADAAnalogChangedNotificationAsync(scadaAnalog[] scadaAnalogs) {
            this.SCADAAnalogChangedNotificationAsync(scadaAnalogs, null);
        }
        
        /// CodeRemarks
        public void SCADAAnalogChangedNotificationAsync(scadaAnalog[] scadaAnalogs, object userState) {
            if ((this.SCADAAnalogChangedNotificationOperationCompleted == null)) {
                this.SCADAAnalogChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSCADAAnalogChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("SCADAAnalogChangedNotification", new object[] {
                        scadaAnalogs}, this.SCADAAnalogChangedNotificationOperationCompleted, userState);
        }
        
        private void OnSCADAAnalogChangedNotificationOperationCompleted(object arg) {
            if ((this.SCADAAnalogChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SCADAAnalogChangedNotificationCompleted(this, new SCADAAnalogChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/SCADAAnalogChangedNotificationByPointID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] SCADAAnalogChangedNotificationByPointID(scadaAnalog scadaAnalog) {
            object[] results = this.Invoke("SCADAAnalogChangedNotificationByPointID", new object[] {
                        scadaAnalog});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void SCADAAnalogChangedNotificationByPointIDAsync(scadaAnalog scadaAnalog) {
            this.SCADAAnalogChangedNotificationByPointIDAsync(scadaAnalog, null);
        }
        
        /// CodeRemarks
        public void SCADAAnalogChangedNotificationByPointIDAsync(scadaAnalog scadaAnalog, object userState) {
            if ((this.SCADAAnalogChangedNotificationByPointIDOperationCompleted == null)) {
                this.SCADAAnalogChangedNotificationByPointIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSCADAAnalogChangedNotificationByPointIDOperationCompleted);
            }
            this.InvokeAsync("SCADAAnalogChangedNotificationByPointID", new object[] {
                        scadaAnalog}, this.SCADAAnalogChangedNotificationByPointIDOperationCompleted, userState);
        }
        
        private void OnSCADAAnalogChangedNotificationByPointIDOperationCompleted(object arg) {
            if ((this.SCADAAnalogChangedNotificationByPointIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SCADAAnalogChangedNotificationByPointIDCompleted(this, new SCADAAnalogChangedNotificationByPointIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/SCADAAnalogChangedNotificationForPower", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] SCADAAnalogChangedNotificationForPower(scadaAnalog[] scadaAnalogs) {
            object[] results = this.Invoke("SCADAAnalogChangedNotificationForPower", new object[] {
                        scadaAnalogs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void SCADAAnalogChangedNotificationForPowerAsync(scadaAnalog[] scadaAnalogs) {
            this.SCADAAnalogChangedNotificationForPowerAsync(scadaAnalogs, null);
        }
        
        /// CodeRemarks
        public void SCADAAnalogChangedNotificationForPowerAsync(scadaAnalog[] scadaAnalogs, object userState) {
            if ((this.SCADAAnalogChangedNotificationForPowerOperationCompleted == null)) {
                this.SCADAAnalogChangedNotificationForPowerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSCADAAnalogChangedNotificationForPowerOperationCompleted);
            }
            this.InvokeAsync("SCADAAnalogChangedNotificationForPower", new object[] {
                        scadaAnalogs}, this.SCADAAnalogChangedNotificationForPowerOperationCompleted, userState);
        }
        
        private void OnSCADAAnalogChangedNotificationForPowerOperationCompleted(object arg) {
            if ((this.SCADAAnalogChangedNotificationForPowerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SCADAAnalogChangedNotificationForPowerCompleted(this, new SCADAAnalogChangedNotificationForPowerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/SCADAAnalogChangedNotificationForVoltage", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] SCADAAnalogChangedNotificationForVoltage(scadaAnalog[] scadaAnalogs) {
            object[] results = this.Invoke("SCADAAnalogChangedNotificationForVoltage", new object[] {
                        scadaAnalogs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void SCADAAnalogChangedNotificationForVoltageAsync(scadaAnalog[] scadaAnalogs) {
            this.SCADAAnalogChangedNotificationForVoltageAsync(scadaAnalogs, null);
        }
        
        /// CodeRemarks
        public void SCADAAnalogChangedNotificationForVoltageAsync(scadaAnalog[] scadaAnalogs, object userState) {
            if ((this.SCADAAnalogChangedNotificationForVoltageOperationCompleted == null)) {
                this.SCADAAnalogChangedNotificationForVoltageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSCADAAnalogChangedNotificationForVoltageOperationCompleted);
            }
            this.InvokeAsync("SCADAAnalogChangedNotificationForVoltage", new object[] {
                        scadaAnalogs}, this.SCADAAnalogChangedNotificationForVoltageOperationCompleted, userState);
        }
        
        private void OnSCADAAnalogChangedNotificationForVoltageOperationCompleted(object arg) {
            if ((this.SCADAAnalogChangedNotificationForVoltageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SCADAAnalogChangedNotificationForVoltageCompleted(this, new SCADAAnalogChangedNotificationForVoltageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/SCADAPointChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] SCADAPointChangedNotification(scadaPoint[] scadaPoints) {
            object[] results = this.Invoke("SCADAPointChangedNotification", new object[] {
                        scadaPoints});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void SCADAPointChangedNotificationAsync(scadaPoint[] scadaPoints) {
            this.SCADAPointChangedNotificationAsync(scadaPoints, null);
        }
        
        /// CodeRemarks
        public void SCADAPointChangedNotificationAsync(scadaPoint[] scadaPoints, object userState) {
            if ((this.SCADAPointChangedNotificationOperationCompleted == null)) {
                this.SCADAPointChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSCADAPointChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("SCADAPointChangedNotification", new object[] {
                        scadaPoints}, this.SCADAPointChangedNotificationOperationCompleted, userState);
        }
        
        private void OnSCADAPointChangedNotificationOperationCompleted(object arg) {
            if ((this.SCADAPointChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SCADAPointChangedNotificationCompleted(this, new SCADAPointChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/SCADAPointChangedNotificationForAnalog", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] SCADAPointChangedNotificationForAnalog(scadaPoint[] scadaPoints) {
            object[] results = this.Invoke("SCADAPointChangedNotificationForAnalog", new object[] {
                        scadaPoints});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void SCADAPointChangedNotificationForAnalogAsync(scadaPoint[] scadaPoints) {
            this.SCADAPointChangedNotificationForAnalogAsync(scadaPoints, null);
        }
        
        /// CodeRemarks
        public void SCADAPointChangedNotificationForAnalogAsync(scadaPoint[] scadaPoints, object userState) {
            if ((this.SCADAPointChangedNotificationForAnalogOperationCompleted == null)) {
                this.SCADAPointChangedNotificationForAnalogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSCADAPointChangedNotificationForAnalogOperationCompleted);
            }
            this.InvokeAsync("SCADAPointChangedNotificationForAnalog", new object[] {
                        scadaPoints}, this.SCADAPointChangedNotificationForAnalogOperationCompleted, userState);
        }
        
        private void OnSCADAPointChangedNotificationForAnalogOperationCompleted(object arg) {
            if ((this.SCADAPointChangedNotificationForAnalogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SCADAPointChangedNotificationForAnalogCompleted(this, new SCADAPointChangedNotificationForAnalogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/SCADAPointChangedNotificationForStatus", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] SCADAPointChangedNotificationForStatus(scadaPoint[] scadaPoints) {
            object[] results = this.Invoke("SCADAPointChangedNotificationForStatus", new object[] {
                        scadaPoints});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void SCADAPointChangedNotificationForStatusAsync(scadaPoint[] scadaPoints) {
            this.SCADAPointChangedNotificationForStatusAsync(scadaPoints, null);
        }
        
        /// CodeRemarks
        public void SCADAPointChangedNotificationForStatusAsync(scadaPoint[] scadaPoints, object userState) {
            if ((this.SCADAPointChangedNotificationForStatusOperationCompleted == null)) {
                this.SCADAPointChangedNotificationForStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSCADAPointChangedNotificationForStatusOperationCompleted);
            }
            this.InvokeAsync("SCADAPointChangedNotificationForStatus", new object[] {
                        scadaPoints}, this.SCADAPointChangedNotificationForStatusOperationCompleted, userState);
        }
        
        private void OnSCADAPointChangedNotificationForStatusOperationCompleted(object arg) {
            if ((this.SCADAPointChangedNotificationForStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SCADAPointChangedNotificationForStatusCompleted(this, new SCADAPointChangedNotificationForStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/SCADAStatusChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] SCADAStatusChangedNotification(scadaStatus[] scadaStatuses) {
            object[] results = this.Invoke("SCADAStatusChangedNotification", new object[] {
                        scadaStatuses});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void SCADAStatusChangedNotificationAsync(scadaStatus[] scadaStatuses) {
            this.SCADAStatusChangedNotificationAsync(scadaStatuses, null);
        }
        
        /// CodeRemarks
        public void SCADAStatusChangedNotificationAsync(scadaStatus[] scadaStatuses, object userState) {
            if ((this.SCADAStatusChangedNotificationOperationCompleted == null)) {
                this.SCADAStatusChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSCADAStatusChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("SCADAStatusChangedNotification", new object[] {
                        scadaStatuses}, this.SCADAStatusChangedNotificationOperationCompleted, userState);
        }
        
        private void OnSCADAStatusChangedNotificationOperationCompleted(object arg) {
            if ((this.SCADAStatusChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SCADAStatusChangedNotificationCompleted(this, new SCADAStatusChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/SCADAStatusChangedNotificationByPointID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] SCADAStatusChangedNotificationByPointID(scadaStatus scadaStatus) {
            object[] results = this.Invoke("SCADAStatusChangedNotificationByPointID", new object[] {
                        scadaStatus});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void SCADAStatusChangedNotificationByPointIDAsync(scadaStatus scadaStatus) {
            this.SCADAStatusChangedNotificationByPointIDAsync(scadaStatus, null);
        }
        
        /// CodeRemarks
        public void SCADAStatusChangedNotificationByPointIDAsync(scadaStatus scadaStatus, object userState) {
            if ((this.SCADAStatusChangedNotificationByPointIDOperationCompleted == null)) {
                this.SCADAStatusChangedNotificationByPointIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSCADAStatusChangedNotificationByPointIDOperationCompleted);
            }
            this.InvokeAsync("SCADAStatusChangedNotificationByPointID", new object[] {
                        scadaStatus}, this.SCADAStatusChangedNotificationByPointIDOperationCompleted, userState);
        }
        
        private void OnSCADAStatusChangedNotificationByPointIDOperationCompleted(object arg) {
            if ((this.SCADAStatusChangedNotificationByPointIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SCADAStatusChangedNotificationByPointIDCompleted(this, new SCADAStatusChangedNotificationByPointIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/StatusChangedNotificationByPointID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] StatusChangedNotificationByPointID(scadaStatus[] scadaStatuses, string transactionID) {
            object[] results = this.Invoke("StatusChangedNotificationByPointID", new object[] {
                        scadaStatuses,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void StatusChangedNotificationByPointIDAsync(scadaStatus[] scadaStatuses, string transactionID) {
            this.StatusChangedNotificationByPointIDAsync(scadaStatuses, transactionID, null);
        }
        
        /// CodeRemarks
        public void StatusChangedNotificationByPointIDAsync(scadaStatus[] scadaStatuses, string transactionID, object userState) {
            if ((this.StatusChangedNotificationByPointIDOperationCompleted == null)) {
                this.StatusChangedNotificationByPointIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStatusChangedNotificationByPointIDOperationCompleted);
            }
            this.InvokeAsync("StatusChangedNotificationByPointID", new object[] {
                        scadaStatuses,
                        transactionID}, this.StatusChangedNotificationByPointIDOperationCompleted, userState);
        }
        
        private void OnStatusChangedNotificationByPointIDOperationCompleted(object arg) {
            if ((this.StatusChangedNotificationByPointIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StatusChangedNotificationByPointIDCompleted(this, new StatusChangedNotificationByPointIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/AnalogChangedNotificationByPointID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] AnalogChangedNotificationByPointID(scadaAnalog[] scadaAnalogs, string transactionID) {
            object[] results = this.Invoke("AnalogChangedNotificationByPointID", new object[] {
                        scadaAnalogs,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void AnalogChangedNotificationByPointIDAsync(scadaAnalog[] scadaAnalogs, string transactionID) {
            this.AnalogChangedNotificationByPointIDAsync(scadaAnalogs, transactionID, null);
        }
        
        /// CodeRemarks
        public void AnalogChangedNotificationByPointIDAsync(scadaAnalog[] scadaAnalogs, string transactionID, object userState) {
            if ((this.AnalogChangedNotificationByPointIDOperationCompleted == null)) {
                this.AnalogChangedNotificationByPointIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAnalogChangedNotificationByPointIDOperationCompleted);
            }
            this.InvokeAsync("AnalogChangedNotificationByPointID", new object[] {
                        scadaAnalogs,
                        transactionID}, this.AnalogChangedNotificationByPointIDOperationCompleted, userState);
        }
        
        private void OnAnalogChangedNotificationByPointIDOperationCompleted(object arg) {
            if ((this.AnalogChangedNotificationByPointIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AnalogChangedNotificationByPointIDCompleted(this, new AnalogChangedNotificationByPointIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetSubstationNames", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetSubstationNames() {
            object[] results = this.Invoke("GetSubstationNames", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetSubstationNamesAsync() {
            this.GetSubstationNamesAsync(null);
        }
        
        /// CodeRemarks
        public void GetSubstationNamesAsync(object userState) {
            if ((this.GetSubstationNamesOperationCompleted == null)) {
                this.GetSubstationNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubstationNamesOperationCompleted);
            }
            this.InvokeAsync("GetSubstationNames", new object[0], this.GetSubstationNamesOperationCompleted, userState);
        }
        
        private void OnGetSubstationNamesOperationCompleted(object arg) {
            if ((this.GetSubstationNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubstationNamesCompleted(this, new GetSubstationNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetDownlineCircuitElements", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public circuitElement[] GetDownlineCircuitElements(string eaLoc, string lastReceived) {
            object[] results = this.Invoke("GetDownlineCircuitElements", new object[] {
                        eaLoc,
                        lastReceived});
            return ((circuitElement[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetDownlineCircuitElementsAsync(string eaLoc, string lastReceived) {
            this.GetDownlineCircuitElementsAsync(eaLoc, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetDownlineCircuitElementsAsync(string eaLoc, string lastReceived, object userState) {
            if ((this.GetDownlineCircuitElementsOperationCompleted == null)) {
                this.GetDownlineCircuitElementsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDownlineCircuitElementsOperationCompleted);
            }
            this.InvokeAsync("GetDownlineCircuitElements", new object[] {
                        eaLoc,
                        lastReceived}, this.GetDownlineCircuitElementsOperationCompleted, userState);
        }
        
        private void OnGetDownlineCircuitElementsOperationCompleted(object arg) {
            if ((this.GetDownlineCircuitElementsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDownlineCircuitElementsCompleted(this, new GetDownlineCircuitElementsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetUplineCircuitElements", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public circuitElement[] GetUplineCircuitElements(string eaLoc, string lastReceived) {
            object[] results = this.Invoke("GetUplineCircuitElements", new object[] {
                        eaLoc,
                        lastReceived});
            return ((circuitElement[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetUplineCircuitElementsAsync(string eaLoc, string lastReceived) {
            this.GetUplineCircuitElementsAsync(eaLoc, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetUplineCircuitElementsAsync(string eaLoc, string lastReceived, object userState) {
            if ((this.GetUplineCircuitElementsOperationCompleted == null)) {
                this.GetUplineCircuitElementsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUplineCircuitElementsOperationCompleted);
            }
            this.InvokeAsync("GetUplineCircuitElements", new object[] {
                        eaLoc,
                        lastReceived}, this.GetUplineCircuitElementsOperationCompleted, userState);
        }
        
        private void OnGetUplineCircuitElementsOperationCompleted(object arg) {
            if ((this.GetUplineCircuitElementsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUplineCircuitElementsCompleted(this, new GetUplineCircuitElementsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetChildCircuitElements", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public circuitElement[] GetChildCircuitElements(string eaLoc, string lastReceived) {
            object[] results = this.Invoke("GetChildCircuitElements", new object[] {
                        eaLoc,
                        lastReceived});
            return ((circuitElement[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetChildCircuitElementsAsync(string eaLoc, string lastReceived) {
            this.GetChildCircuitElementsAsync(eaLoc, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetChildCircuitElementsAsync(string eaLoc, string lastReceived, object userState) {
            if ((this.GetChildCircuitElementsOperationCompleted == null)) {
                this.GetChildCircuitElementsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChildCircuitElementsOperationCompleted);
            }
            this.InvokeAsync("GetChildCircuitElements", new object[] {
                        eaLoc,
                        lastReceived}, this.GetChildCircuitElementsOperationCompleted, userState);
        }
        
        private void OnGetChildCircuitElementsOperationCompleted(object arg) {
            if ((this.GetChildCircuitElementsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChildCircuitElementsCompleted(this, new GetChildCircuitElementsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetParentCircuitElements", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public circuitElement[] GetParentCircuitElements(string eaLoc, string lastReceived) {
            object[] results = this.Invoke("GetParentCircuitElements", new object[] {
                        eaLoc,
                        lastReceived});
            return ((circuitElement[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetParentCircuitElementsAsync(string eaLoc, string lastReceived) {
            this.GetParentCircuitElementsAsync(eaLoc, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetParentCircuitElementsAsync(string eaLoc, string lastReceived, object userState) {
            if ((this.GetParentCircuitElementsOperationCompleted == null)) {
                this.GetParentCircuitElementsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetParentCircuitElementsOperationCompleted);
            }
            this.InvokeAsync("GetParentCircuitElements", new object[] {
                        eaLoc,
                        lastReceived}, this.GetParentCircuitElementsOperationCompleted, userState);
        }
        
        private void OnGetParentCircuitElementsOperationCompleted(object arg) {
            if ((this.GetParentCircuitElementsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetParentCircuitElementsCompleted(this, new GetParentCircuitElementsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAllCircuitElements", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public circuitElement[] GetAllCircuitElements(string lastReceived) {
            object[] results = this.Invoke("GetAllCircuitElements", new object[] {
                        lastReceived});
            return ((circuitElement[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllCircuitElementsAsync(string lastReceived) {
            this.GetAllCircuitElementsAsync(lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetAllCircuitElementsAsync(string lastReceived, object userState) {
            if ((this.GetAllCircuitElementsOperationCompleted == null)) {
                this.GetAllCircuitElementsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllCircuitElementsOperationCompleted);
            }
            this.InvokeAsync("GetAllCircuitElements", new object[] {
                        lastReceived}, this.GetAllCircuitElementsOperationCompleted, userState);
        }
        
        private void OnGetAllCircuitElementsOperationCompleted(object arg) {
            if ((this.GetAllCircuitElementsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllCircuitElementsCompleted(this, new GetAllCircuitElementsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetModifiedCircuitElements", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public circuitElement[] GetModifiedCircuitElements(string previousSessionID, string lastReceived) {
            object[] results = this.Invoke("GetModifiedCircuitElements", new object[] {
                        previousSessionID,
                        lastReceived});
            return ((circuitElement[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetModifiedCircuitElementsAsync(string previousSessionID, string lastReceived) {
            this.GetModifiedCircuitElementsAsync(previousSessionID, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetModifiedCircuitElementsAsync(string previousSessionID, string lastReceived, object userState) {
            if ((this.GetModifiedCircuitElementsOperationCompleted == null)) {
                this.GetModifiedCircuitElementsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetModifiedCircuitElementsOperationCompleted);
            }
            this.InvokeAsync("GetModifiedCircuitElements", new object[] {
                        previousSessionID,
                        lastReceived}, this.GetModifiedCircuitElementsOperationCompleted, userState);
        }
        
        private void OnGetModifiedCircuitElementsOperationCompleted(object arg) {
            if ((this.GetModifiedCircuitElementsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetModifiedCircuitElementsCompleted(this, new GetModifiedCircuitElementsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetDownlineMeterConnectivity", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meterConnectivity[] GetDownlineMeterConnectivity(meterID meterID) {
            object[] results = this.Invoke("GetDownlineMeterConnectivity", new object[] {
                        meterID});
            return ((meterConnectivity[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetDownlineMeterConnectivityAsync(meterID meterID) {
            this.GetDownlineMeterConnectivityAsync(meterID, null);
        }
        
        /// CodeRemarks
        public void GetDownlineMeterConnectivityAsync(meterID meterID, object userState) {
            if ((this.GetDownlineMeterConnectivityOperationCompleted == null)) {
                this.GetDownlineMeterConnectivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDownlineMeterConnectivityOperationCompleted);
            }
            this.InvokeAsync("GetDownlineMeterConnectivity", new object[] {
                        meterID}, this.GetDownlineMeterConnectivityOperationCompleted, userState);
        }
        
        private void OnGetDownlineMeterConnectivityOperationCompleted(object arg) {
            if ((this.GetDownlineMeterConnectivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDownlineMeterConnectivityCompleted(this, new GetDownlineMeterConnectivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetUplineMeterConnectivity", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meterConnectivity[] GetUplineMeterConnectivity(meterID meterID) {
            object[] results = this.Invoke("GetUplineMeterConnectivity", new object[] {
                        meterID});
            return ((meterConnectivity[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetUplineMeterConnectivityAsync(meterID meterID) {
            this.GetUplineMeterConnectivityAsync(meterID, null);
        }
        
        /// CodeRemarks
        public void GetUplineMeterConnectivityAsync(meterID meterID, object userState) {
            if ((this.GetUplineMeterConnectivityOperationCompleted == null)) {
                this.GetUplineMeterConnectivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUplineMeterConnectivityOperationCompleted);
            }
            this.InvokeAsync("GetUplineMeterConnectivity", new object[] {
                        meterID}, this.GetUplineMeterConnectivityOperationCompleted, userState);
        }
        
        private void OnGetUplineMeterConnectivityOperationCompleted(object arg) {
            if ((this.GetUplineMeterConnectivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUplineMeterConnectivityCompleted(this, new GetUplineMeterConnectivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetSiblingMeterConnectivity", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meterConnectivity[] GetSiblingMeterConnectivity(meterID meterID) {
            object[] results = this.Invoke("GetSiblingMeterConnectivity", new object[] {
                        meterID});
            return ((meterConnectivity[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetSiblingMeterConnectivityAsync(meterID meterID) {
            this.GetSiblingMeterConnectivityAsync(meterID, null);
        }
        
        /// CodeRemarks
        public void GetSiblingMeterConnectivityAsync(meterID meterID, object userState) {
            if ((this.GetSiblingMeterConnectivityOperationCompleted == null)) {
                this.GetSiblingMeterConnectivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiblingMeterConnectivityOperationCompleted);
            }
            this.InvokeAsync("GetSiblingMeterConnectivity", new object[] {
                        meterID}, this.GetSiblingMeterConnectivityOperationCompleted, userState);
        }
        
        private void OnGetSiblingMeterConnectivityOperationCompleted(object arg) {
            if ((this.GetSiblingMeterConnectivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiblingMeterConnectivityCompleted(this, new GetSiblingMeterConnectivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAllOtherMeters", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public otherMeter[] GetAllOtherMeters(string lastReceived) {
            object[] results = this.Invoke("GetAllOtherMeters", new object[] {
                        lastReceived});
            return ((otherMeter[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllOtherMetersAsync(string lastReceived) {
            this.GetAllOtherMetersAsync(lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetAllOtherMetersAsync(string lastReceived, object userState) {
            if ((this.GetAllOtherMetersOperationCompleted == null)) {
                this.GetAllOtherMetersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllOtherMetersOperationCompleted);
            }
            this.InvokeAsync("GetAllOtherMeters", new object[] {
                        lastReceived}, this.GetAllOtherMetersOperationCompleted, userState);
        }
        
        private void OnGetAllOtherMetersOperationCompleted(object arg) {
            if ((this.GetAllOtherMetersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllOtherMetersCompleted(this, new GetAllOtherMetersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAllServiceLocations", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public serviceLocation[] GetAllServiceLocations(string lastReceived) {
            object[] results = this.Invoke("GetAllServiceLocations", new object[] {
                        lastReceived});
            return ((serviceLocation[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllServiceLocationsAsync(string lastReceived) {
            this.GetAllServiceLocationsAsync(lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetAllServiceLocationsAsync(string lastReceived, object userState) {
            if ((this.GetAllServiceLocationsOperationCompleted == null)) {
                this.GetAllServiceLocationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllServiceLocationsOperationCompleted);
            }
            this.InvokeAsync("GetAllServiceLocations", new object[] {
                        lastReceived}, this.GetAllServiceLocationsOperationCompleted, userState);
        }
        
        private void OnGetAllServiceLocationsOperationCompleted(object arg) {
            if ((this.GetAllServiceLocationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllServiceLocationsCompleted(this, new GetAllServiceLocationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetBilledUsage", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public billedUsage GetBilledUsage(string accountNumber, System.DateTime cisBillDate) {
            object[] results = this.Invoke("GetBilledUsage", new object[] {
                        accountNumber,
                        cisBillDate});
            return ((billedUsage)(results[0]));
        }
        
        /// CodeRemarks
        public void GetBilledUsageAsync(string accountNumber, System.DateTime cisBillDate) {
            this.GetBilledUsageAsync(accountNumber, cisBillDate, null);
        }
        
        /// CodeRemarks
        public void GetBilledUsageAsync(string accountNumber, System.DateTime cisBillDate, object userState) {
            if ((this.GetBilledUsageOperationCompleted == null)) {
                this.GetBilledUsageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBilledUsageOperationCompleted);
            }
            this.InvokeAsync("GetBilledUsage", new object[] {
                        accountNumber,
                        cisBillDate}, this.GetBilledUsageOperationCompleted, userState);
        }
        
        private void OnGetBilledUsageOperationCompleted(object arg) {
            if ((this.GetBilledUsageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBilledUsageCompleted(this, new GetBilledUsageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetBillingData", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public billingData[] GetBillingData(System.DateTime startBillDate, System.DateTime endBillDate, string lastReceived) {
            object[] results = this.Invoke("GetBillingData", new object[] {
                        startBillDate,
                        endBillDate,
                        lastReceived});
            return ((billingData[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetBillingDataAsync(System.DateTime startBillDate, System.DateTime endBillDate, string lastReceived) {
            this.GetBillingDataAsync(startBillDate, endBillDate, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetBillingDataAsync(System.DateTime startBillDate, System.DateTime endBillDate, string lastReceived, object userState) {
            if ((this.GetBillingDataOperationCompleted == null)) {
                this.GetBillingDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBillingDataOperationCompleted);
            }
            this.InvokeAsync("GetBillingData", new object[] {
                        startBillDate,
                        endBillDate,
                        lastReceived}, this.GetBillingDataOperationCompleted, userState);
        }
        
        private void OnGetBillingDataOperationCompleted(object arg) {
            if ((this.GetBillingDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBillingDataCompleted(this, new GetBillingDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetBillingDetail", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public billingDetail[] GetBillingDetail(string accountNumber, System.DateTime cisBillDate) {
            object[] results = this.Invoke("GetBillingDetail", new object[] {
                        accountNumber,
                        cisBillDate});
            return ((billingDetail[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetBillingDetailAsync(string accountNumber, System.DateTime cisBillDate) {
            this.GetBillingDetailAsync(accountNumber, cisBillDate, null);
        }
        
        /// CodeRemarks
        public void GetBillingDetailAsync(string accountNumber, System.DateTime cisBillDate, object userState) {
            if ((this.GetBillingDetailOperationCompleted == null)) {
                this.GetBillingDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBillingDetailOperationCompleted);
            }
            this.InvokeAsync("GetBillingDetail", new object[] {
                        accountNumber,
                        cisBillDate}, this.GetBillingDetailOperationCompleted, userState);
        }
        
        private void OnGetBillingDetailOperationCompleted(object arg) {
            if ((this.GetBillingDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBillingDetailCompleted(this, new GetBillingDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetChargeableDevicesByAccountNumber", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public chargeableDevice[] GetChargeableDevicesByAccountNumber(string accountNumber) {
            object[] results = this.Invoke("GetChargeableDevicesByAccountNumber", new object[] {
                        accountNumber});
            return ((chargeableDevice[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetChargeableDevicesByAccountNumberAsync(string accountNumber) {
            this.GetChargeableDevicesByAccountNumberAsync(accountNumber, null);
        }
        
        /// CodeRemarks
        public void GetChargeableDevicesByAccountNumberAsync(string accountNumber, object userState) {
            if ((this.GetChargeableDevicesByAccountNumberOperationCompleted == null)) {
                this.GetChargeableDevicesByAccountNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChargeableDevicesByAccountNumberOperationCompleted);
            }
            this.InvokeAsync("GetChargeableDevicesByAccountNumber", new object[] {
                        accountNumber}, this.GetChargeableDevicesByAccountNumberOperationCompleted, userState);
        }
        
        private void OnGetChargeableDevicesByAccountNumberOperationCompleted(object arg) {
            if ((this.GetChargeableDevicesByAccountNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChargeableDevicesByAccountNumberCompleted(this, new GetChargeableDevicesByAccountNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetIHDGroupMembers", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public inHomeDisplayGroup GetIHDGroupMembers(string IHDGroupName) {
            object[] results = this.Invoke("GetIHDGroupMembers", new object[] {
                        IHDGroupName});
            return ((inHomeDisplayGroup)(results[0]));
        }
        
        /// CodeRemarks
        public void GetIHDGroupMembersAsync(string IHDGroupName) {
            this.GetIHDGroupMembersAsync(IHDGroupName, null);
        }
        
        /// CodeRemarks
        public void GetIHDGroupMembersAsync(string IHDGroupName, object userState) {
            if ((this.GetIHDGroupMembersOperationCompleted == null)) {
                this.GetIHDGroupMembersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIHDGroupMembersOperationCompleted);
            }
            this.InvokeAsync("GetIHDGroupMembers", new object[] {
                        IHDGroupName}, this.GetIHDGroupMembersOperationCompleted, userState);
        }
        
        private void OnGetIHDGroupMembersOperationCompleted(object arg) {
            if ((this.GetIHDGroupMembersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIHDGroupMembersCompleted(this, new GetIHDGroupMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetIHDGroupNames", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetIHDGroupNames() {
            object[] results = this.Invoke("GetIHDGroupNames", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetIHDGroupNamesAsync() {
            this.GetIHDGroupNamesAsync(null);
        }
        
        /// CodeRemarks
        public void GetIHDGroupNamesAsync(object userState) {
            if ((this.GetIHDGroupNamesOperationCompleted == null)) {
                this.GetIHDGroupNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIHDGroupNamesOperationCompleted);
            }
            this.InvokeAsync("GetIHDGroupNames", new object[0], this.GetIHDGroupNamesOperationCompleted, userState);
        }
        
        private void OnGetIHDGroupNamesOperationCompleted(object arg) {
            if ((this.GetIHDGroupNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIHDGroupNamesCompleted(this, new GetIHDGroupNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateHANRegistration", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateHANRegistration(HANInterfaceID HANInterfaceID, HANDeviceID deviceID, HANSecurityToken securityToken, duration timeOut, string responseURL, string transactionID) {
            object[] results = this.Invoke("InitiateHANRegistration", new object[] {
                        HANInterfaceID,
                        deviceID,
                        securityToken,
                        timeOut,
                        responseURL,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateHANRegistrationAsync(HANInterfaceID HANInterfaceID, HANDeviceID deviceID, HANSecurityToken securityToken, duration timeOut, string responseURL, string transactionID) {
            this.InitiateHANRegistrationAsync(HANInterfaceID, deviceID, securityToken, timeOut, responseURL, transactionID, null);
        }
        
        /// CodeRemarks
        public void InitiateHANRegistrationAsync(HANInterfaceID HANInterfaceID, HANDeviceID deviceID, HANSecurityToken securityToken, duration timeOut, string responseURL, string transactionID, object userState) {
            if ((this.InitiateHANRegistrationOperationCompleted == null)) {
                this.InitiateHANRegistrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateHANRegistrationOperationCompleted);
            }
            this.InvokeAsync("InitiateHANRegistration", new object[] {
                        HANInterfaceID,
                        deviceID,
                        securityToken,
                        timeOut,
                        responseURL,
                        transactionID}, this.InitiateHANRegistrationOperationCompleted, userState);
        }
        
        private void OnInitiateHANRegistrationOperationCompleted(object arg) {
            if ((this.InitiateHANRegistrationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateHANRegistrationCompleted(this, new InitiateHANRegistrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CancelHANRegistration", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CancelHANRegistration(HANInterfaceID HANInterfaceID, HANDeviceID deviceID, string responseURL, string transactionID) {
            object[] results = this.Invoke("CancelHANRegistration", new object[] {
                        HANInterfaceID,
                        deviceID,
                        responseURL,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CancelHANRegistrationAsync(HANInterfaceID HANInterfaceID, HANDeviceID deviceID, string responseURL, string transactionID) {
            this.CancelHANRegistrationAsync(HANInterfaceID, deviceID, responseURL, transactionID, null);
        }
        
        /// CodeRemarks
        public void CancelHANRegistrationAsync(HANInterfaceID HANInterfaceID, HANDeviceID deviceID, string responseURL, string transactionID, object userState) {
            if ((this.CancelHANRegistrationOperationCompleted == null)) {
                this.CancelHANRegistrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelHANRegistrationOperationCompleted);
            }
            this.InvokeAsync("CancelHANRegistration", new object[] {
                        HANInterfaceID,
                        deviceID,
                        responseURL,
                        transactionID}, this.CancelHANRegistrationOperationCompleted, userState);
        }
        
        private void OnCancelHANRegistrationOperationCompleted(object arg) {
            if ((this.CancelHANRegistrationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelHANRegistrationCompleted(this, new CancelHANRegistrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateHANRegistrationStatusRequest", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateHANRegistrationStatusRequest(registrationStatus[] registrationStatuses, string responseURL, string transactionID) {
            object[] results = this.Invoke("InitiateHANRegistrationStatusRequest", new object[] {
                        registrationStatuses,
                        responseURL,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateHANRegistrationStatusRequestAsync(registrationStatus[] registrationStatuses, string responseURL, string transactionID) {
            this.InitiateHANRegistrationStatusRequestAsync(registrationStatuses, responseURL, transactionID, null);
        }
        
        /// CodeRemarks
        public void InitiateHANRegistrationStatusRequestAsync(registrationStatus[] registrationStatuses, string responseURL, string transactionID, object userState) {
            if ((this.InitiateHANRegistrationStatusRequestOperationCompleted == null)) {
                this.InitiateHANRegistrationStatusRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateHANRegistrationStatusRequestOperationCompleted);
            }
            this.InvokeAsync("InitiateHANRegistrationStatusRequest", new object[] {
                        registrationStatuses,
                        responseURL,
                        transactionID}, this.InitiateHANRegistrationStatusRequestOperationCompleted, userState);
        }
        
        private void OnInitiateHANRegistrationStatusRequestOperationCompleted(object arg) {
            if ((this.InitiateHANRegistrationStatusRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateHANRegistrationStatusRequestCompleted(this, new InitiateHANRegistrationStatusRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/HANRegistrationNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] HANRegistrationNotification(HANRegistration[] registrations, string transactionID) {
            object[] results = this.Invoke("HANRegistrationNotification", new object[] {
                        registrations,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void HANRegistrationNotificationAsync(HANRegistration[] registrations, string transactionID) {
            this.HANRegistrationNotificationAsync(registrations, transactionID, null);
        }
        
        /// CodeRemarks
        public void HANRegistrationNotificationAsync(HANRegistration[] registrations, string transactionID, object userState) {
            if ((this.HANRegistrationNotificationOperationCompleted == null)) {
                this.HANRegistrationNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHANRegistrationNotificationOperationCompleted);
            }
            this.InvokeAsync("HANRegistrationNotification", new object[] {
                        registrations,
                        transactionID}, this.HANRegistrationNotificationOperationCompleted, userState);
        }
        
        private void OnHANRegistrationNotificationOperationCompleted(object arg) {
            if ((this.HANRegistrationNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HANRegistrationNotificationCompleted(this, new HANRegistrationNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetMeterHistoryByMeterID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meterHistoryEvent[] GetMeterHistoryByMeterID(meterID meter) {
            object[] results = this.Invoke("GetMeterHistoryByMeterID", new object[] {
                        meter});
            return ((meterHistoryEvent[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetMeterHistoryByMeterIDAsync(meterID meter) {
            this.GetMeterHistoryByMeterIDAsync(meter, null);
        }
        
        /// CodeRemarks
        public void GetMeterHistoryByMeterIDAsync(meterID meter, object userState) {
            if ((this.GetMeterHistoryByMeterIDOperationCompleted == null)) {
                this.GetMeterHistoryByMeterIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMeterHistoryByMeterIDOperationCompleted);
            }
            this.InvokeAsync("GetMeterHistoryByMeterID", new object[] {
                        meter}, this.GetMeterHistoryByMeterIDOperationCompleted, userState);
        }
        
        private void OnGetMeterHistoryByMeterIDOperationCompleted(object arg) {
            if ((this.GetMeterHistoryByMeterIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMeterHistoryByMeterIDCompleted(this, new GetMeterHistoryByMeterIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetPPMBalanceAdjustments", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ppmBalanceAdjustment[] GetPPMBalanceAdjustments(System.DateTime startTime, System.DateTime stopTime) {
            object[] results = this.Invoke("GetPPMBalanceAdjustments", new object[] {
                        startTime,
                        stopTime});
            return ((ppmBalanceAdjustment[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetPPMBalanceAdjustmentsAsync(System.DateTime startTime, System.DateTime stopTime) {
            this.GetPPMBalanceAdjustmentsAsync(startTime, stopTime, null);
        }
        
        /// CodeRemarks
        public void GetPPMBalanceAdjustmentsAsync(System.DateTime startTime, System.DateTime stopTime, object userState) {
            if ((this.GetPPMBalanceAdjustmentsOperationCompleted == null)) {
                this.GetPPMBalanceAdjustmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPPMBalanceAdjustmentsOperationCompleted);
            }
            this.InvokeAsync("GetPPMBalanceAdjustments", new object[] {
                        startTime,
                        stopTime}, this.GetPPMBalanceAdjustmentsOperationCompleted, userState);
        }
        
        private void OnGetPPMBalanceAdjustmentsOperationCompleted(object arg) {
            if ((this.GetPPMBalanceAdjustmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPPMBalanceAdjustmentsCompleted(this, new GetPPMBalanceAdjustmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetPPMCustomer", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ppmLocation GetPPMCustomer(string accountNumber) {
            object[] results = this.Invoke("GetPPMCustomer", new object[] {
                        accountNumber});
            return ((ppmLocation)(results[0]));
        }
        
        /// CodeRemarks
        public void GetPPMCustomerAsync(string accountNumber) {
            this.GetPPMCustomerAsync(accountNumber, null);
        }
        
        /// CodeRemarks
        public void GetPPMCustomerAsync(string accountNumber, object userState) {
            if ((this.GetPPMCustomerOperationCompleted == null)) {
                this.GetPPMCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPPMCustomerOperationCompleted);
            }
            this.InvokeAsync("GetPPMCustomer", new object[] {
                        accountNumber}, this.GetPPMCustomerOperationCompleted, userState);
        }
        
        private void OnGetPPMCustomerOperationCompleted(object arg) {
            if ((this.GetPPMCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPPMCustomerCompleted(this, new GetPPMCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetPPMPayments", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("paymentTransactionList")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false, NestingLevel=1)]
        public paymentTransaction[][] GetPPMPayments(System.DateTime startTime, System.DateTime stopTime) {
            object[] results = this.Invoke("GetPPMPayments", new object[] {
                        startTime,
                        stopTime});
            return ((paymentTransaction[][])(results[0]));
        }
        
        /// CodeRemarks
        public void GetPPMPaymentsAsync(System.DateTime startTime, System.DateTime stopTime) {
            this.GetPPMPaymentsAsync(startTime, stopTime, null);
        }
        
        /// CodeRemarks
        public void GetPPMPaymentsAsync(System.DateTime startTime, System.DateTime stopTime, object userState) {
            if ((this.GetPPMPaymentsOperationCompleted == null)) {
                this.GetPPMPaymentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPPMPaymentsOperationCompleted);
            }
            this.InvokeAsync("GetPPMPayments", new object[] {
                        startTime,
                        stopTime}, this.GetPPMPaymentsOperationCompleted, userState);
        }
        
        private void OnGetPPMPaymentsOperationCompleted(object arg) {
            if ((this.GetPPMPaymentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPPMPaymentsCompleted(this, new GetPPMPaymentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetServiceOrderByServiceOrderID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public serviceOrder GetServiceOrderByServiceOrderID(string serviceOrderID) {
            object[] results = this.Invoke("GetServiceOrderByServiceOrderID", new object[] {
                        serviceOrderID});
            return ((serviceOrder)(results[0]));
        }
        
        /// CodeRemarks
        public void GetServiceOrderByServiceOrderIDAsync(string serviceOrderID) {
            this.GetServiceOrderByServiceOrderIDAsync(serviceOrderID, null);
        }
        
        /// CodeRemarks
        public void GetServiceOrderByServiceOrderIDAsync(string serviceOrderID, object userState) {
            if ((this.GetServiceOrderByServiceOrderIDOperationCompleted == null)) {
                this.GetServiceOrderByServiceOrderIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceOrderByServiceOrderIDOperationCompleted);
            }
            this.InvokeAsync("GetServiceOrderByServiceOrderID", new object[] {
                        serviceOrderID}, this.GetServiceOrderByServiceOrderIDOperationCompleted, userState);
        }
        
        private void OnGetServiceOrderByServiceOrderIDOperationCompleted(object arg) {
            if ((this.GetServiceOrderByServiceOrderIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceOrderByServiceOrderIDCompleted(this, new GetServiceOrderByServiceOrderIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetServiceOrdersByServiceLocation", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public serviceOrder[] GetServiceOrdersByServiceLocation(string serviceLocationID) {
            object[] results = this.Invoke("GetServiceOrdersByServiceLocation", new object[] {
                        serviceLocationID});
            return ((serviceOrder[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetServiceOrdersByServiceLocationAsync(string serviceLocationID) {
            this.GetServiceOrdersByServiceLocationAsync(serviceLocationID, null);
        }
        
        /// CodeRemarks
        public void GetServiceOrdersByServiceLocationAsync(string serviceLocationID, object userState) {
            if ((this.GetServiceOrdersByServiceLocationOperationCompleted == null)) {
                this.GetServiceOrdersByServiceLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceOrdersByServiceLocationOperationCompleted);
            }
            this.InvokeAsync("GetServiceOrdersByServiceLocation", new object[] {
                        serviceLocationID}, this.GetServiceOrdersByServiceLocationOperationCompleted, userState);
        }
        
        private void OnGetServiceOrdersByServiceLocationOperationCompleted(object arg) {
            if ((this.GetServiceOrdersByServiceLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceOrdersByServiceLocationCompleted(this, new GetServiceOrdersByServiceLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetServiceOrdersByStatus", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public serviceOrder[] GetServiceOrdersByStatus(soStatusCode status, string lastReceived) {
            object[] results = this.Invoke("GetServiceOrdersByStatus", new object[] {
                        status,
                        lastReceived});
            return ((serviceOrder[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetServiceOrdersByStatusAsync(soStatusCode status, string lastReceived) {
            this.GetServiceOrdersByStatusAsync(status, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetServiceOrdersByStatusAsync(soStatusCode status, string lastReceived, object userState) {
            if ((this.GetServiceOrdersByStatusOperationCompleted == null)) {
                this.GetServiceOrdersByStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceOrdersByStatusOperationCompleted);
            }
            this.InvokeAsync("GetServiceOrdersByStatus", new object[] {
                        status,
                        lastReceived}, this.GetServiceOrdersByStatusOperationCompleted, userState);
        }
        
        private void OnGetServiceOrdersByStatusOperationCompleted(object arg) {
            if ((this.GetServiceOrdersByStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceOrdersByStatusCompleted(this, new GetServiceOrdersByStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/AdjustPPMBalance", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] AdjustPPMBalance(ppmBalanceAdjustment[] adjustments) {
            object[] results = this.Invoke("AdjustPPMBalance", new object[] {
                        adjustments});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void AdjustPPMBalanceAsync(ppmBalanceAdjustment[] adjustments) {
            this.AdjustPPMBalanceAsync(adjustments, null);
        }
        
        /// CodeRemarks
        public void AdjustPPMBalanceAsync(ppmBalanceAdjustment[] adjustments, object userState) {
            if ((this.AdjustPPMBalanceOperationCompleted == null)) {
                this.AdjustPPMBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustPPMBalanceOperationCompleted);
            }
            this.InvokeAsync("AdjustPPMBalance", new object[] {
                        adjustments}, this.AdjustPPMBalanceOperationCompleted, userState);
        }
        
        private void OnAdjustPPMBalanceOperationCompleted(object arg) {
            if ((this.AdjustPPMBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustPPMBalanceCompleted(this, new AdjustPPMBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CommitPaymentTransaction", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public paymentTransaction[] CommitPaymentTransaction([System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] paymentTransaction[] transactions) {
            object[] results = this.Invoke("CommitPaymentTransaction", new object[] {
                        transactions});
            return ((paymentTransaction[])(results[0]));
        }
        
        /// CodeRemarks
        public void CommitPaymentTransactionAsync(paymentTransaction[] transactions) {
            this.CommitPaymentTransactionAsync(transactions, null);
        }
        
        /// CodeRemarks
        public void CommitPaymentTransactionAsync(paymentTransaction[] transactions, object userState) {
            if ((this.CommitPaymentTransactionOperationCompleted == null)) {
                this.CommitPaymentTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitPaymentTransactionOperationCompleted);
            }
            this.InvokeAsync("CommitPaymentTransaction", new object[] {
                        transactions}, this.CommitPaymentTransactionOperationCompleted, userState);
        }
        
        private void OnCommitPaymentTransactionOperationCompleted(object arg) {
            if ((this.CommitPaymentTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitPaymentTransactionCompleted(this, new CommitPaymentTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/EnrollPPMCustomer", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] EnrollPPMCustomer(ppmLocation[] newPPMCustomers) {
            object[] results = this.Invoke("EnrollPPMCustomer", new object[] {
                        newPPMCustomers});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void EnrollPPMCustomerAsync(ppmLocation[] newPPMCustomers) {
            this.EnrollPPMCustomerAsync(newPPMCustomers, null);
        }
        
        /// CodeRemarks
        public void EnrollPPMCustomerAsync(ppmLocation[] newPPMCustomers, object userState) {
            if ((this.EnrollPPMCustomerOperationCompleted == null)) {
                this.EnrollPPMCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnrollPPMCustomerOperationCompleted);
            }
            this.InvokeAsync("EnrollPPMCustomer", new object[] {
                        newPPMCustomers}, this.EnrollPPMCustomerOperationCompleted, userState);
        }
        
        private void OnEnrollPPMCustomerOperationCompleted(object arg) {
            if ((this.EnrollPPMCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnrollPPMCustomerCompleted(this, new EnrollPPMCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/UnenrollPPMCustomer", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] UnenrollPPMCustomer(ppmLocation[] newPPMCustomers) {
            object[] results = this.Invoke("UnenrollPPMCustomer", new object[] {
                        newPPMCustomers});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void UnenrollPPMCustomerAsync(ppmLocation[] newPPMCustomers) {
            this.UnenrollPPMCustomerAsync(newPPMCustomers, null);
        }
        
        /// CodeRemarks
        public void UnenrollPPMCustomerAsync(ppmLocation[] newPPMCustomers, object userState) {
            if ((this.UnenrollPPMCustomerOperationCompleted == null)) {
                this.UnenrollPPMCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnenrollPPMCustomerOperationCompleted);
            }
            this.InvokeAsync("UnenrollPPMCustomer", new object[] {
                        newPPMCustomers}, this.UnenrollPPMCustomerOperationCompleted, userState);
        }
        
        private void OnUnenrollPPMCustomerOperationCompleted(object arg) {
            if ((this.UnenrollPPMCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnenrollPPMCustomerCompleted(this, new UnenrollPPMCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetPrePayStatus", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ppmStatus[] GetPrePayStatus(string[] ppmLocations) {
            object[] results = this.Invoke("GetPrePayStatus", new object[] {
                        ppmLocations});
            return ((ppmStatus[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetPrePayStatusAsync(string[] ppmLocations) {
            this.GetPrePayStatusAsync(ppmLocations, null);
        }
        
        /// CodeRemarks
        public void GetPrePayStatusAsync(string[] ppmLocations, object userState) {
            if ((this.GetPrePayStatusOperationCompleted == null)) {
                this.GetPrePayStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrePayStatusOperationCompleted);
            }
            this.InvokeAsync("GetPrePayStatus", new object[] {
                        ppmLocations}, this.GetPrePayStatusOperationCompleted, userState);
        }
        
        private void OnGetPrePayStatusOperationCompleted(object arg) {
            if ((this.GetPrePayStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrePayStatusCompleted(this, new GetPrePayStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetMeterConnectivityByMeterID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meterConnectivity GetMeterConnectivityByMeterID(meterID meterID) {
            object[] results = this.Invoke("GetMeterConnectivityByMeterID", new object[] {
                        meterID});
            return ((meterConnectivity)(results[0]));
        }
        
        /// CodeRemarks
        public void GetMeterConnectivityByMeterIDAsync(meterID meterID) {
            this.GetMeterConnectivityByMeterIDAsync(meterID, null);
        }
        
        /// CodeRemarks
        public void GetMeterConnectivityByMeterIDAsync(meterID meterID, object userState) {
            if ((this.GetMeterConnectivityByMeterIDOperationCompleted == null)) {
                this.GetMeterConnectivityByMeterIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMeterConnectivityByMeterIDOperationCompleted);
            }
            this.InvokeAsync("GetMeterConnectivityByMeterID", new object[] {
                        meterID}, this.GetMeterConnectivityByMeterIDOperationCompleted, userState);
        }
        
        private void OnGetMeterConnectivityByMeterIDOperationCompleted(object arg) {
            if ((this.GetMeterConnectivityByMeterIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMeterConnectivityByMeterIDCompleted(this, new GetMeterConnectivityByMeterIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateMeterEventMonitoring", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateMeterEventMonitoring([System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] eventMonitoringItem[] monitoringList, string responseURL, string transactionID) {
            object[] results = this.Invoke("InitiateMeterEventMonitoring", new object[] {
                        monitoringList,
                        responseURL,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateMeterEventMonitoringAsync(eventMonitoringItem[] monitoringList, string responseURL, string transactionID) {
            this.InitiateMeterEventMonitoringAsync(monitoringList, responseURL, transactionID, null);
        }
        
        /// CodeRemarks
        public void InitiateMeterEventMonitoringAsync(eventMonitoringItem[] monitoringList, string responseURL, string transactionID, object userState) {
            if ((this.InitiateMeterEventMonitoringOperationCompleted == null)) {
                this.InitiateMeterEventMonitoringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateMeterEventMonitoringOperationCompleted);
            }
            this.InvokeAsync("InitiateMeterEventMonitoring", new object[] {
                        monitoringList,
                        responseURL,
                        transactionID}, this.InitiateMeterEventMonitoringOperationCompleted, userState);
        }
        
        private void OnInitiateMeterEventMonitoringOperationCompleted(object arg) {
            if ((this.InitiateMeterEventMonitoringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateMeterEventMonitoringCompleted(this, new InitiateMeterEventMonitoringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CancelMeterEventMonitoring", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CancelMeterEventMonitoring(string monitoringItemObjectID, string transactionID) {
            object[] results = this.Invoke("CancelMeterEventMonitoring", new object[] {
                        monitoringItemObjectID,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CancelMeterEventMonitoringAsync(string monitoringItemObjectID, string transactionID) {
            this.CancelMeterEventMonitoringAsync(monitoringItemObjectID, transactionID, null);
        }
        
        /// CodeRemarks
        public void CancelMeterEventMonitoringAsync(string monitoringItemObjectID, string transactionID, object userState) {
            if ((this.CancelMeterEventMonitoringOperationCompleted == null)) {
                this.CancelMeterEventMonitoringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelMeterEventMonitoringOperationCompleted);
            }
            this.InvokeAsync("CancelMeterEventMonitoring", new object[] {
                        monitoringItemObjectID,
                        transactionID}, this.CancelMeterEventMonitoringOperationCompleted, userState);
        }
        
        private void OnCancelMeterEventMonitoringOperationCompleted(object arg) {
            if ((this.CancelMeterEventMonitoringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelMeterEventMonitoringCompleted(this, new CancelMeterEventMonitoringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetMetersByMeterConnectionStatus", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meters GetMetersByMeterConnectionStatus(meterConnectionStatus status, string lastReceived) {
            object[] results = this.Invoke("GetMetersByMeterConnectionStatus", new object[] {
                        status,
                        lastReceived});
            return ((meters)(results[0]));
        }
        
        /// CodeRemarks
        public void GetMetersByMeterConnectionStatusAsync(meterConnectionStatus status, string lastReceived) {
            this.GetMetersByMeterConnectionStatusAsync(status, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetMetersByMeterConnectionStatusAsync(meterConnectionStatus status, string lastReceived, object userState) {
            if ((this.GetMetersByMeterConnectionStatusOperationCompleted == null)) {
                this.GetMetersByMeterConnectionStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMetersByMeterConnectionStatusOperationCompleted);
            }
            this.InvokeAsync("GetMetersByMeterConnectionStatus", new object[] {
                        status,
                        lastReceived}, this.GetMetersByMeterConnectionStatusOperationCompleted, userState);
        }
        
        private void OnGetMetersByMeterConnectionStatusOperationCompleted(object arg) {
            if ((this.GetMetersByMeterConnectionStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMetersByMeterConnectionStatusCompleted(this, new GetMetersByMeterConnectionStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetMeterByTransponderID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meters GetMeterByTransponderID(string transponderID) {
            object[] results = this.Invoke("GetMeterByTransponderID", new object[] {
                        transponderID});
            return ((meters)(results[0]));
        }
        
        /// CodeRemarks
        public void GetMeterByTransponderIDAsync(string transponderID) {
            this.GetMeterByTransponderIDAsync(transponderID, null);
        }
        
        /// CodeRemarks
        public void GetMeterByTransponderIDAsync(string transponderID, object userState) {
            if ((this.GetMeterByTransponderIDOperationCompleted == null)) {
                this.GetMeterByTransponderIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMeterByTransponderIDOperationCompleted);
            }
            this.InvokeAsync("GetMeterByTransponderID", new object[] {
                        transponderID}, this.GetMeterByTransponderIDOperationCompleted, userState);
        }
        
        private void OnGetMeterByTransponderIDOperationCompleted(object arg) {
            if ((this.GetMeterByTransponderIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMeterByTransponderIDCompleted(this, new GetMeterByTransponderIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/IsCDSupported", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsCDSupported(ppmLocation location) {
            object[] results = this.Invoke("IsCDSupported", new object[] {
                        location});
            return ((bool)(results[0]));
        }
        
        /// CodeRemarks
        public void IsCDSupportedAsync(ppmLocation location) {
            this.IsCDSupportedAsync(location, null);
        }
        
        /// CodeRemarks
        public void IsCDSupportedAsync(ppmLocation location, object userState) {
            if ((this.IsCDSupportedOperationCompleted == null)) {
                this.IsCDSupportedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsCDSupportedOperationCompleted);
            }
            this.InvokeAsync("IsCDSupported", new object[] {
                        location}, this.IsCDSupportedOperationCompleted, userState);
        }
        
        private void OnIsCDSupportedOperationCompleted(object arg) {
            if ((this.IsCDSupportedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsCDSupportedCompleted(this, new IsCDSupportedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateThresholdMonitoring", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateThresholdMonitoring([System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] thresholdMonitoringItem[] monitoringList, string responseURL, string transactionID) {
            object[] results = this.Invoke("InitiateThresholdMonitoring", new object[] {
                        monitoringList,
                        responseURL,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateThresholdMonitoringAsync(thresholdMonitoringItem[] monitoringList, string responseURL, string transactionID) {
            this.InitiateThresholdMonitoringAsync(monitoringList, responseURL, transactionID, null);
        }
        
        /// CodeRemarks
        public void InitiateThresholdMonitoringAsync(thresholdMonitoringItem[] monitoringList, string responseURL, string transactionID, object userState) {
            if ((this.InitiateThresholdMonitoringOperationCompleted == null)) {
                this.InitiateThresholdMonitoringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateThresholdMonitoringOperationCompleted);
            }
            this.InvokeAsync("InitiateThresholdMonitoring", new object[] {
                        monitoringList,
                        responseURL,
                        transactionID}, this.InitiateThresholdMonitoringOperationCompleted, userState);
        }
        
        private void OnInitiateThresholdMonitoringOperationCompleted(object arg) {
            if ((this.InitiateThresholdMonitoringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateThresholdMonitoringCompleted(this, new InitiateThresholdMonitoringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/AdjustThresholdMonitoring", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] AdjustThresholdMonitoring([System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] thresholdMonitoringItem[] monitoringList, string transactionID) {
            object[] results = this.Invoke("AdjustThresholdMonitoring", new object[] {
                        monitoringList,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void AdjustThresholdMonitoringAsync(thresholdMonitoringItem[] monitoringList, string transactionID) {
            this.AdjustThresholdMonitoringAsync(monitoringList, transactionID, null);
        }
        
        /// CodeRemarks
        public void AdjustThresholdMonitoringAsync(thresholdMonitoringItem[] monitoringList, string transactionID, object userState) {
            if ((this.AdjustThresholdMonitoringOperationCompleted == null)) {
                this.AdjustThresholdMonitoringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustThresholdMonitoringOperationCompleted);
            }
            this.InvokeAsync("AdjustThresholdMonitoring", new object[] {
                        monitoringList,
                        transactionID}, this.AdjustThresholdMonitoringOperationCompleted, userState);
        }
        
        private void OnAdjustThresholdMonitoringOperationCompleted(object arg) {
            if ((this.AdjustThresholdMonitoringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustThresholdMonitoringCompleted(this, new AdjustThresholdMonitoringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CancelThresholdMonitoring", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CancelThresholdMonitoring(string monitoringItemObjectID, string transactionID) {
            object[] results = this.Invoke("CancelThresholdMonitoring", new object[] {
                        monitoringItemObjectID,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CancelThresholdMonitoringAsync(string monitoringItemObjectID, string transactionID) {
            this.CancelThresholdMonitoringAsync(monitoringItemObjectID, transactionID, null);
        }
        
        /// CodeRemarks
        public void CancelThresholdMonitoringAsync(string monitoringItemObjectID, string transactionID, object userState) {
            if ((this.CancelThresholdMonitoringOperationCompleted == null)) {
                this.CancelThresholdMonitoringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelThresholdMonitoringOperationCompleted);
            }
            this.InvokeAsync("CancelThresholdMonitoring", new object[] {
                        monitoringItemObjectID,
                        transactionID}, this.CancelThresholdMonitoringOperationCompleted, userState);
        }
        
        private void OnCancelThresholdMonitoringOperationCompleted(object arg) {
            if ((this.CancelThresholdMonitoringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelThresholdMonitoringCompleted(this, new CancelThresholdMonitoringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/ThresholdEventNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] ThresholdEventNotification([System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] thresholdMonitoringItem[] thresholds, string transactionID) {
            object[] results = this.Invoke("ThresholdEventNotification", new object[] {
                        thresholds,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void ThresholdEventNotificationAsync(thresholdMonitoringItem[] thresholds, string transactionID) {
            this.ThresholdEventNotificationAsync(thresholds, transactionID, null);
        }
        
        /// CodeRemarks
        public void ThresholdEventNotificationAsync(thresholdMonitoringItem[] thresholds, string transactionID, object userState) {
            if ((this.ThresholdEventNotificationOperationCompleted == null)) {
                this.ThresholdEventNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnThresholdEventNotificationOperationCompleted);
            }
            this.InvokeAsync("ThresholdEventNotification", new object[] {
                        thresholds,
                        transactionID}, this.ThresholdEventNotificationOperationCompleted, userState);
        }
        
        private void OnThresholdEventNotificationOperationCompleted(object arg) {
            if ((this.ThresholdEventNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ThresholdEventNotificationCompleted(this, new ThresholdEventNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateMeterExchange", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateMeterExchange(meterExchanges exchanges, string responseURL, string transactionID) {
            object[] results = this.Invoke("InitiateMeterExchange", new object[] {
                        exchanges,
                        responseURL,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateMeterExchangeAsync(meterExchanges exchanges, string responseURL, string transactionID) {
            this.InitiateMeterExchangeAsync(exchanges, responseURL, transactionID, null);
        }
        
        /// CodeRemarks
        public void InitiateMeterExchangeAsync(meterExchanges exchanges, string responseURL, string transactionID, object userState) {
            if ((this.InitiateMeterExchangeOperationCompleted == null)) {
                this.InitiateMeterExchangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateMeterExchangeOperationCompleted);
            }
            this.InvokeAsync("InitiateMeterExchange", new object[] {
                        exchanges,
                        responseURL,
                        transactionID}, this.InitiateMeterExchangeOperationCompleted, userState);
        }
        
        private void OnInitiateMeterExchangeOperationCompleted(object arg) {
            if ((this.InitiateMeterExchangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateMeterExchangeCompleted(this, new InitiateMeterExchangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/MeterExchangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] MeterExchangedNotification(meterExchanges exchanges, string transactionID) {
            object[] results = this.Invoke("MeterExchangedNotification", new object[] {
                        exchanges,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void MeterExchangedNotificationAsync(meterExchanges exchanges, string transactionID) {
            this.MeterExchangedNotificationAsync(exchanges, transactionID, null);
        }
        
        /// CodeRemarks
        public void MeterExchangedNotificationAsync(meterExchanges exchanges, string transactionID, object userState) {
            if ((this.MeterExchangedNotificationOperationCompleted == null)) {
                this.MeterExchangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMeterExchangedNotificationOperationCompleted);
            }
            this.InvokeAsync("MeterExchangedNotification", new object[] {
                        exchanges,
                        transactionID}, this.MeterExchangedNotificationOperationCompleted, userState);
        }
        
        private void OnMeterExchangedNotificationOperationCompleted(object arg) {
            if ((this.MeterExchangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MeterExchangedNotificationCompleted(this, new MeterExchangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetCustomersAffectedByOutage", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public customersAffectedByOutage GetCustomersAffectedByOutage(string outageEventID) {
            object[] results = this.Invoke("GetCustomersAffectedByOutage", new object[] {
                        outageEventID});
            return ((customersAffectedByOutage)(results[0]));
        }
        
        /// CodeRemarks
        public void GetCustomersAffectedByOutageAsync(string outageEventID) {
            this.GetCustomersAffectedByOutageAsync(outageEventID, null);
        }
        
        /// CodeRemarks
        public void GetCustomersAffectedByOutageAsync(string outageEventID, object userState) {
            if ((this.GetCustomersAffectedByOutageOperationCompleted == null)) {
                this.GetCustomersAffectedByOutageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomersAffectedByOutageOperationCompleted);
            }
            this.InvokeAsync("GetCustomersAffectedByOutage", new object[] {
                        outageEventID}, this.GetCustomersAffectedByOutageOperationCompleted, userState);
        }
        
        private void OnGetCustomersAffectedByOutageOperationCompleted(object arg) {
            if ((this.GetCustomersAffectedByOutageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomersAffectedByOutageCompleted(this, new GetCustomersAffectedByOutageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/MeterConfigurationNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] MeterConfigurationNotification(meterConfigurationStatus configStatus, string transactionID) {
            object[] results = this.Invoke("MeterConfigurationNotification", new object[] {
                        configStatus,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void MeterConfigurationNotificationAsync(meterConfigurationStatus configStatus, string transactionID) {
            this.MeterConfigurationNotificationAsync(configStatus, transactionID, null);
        }
        
        /// CodeRemarks
        public void MeterConfigurationNotificationAsync(meterConfigurationStatus configStatus, string transactionID, object userState) {
            if ((this.MeterConfigurationNotificationOperationCompleted == null)) {
                this.MeterConfigurationNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMeterConfigurationNotificationOperationCompleted);
            }
            this.InvokeAsync("MeterConfigurationNotification", new object[] {
                        configStatus,
                        transactionID}, this.MeterConfigurationNotificationOperationCompleted, userState);
        }
        
        private void OnMeterConfigurationNotificationOperationCompleted(object arg) {
            if ((this.MeterConfigurationNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MeterConfigurationNotificationCompleted(this, new MeterConfigurationNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/RateChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] RateChangedNotification(rate rateInfo, string transactionID) {
            object[] results = this.Invoke("RateChangedNotification", new object[] {
                        rateInfo,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void RateChangedNotificationAsync(rate rateInfo, string transactionID) {
            this.RateChangedNotificationAsync(rateInfo, transactionID, null);
        }
        
        /// CodeRemarks
        public void RateChangedNotificationAsync(rate rateInfo, string transactionID, object userState) {
            if ((this.RateChangedNotificationOperationCompleted == null)) {
                this.RateChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRateChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("RateChangedNotification", new object[] {
                        rateInfo,
                        transactionID}, this.RateChangedNotificationOperationCompleted, userState);
        }
        
        private void OnRateChangedNotificationOperationCompleted(object arg) {
            if ((this.RateChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RateChangedNotificationCompleted(this, new RateChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateMeterInstallation", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateMeterInstallation(serviceLocation[] installLocations, string responseURL, string transactionID) {
            object[] results = this.Invoke("InitiateMeterInstallation", new object[] {
                        installLocations,
                        responseURL,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateMeterInstallationAsync(serviceLocation[] installLocations, string responseURL, string transactionID) {
            this.InitiateMeterInstallationAsync(installLocations, responseURL, transactionID, null);
        }
        
        /// CodeRemarks
        public void InitiateMeterInstallationAsync(serviceLocation[] installLocations, string responseURL, string transactionID, object userState) {
            if ((this.InitiateMeterInstallationOperationCompleted == null)) {
                this.InitiateMeterInstallationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateMeterInstallationOperationCompleted);
            }
            this.InvokeAsync("InitiateMeterInstallation", new object[] {
                        installLocations,
                        responseURL,
                        transactionID}, this.InitiateMeterInstallationOperationCompleted, userState);
        }
        
        private void OnInitiateMeterInstallationOperationCompleted(object arg) {
            if ((this.InitiateMeterInstallationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateMeterInstallationCompleted(this, new InitiateMeterInstallationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateInHomeDisplayBillingMessage", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateInHomeDisplayBillingMessage([System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] inHomeDisplayBillingMessage[] messages, HANDeviceID deviceID, HANInterfaceID interfaceID, string transactionID, string responseURL) {
            object[] results = this.Invoke("InitiateInHomeDisplayBillingMessage", new object[] {
                        messages,
                        deviceID,
                        interfaceID,
                        transactionID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateInHomeDisplayBillingMessageAsync(inHomeDisplayBillingMessage[] messages, HANDeviceID deviceID, HANInterfaceID interfaceID, string transactionID, string responseURL) {
            this.InitiateInHomeDisplayBillingMessageAsync(messages, deviceID, interfaceID, transactionID, responseURL, null);
        }
        
        /// CodeRemarks
        public void InitiateInHomeDisplayBillingMessageAsync(inHomeDisplayBillingMessage[] messages, HANDeviceID deviceID, HANInterfaceID interfaceID, string transactionID, string responseURL, object userState) {
            if ((this.InitiateInHomeDisplayBillingMessageOperationCompleted == null)) {
                this.InitiateInHomeDisplayBillingMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateInHomeDisplayBillingMessageOperationCompleted);
            }
            this.InvokeAsync("InitiateInHomeDisplayBillingMessage", new object[] {
                        messages,
                        deviceID,
                        interfaceID,
                        transactionID,
                        responseURL}, this.InitiateInHomeDisplayBillingMessageOperationCompleted, userState);
        }
        
        private void OnInitiateInHomeDisplayBillingMessageOperationCompleted(object arg) {
            if ((this.InitiateInHomeDisplayBillingMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateInHomeDisplayBillingMessageCompleted(this, new InitiateInHomeDisplayBillingMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CancelInHomeDisplayBillingMessage", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CancelInHomeDisplayBillingMessage(string inHomeDisplayMessageID, HANDeviceID deviceID, HANInterfaceID interfaceID, string transactionID, string responseURL) {
            object[] results = this.Invoke("CancelInHomeDisplayBillingMessage", new object[] {
                        inHomeDisplayMessageID,
                        deviceID,
                        interfaceID,
                        transactionID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CancelInHomeDisplayBillingMessageAsync(string inHomeDisplayMessageID, HANDeviceID deviceID, HANInterfaceID interfaceID, string transactionID, string responseURL) {
            this.CancelInHomeDisplayBillingMessageAsync(inHomeDisplayMessageID, deviceID, interfaceID, transactionID, responseURL, null);
        }
        
        /// CodeRemarks
        public void CancelInHomeDisplayBillingMessageAsync(string inHomeDisplayMessageID, HANDeviceID deviceID, HANInterfaceID interfaceID, string transactionID, string responseURL, object userState) {
            if ((this.CancelInHomeDisplayBillingMessageOperationCompleted == null)) {
                this.CancelInHomeDisplayBillingMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelInHomeDisplayBillingMessageOperationCompleted);
            }
            this.InvokeAsync("CancelInHomeDisplayBillingMessage", new object[] {
                        inHomeDisplayMessageID,
                        deviceID,
                        interfaceID,
                        transactionID,
                        responseURL}, this.CancelInHomeDisplayBillingMessageOperationCompleted, userState);
        }
        
        private void OnCancelInHomeDisplayBillingMessageOperationCompleted(object arg) {
            if ((this.CancelInHomeDisplayBillingMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelInHomeDisplayBillingMessageCompleted(this, new CancelInHomeDisplayBillingMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateHistoricalMeterReadingsByMeterIDAndDate", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateHistoricalMeterReadingsByMeterIDAndDate(meterID[] meterIDs, System.DateTime date, string responseURL, string transactionID) {
            object[] results = this.Invoke("InitiateHistoricalMeterReadingsByMeterIDAndDate", new object[] {
                        meterIDs,
                        date,
                        responseURL,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateHistoricalMeterReadingsByMeterIDAndDateAsync(meterID[] meterIDs, System.DateTime date, string responseURL, string transactionID) {
            this.InitiateHistoricalMeterReadingsByMeterIDAndDateAsync(meterIDs, date, responseURL, transactionID, null);
        }
        
        /// CodeRemarks
        public void InitiateHistoricalMeterReadingsByMeterIDAndDateAsync(meterID[] meterIDs, System.DateTime date, string responseURL, string transactionID, object userState) {
            if ((this.InitiateHistoricalMeterReadingsByMeterIDAndDateOperationCompleted == null)) {
                this.InitiateHistoricalMeterReadingsByMeterIDAndDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateHistoricalMeterReadingsByMeterIDAndDateOperationCompleted);
            }
            this.InvokeAsync("InitiateHistoricalMeterReadingsByMeterIDAndDate", new object[] {
                        meterIDs,
                        date,
                        responseURL,
                        transactionID}, this.InitiateHistoricalMeterReadingsByMeterIDAndDateOperationCompleted, userState);
        }
        
        private void OnInitiateHistoricalMeterReadingsByMeterIDAndDateOperationCompleted(object arg) {
            if ((this.InitiateHistoricalMeterReadingsByMeterIDAndDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateHistoricalMeterReadingsByMeterIDAndDateCompleted(this, new InitiateHistoricalMeterReadingsByMeterIDAndDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetSupportedMeterEventCodes", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meterEvent[] GetSupportedMeterEventCodes() {
            object[] results = this.Invoke("GetSupportedMeterEventCodes", new object[0]);
            return ((meterEvent[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetSupportedMeterEventCodesAsync() {
            this.GetSupportedMeterEventCodesAsync(null);
        }
        
        /// CodeRemarks
        public void GetSupportedMeterEventCodesAsync(object userState) {
            if ((this.GetSupportedMeterEventCodesOperationCompleted == null)) {
                this.GetSupportedMeterEventCodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSupportedMeterEventCodesOperationCompleted);
            }
            this.InvokeAsync("GetSupportedMeterEventCodes", new object[0], this.GetSupportedMeterEventCodesOperationCompleted, userState);
        }
        
        private void OnGetSupportedMeterEventCodesOperationCompleted(object arg) {
            if ((this.GetSupportedMeterEventCodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSupportedMeterEventCodesCompleted(this, new GetSupportedMeterEventCodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateBillingDeterminants", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateBillingDeterminants(serviceID[] serviceIDs, string billingCycle, System.DateTime billingStartDate, System.DateTime billingEndDate, bool isOffCycle, int kWhLookBack, int kWLookBack, int kWLookForward, string formattedBlockTemplateName, string[] fieldname, string responseURL, string transactionID, expirationTime expTime) {
            object[] results = this.Invoke("InitiateBillingDeterminants", new object[] {
                        serviceIDs,
                        billingCycle,
                        billingStartDate,
                        billingEndDate,
                        isOffCycle,
                        kWhLookBack,
                        kWLookBack,
                        kWLookForward,
                        formattedBlockTemplateName,
                        fieldname,
                        responseURL,
                        transactionID,
                        expTime});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateBillingDeterminantsAsync(serviceID[] serviceIDs, string billingCycle, System.DateTime billingStartDate, System.DateTime billingEndDate, bool isOffCycle, int kWhLookBack, int kWLookBack, int kWLookForward, string formattedBlockTemplateName, string[] fieldname, string responseURL, string transactionID, expirationTime expTime) {
            this.InitiateBillingDeterminantsAsync(serviceIDs, billingCycle, billingStartDate, billingEndDate, isOffCycle, kWhLookBack, kWLookBack, kWLookForward, formattedBlockTemplateName, fieldname, responseURL, transactionID, expTime, null);
        }
        
        /// CodeRemarks
        public void InitiateBillingDeterminantsAsync(serviceID[] serviceIDs, string billingCycle, System.DateTime billingStartDate, System.DateTime billingEndDate, bool isOffCycle, int kWhLookBack, int kWLookBack, int kWLookForward, string formattedBlockTemplateName, string[] fieldname, string responseURL, string transactionID, expirationTime expTime, object userState) {
            if ((this.InitiateBillingDeterminantsOperationCompleted == null)) {
                this.InitiateBillingDeterminantsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateBillingDeterminantsOperationCompleted);
            }
            this.InvokeAsync("InitiateBillingDeterminants", new object[] {
                        serviceIDs,
                        billingCycle,
                        billingStartDate,
                        billingEndDate,
                        isOffCycle,
                        kWhLookBack,
                        kWLookBack,
                        kWLookForward,
                        formattedBlockTemplateName,
                        fieldname,
                        responseURL,
                        transactionID,
                        expTime}, this.InitiateBillingDeterminantsOperationCompleted, userState);
        }
        
        private void OnInitiateBillingDeterminantsOperationCompleted(object arg) {
            if ((this.InitiateBillingDeterminantsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateBillingDeterminantsCompleted(this, new InitiateBillingDeterminantsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/LMDeviceInstalledNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] LMDeviceInstalledNotification(loadManagementDevice[] installedLMDs) {
            object[] results = this.Invoke("LMDeviceInstalledNotification", new object[] {
                        installedLMDs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void LMDeviceInstalledNotificationAsync(loadManagementDevice[] installedLMDs) {
            this.LMDeviceInstalledNotificationAsync(installedLMDs, null);
        }
        
        /// CodeRemarks
        public void LMDeviceInstalledNotificationAsync(loadManagementDevice[] installedLMDs, object userState) {
            if ((this.LMDeviceInstalledNotificationOperationCompleted == null)) {
                this.LMDeviceInstalledNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLMDeviceInstalledNotificationOperationCompleted);
            }
            this.InvokeAsync("LMDeviceInstalledNotification", new object[] {
                        installedLMDs}, this.LMDeviceInstalledNotificationOperationCompleted, userState);
        }
        
        private void OnLMDeviceInstalledNotificationOperationCompleted(object arg) {
            if ((this.LMDeviceInstalledNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LMDeviceInstalledNotificationCompleted(this, new LMDeviceInstalledNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetReadingsByMeterIDAndFieldNameIntervalData", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public intervalData[] GetReadingsByMeterIDAndFieldNameIntervalData(meterID meterID, System.DateTime startDate, System.DateTime endDate, string lastReceived, string[] fieldName) {
            object[] results = this.Invoke("GetReadingsByMeterIDAndFieldNameIntervalData", new object[] {
                        meterID,
                        startDate,
                        endDate,
                        lastReceived,
                        fieldName});
            return ((intervalData[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetReadingsByMeterIDAndFieldNameIntervalDataAsync(meterID meterID, System.DateTime startDate, System.DateTime endDate, string lastReceived, string[] fieldName) {
            this.GetReadingsByMeterIDAndFieldNameIntervalDataAsync(meterID, startDate, endDate, lastReceived, fieldName, null);
        }
        
        /// CodeRemarks
        public void GetReadingsByMeterIDAndFieldNameIntervalDataAsync(meterID meterID, System.DateTime startDate, System.DateTime endDate, string lastReceived, string[] fieldName, object userState) {
            if ((this.GetReadingsByMeterIDAndFieldNameIntervalDataOperationCompleted == null)) {
                this.GetReadingsByMeterIDAndFieldNameIntervalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReadingsByMeterIDAndFieldNameIntervalDataOperationCompleted);
            }
            this.InvokeAsync("GetReadingsByMeterIDAndFieldNameIntervalData", new object[] {
                        meterID,
                        startDate,
                        endDate,
                        lastReceived,
                        fieldName}, this.GetReadingsByMeterIDAndFieldNameIntervalDataOperationCompleted, userState);
        }
        
        private void OnGetReadingsByMeterIDAndFieldNameIntervalDataOperationCompleted(object arg) {
            if ((this.GetReadingsByMeterIDAndFieldNameIntervalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReadingsByMeterIDAndFieldNameIntervalDataCompleted(this, new GetReadingsByMeterIDAndFieldNameIntervalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetLatestReadingsByMeterIDListIntervalData", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public intervalData[] GetLatestReadingsByMeterIDListIntervalData(meterID[] meterIDs, System.DateTime startDate, System.DateTime endDate, string lastReceived, string[] fieldName) {
            object[] results = this.Invoke("GetLatestReadingsByMeterIDListIntervalData", new object[] {
                        meterIDs,
                        startDate,
                        endDate,
                        lastReceived,
                        fieldName});
            return ((intervalData[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetLatestReadingsByMeterIDListIntervalDataAsync(meterID[] meterIDs, System.DateTime startDate, System.DateTime endDate, string lastReceived, string[] fieldName) {
            this.GetLatestReadingsByMeterIDListIntervalDataAsync(meterIDs, startDate, endDate, lastReceived, fieldName, null);
        }
        
        /// CodeRemarks
        public void GetLatestReadingsByMeterIDListIntervalDataAsync(meterID[] meterIDs, System.DateTime startDate, System.DateTime endDate, string lastReceived, string[] fieldName, object userState) {
            if ((this.GetLatestReadingsByMeterIDListIntervalDataOperationCompleted == null)) {
                this.GetLatestReadingsByMeterIDListIntervalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestReadingsByMeterIDListIntervalDataOperationCompleted);
            }
            this.InvokeAsync("GetLatestReadingsByMeterIDListIntervalData", new object[] {
                        meterIDs,
                        startDate,
                        endDate,
                        lastReceived,
                        fieldName}, this.GetLatestReadingsByMeterIDListIntervalDataOperationCompleted, userState);
        }
        
        private void OnGetLatestReadingsByMeterIDListIntervalDataOperationCompleted(object arg) {
            if ((this.GetLatestReadingsByMeterIDListIntervalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestReadingsByMeterIDListIntervalDataCompleted(this, new GetLatestReadingsByMeterIDListIntervalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetLatestReadingsByMeterListIntervalData", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public intervalData[] GetLatestReadingsByMeterListIntervalData(meterID[] meterIDs, System.DateTime startDate, System.DateTime endDate, string[] fieldName, string lastReceived) {
            object[] results = this.Invoke("GetLatestReadingsByMeterListIntervalData", new object[] {
                        meterIDs,
                        startDate,
                        endDate,
                        fieldName,
                        lastReceived});
            return ((intervalData[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetLatestReadingsByMeterListIntervalDataAsync(meterID[] meterIDs, System.DateTime startDate, System.DateTime endDate, string[] fieldName, string lastReceived) {
            this.GetLatestReadingsByMeterListIntervalDataAsync(meterIDs, startDate, endDate, fieldName, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetLatestReadingsByMeterListIntervalDataAsync(meterID[] meterIDs, System.DateTime startDate, System.DateTime endDate, string[] fieldName, string lastReceived, object userState) {
            if ((this.GetLatestReadingsByMeterListIntervalDataOperationCompleted == null)) {
                this.GetLatestReadingsByMeterListIntervalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestReadingsByMeterListIntervalDataOperationCompleted);
            }
            this.InvokeAsync("GetLatestReadingsByMeterListIntervalData", new object[] {
                        meterIDs,
                        startDate,
                        endDate,
                        fieldName,
                        lastReceived}, this.GetLatestReadingsByMeterListIntervalDataOperationCompleted, userState);
        }
        
        private void OnGetLatestReadingsByMeterListIntervalDataOperationCompleted(object arg) {
            if ((this.GetLatestReadingsByMeterListIntervalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestReadingsByMeterListIntervalDataCompleted(this, new GetLatestReadingsByMeterListIntervalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/OutageReasonChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] OutageReasonChangedNotification(string outageEventID, outageReasonCodeList reasonCodes, string transactionID) {
            object[] results = this.Invoke("OutageReasonChangedNotification", new object[] {
                        outageEventID,
                        reasonCodes,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void OutageReasonChangedNotificationAsync(string outageEventID, outageReasonCodeList reasonCodes, string transactionID) {
            this.OutageReasonChangedNotificationAsync(outageEventID, reasonCodes, transactionID, null);
        }
        
        /// CodeRemarks
        public void OutageReasonChangedNotificationAsync(string outageEventID, outageReasonCodeList reasonCodes, string transactionID, object userState) {
            if ((this.OutageReasonChangedNotificationOperationCompleted == null)) {
                this.OutageReasonChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOutageReasonChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("OutageReasonChangedNotification", new object[] {
                        outageEventID,
                        reasonCodes,
                        transactionID}, this.OutageReasonChangedNotificationOperationCompleted, userState);
        }
        
        private void OnOutageReasonChangedNotificationOperationCompleted(object arg) {
            if ((this.OutageReasonChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OutageReasonChangedNotificationCompleted(this, new OutageReasonChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/OutageReasonContainerChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] OutageReasonContainerChangedNotification(outageReasonContainer reasons, string transactionID) {
            object[] results = this.Invoke("OutageReasonContainerChangedNotification", new object[] {
                        reasons,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void OutageReasonContainerChangedNotificationAsync(outageReasonContainer reasons, string transactionID) {
            this.OutageReasonContainerChangedNotificationAsync(reasons, transactionID, null);
        }
        
        /// CodeRemarks
        public void OutageReasonContainerChangedNotificationAsync(outageReasonContainer reasons, string transactionID, object userState) {
            if ((this.OutageReasonContainerChangedNotificationOperationCompleted == null)) {
                this.OutageReasonContainerChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOutageReasonContainerChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("OutageReasonContainerChangedNotification", new object[] {
                        reasons,
                        transactionID}, this.OutageReasonContainerChangedNotificationOperationCompleted, userState);
        }
        
        private void OnOutageReasonContainerChangedNotificationOperationCompleted(object arg) {
            if ((this.OutageReasonContainerChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OutageReasonContainerChangedNotificationCompleted(this, new OutageReasonContainerChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/OutageEventChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] OutageEventChangedNotification(outageEvent[] oEvents) {
            object[] results = this.Invoke("OutageEventChangedNotification", new object[] {
                        oEvents});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void OutageEventChangedNotificationAsync(outageEvent[] oEvents) {
            this.OutageEventChangedNotificationAsync(oEvents, null);
        }
        
        /// CodeRemarks
        public void OutageEventChangedNotificationAsync(outageEvent[] oEvents, object userState) {
            if ((this.OutageEventChangedNotificationOperationCompleted == null)) {
                this.OutageEventChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOutageEventChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("OutageEventChangedNotification", new object[] {
                        oEvents}, this.OutageEventChangedNotificationOperationCompleted, userState);
        }
        
        private void OnOutageEventChangedNotificationOperationCompleted(object arg) {
            if ((this.OutageEventChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OutageEventChangedNotificationCompleted(this, new OutageEventChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InsertInHomeDisplayInIHDGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InsertInHomeDisplayInIHDGroup(string[] inHomeDisplayIDs, string IHDGroupID) {
            object[] results = this.Invoke("InsertInHomeDisplayInIHDGroup", new object[] {
                        inHomeDisplayIDs,
                        IHDGroupID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InsertInHomeDisplayInIHDGroupAsync(string[] inHomeDisplayIDs, string IHDGroupID) {
            this.InsertInHomeDisplayInIHDGroupAsync(inHomeDisplayIDs, IHDGroupID, null);
        }
        
        /// CodeRemarks
        public void InsertInHomeDisplayInIHDGroupAsync(string[] inHomeDisplayIDs, string IHDGroupID, object userState) {
            if ((this.InsertInHomeDisplayInIHDGroupOperationCompleted == null)) {
                this.InsertInHomeDisplayInIHDGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertInHomeDisplayInIHDGroupOperationCompleted);
            }
            this.InvokeAsync("InsertInHomeDisplayInIHDGroup", new object[] {
                        inHomeDisplayIDs,
                        IHDGroupID}, this.InsertInHomeDisplayInIHDGroupOperationCompleted, userState);
        }
        
        private void OnInsertInHomeDisplayInIHDGroupOperationCompleted(object arg) {
            if ((this.InsertInHomeDisplayInIHDGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertInHomeDisplayInIHDGroupCompleted(this, new InsertInHomeDisplayInIHDGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/RemoveInHomeDisplayFromIHDGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] RemoveInHomeDisplayFromIHDGroup(string[] inHomeDisplays, string IHDGroupID) {
            object[] results = this.Invoke("RemoveInHomeDisplayFromIHDGroup", new object[] {
                        inHomeDisplays,
                        IHDGroupID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void RemoveInHomeDisplayFromIHDGroupAsync(string[] inHomeDisplays, string IHDGroupID) {
            this.RemoveInHomeDisplayFromIHDGroupAsync(inHomeDisplays, IHDGroupID, null);
        }
        
        /// CodeRemarks
        public void RemoveInHomeDisplayFromIHDGroupAsync(string[] inHomeDisplays, string IHDGroupID, object userState) {
            if ((this.RemoveInHomeDisplayFromIHDGroupOperationCompleted == null)) {
                this.RemoveInHomeDisplayFromIHDGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveInHomeDisplayFromIHDGroupOperationCompleted);
            }
            this.InvokeAsync("RemoveInHomeDisplayFromIHDGroup", new object[] {
                        inHomeDisplays,
                        IHDGroupID}, this.RemoveInHomeDisplayFromIHDGroupOperationCompleted, userState);
        }
        
        private void OnRemoveInHomeDisplayFromIHDGroupOperationCompleted(object arg) {
            if ((this.RemoveInHomeDisplayFromIHDGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveInHomeDisplayFromIHDGroupCompleted(this, new RemoveInHomeDisplayFromIHDGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CancelCriticalPeakPriceEvent", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CancelCriticalPeakPriceEvent(criticalPeakPriceEvent criticalPeakPriceEvent, HANDeviceID deviceID, string transactionID, HANInterfaceID interfaceID, string responseURL) {
            object[] results = this.Invoke("CancelCriticalPeakPriceEvent", new object[] {
                        criticalPeakPriceEvent,
                        deviceID,
                        transactionID,
                        interfaceID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CancelCriticalPeakPriceEventAsync(criticalPeakPriceEvent criticalPeakPriceEvent, HANDeviceID deviceID, string transactionID, HANInterfaceID interfaceID, string responseURL) {
            this.CancelCriticalPeakPriceEventAsync(criticalPeakPriceEvent, deviceID, transactionID, interfaceID, responseURL, null);
        }
        
        /// CodeRemarks
        public void CancelCriticalPeakPriceEventAsync(criticalPeakPriceEvent criticalPeakPriceEvent, HANDeviceID deviceID, string transactionID, HANInterfaceID interfaceID, string responseURL, object userState) {
            if ((this.CancelCriticalPeakPriceEventOperationCompleted == null)) {
                this.CancelCriticalPeakPriceEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelCriticalPeakPriceEventOperationCompleted);
            }
            this.InvokeAsync("CancelCriticalPeakPriceEvent", new object[] {
                        criticalPeakPriceEvent,
                        deviceID,
                        transactionID,
                        interfaceID,
                        responseURL}, this.CancelCriticalPeakPriceEventOperationCompleted, userState);
        }
        
        private void OnCancelCriticalPeakPriceEventOperationCompleted(object arg) {
            if ((this.CancelCriticalPeakPriceEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelCriticalPeakPriceEventCompleted(this, new CancelCriticalPeakPriceEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CancelCriticalPeakPriceEventToGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CancelCriticalPeakPriceEventToGroup(criticalPeakPriceEvent criticalPeakPriceEvent, HANGroupID groupID, string transactionID, string responseURL) {
            object[] results = this.Invoke("CancelCriticalPeakPriceEventToGroup", new object[] {
                        criticalPeakPriceEvent,
                        groupID,
                        transactionID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CancelCriticalPeakPriceEventToGroupAsync(criticalPeakPriceEvent criticalPeakPriceEvent, HANGroupID groupID, string transactionID, string responseURL) {
            this.CancelCriticalPeakPriceEventToGroupAsync(criticalPeakPriceEvent, groupID, transactionID, responseURL, null);
        }
        
        /// CodeRemarks
        public void CancelCriticalPeakPriceEventToGroupAsync(criticalPeakPriceEvent criticalPeakPriceEvent, HANGroupID groupID, string transactionID, string responseURL, object userState) {
            if ((this.CancelCriticalPeakPriceEventToGroupOperationCompleted == null)) {
                this.CancelCriticalPeakPriceEventToGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelCriticalPeakPriceEventToGroupOperationCompleted);
            }
            this.InvokeAsync("CancelCriticalPeakPriceEventToGroup", new object[] {
                        criticalPeakPriceEvent,
                        groupID,
                        transactionID,
                        responseURL}, this.CancelCriticalPeakPriceEventToGroupOperationCompleted, userState);
        }
        
        private void OnCancelCriticalPeakPriceEventToGroupOperationCompleted(object arg) {
            if ((this.CancelCriticalPeakPriceEventToGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelCriticalPeakPriceEventToGroupCompleted(this, new CancelCriticalPeakPriceEventToGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CriticalPeakPriceEventNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CriticalPeakPriceEventNotification(criticalPeakPriceEventStatus[] eventHistory, string transactionID) {
            object[] results = this.Invoke("CriticalPeakPriceEventNotification", new object[] {
                        eventHistory,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CriticalPeakPriceEventNotificationAsync(criticalPeakPriceEventStatus[] eventHistory, string transactionID) {
            this.CriticalPeakPriceEventNotificationAsync(eventHistory, transactionID, null);
        }
        
        /// CodeRemarks
        public void CriticalPeakPriceEventNotificationAsync(criticalPeakPriceEventStatus[] eventHistory, string transactionID, object userState) {
            if ((this.CriticalPeakPriceEventNotificationOperationCompleted == null)) {
                this.CriticalPeakPriceEventNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCriticalPeakPriceEventNotificationOperationCompleted);
            }
            this.InvokeAsync("CriticalPeakPriceEventNotification", new object[] {
                        eventHistory,
                        transactionID}, this.CriticalPeakPriceEventNotificationOperationCompleted, userState);
        }
        
        private void OnCriticalPeakPriceEventNotificationOperationCompleted(object arg) {
            if ((this.CriticalPeakPriceEventNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CriticalPeakPriceEventNotificationCompleted(this, new CriticalPeakPriceEventNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateCriticalPeakPriceEvent", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateCriticalPeakPriceEvent(criticalPeakPriceEvent criticalPeakPriceEvent, HANDeviceID deviceID, string transactionID, HANInterfaceID interfaceID, string responseURL) {
            object[] results = this.Invoke("InitiateCriticalPeakPriceEvent", new object[] {
                        criticalPeakPriceEvent,
                        deviceID,
                        transactionID,
                        interfaceID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateCriticalPeakPriceEventAsync(criticalPeakPriceEvent criticalPeakPriceEvent, HANDeviceID deviceID, string transactionID, HANInterfaceID interfaceID, string responseURL) {
            this.InitiateCriticalPeakPriceEventAsync(criticalPeakPriceEvent, deviceID, transactionID, interfaceID, responseURL, null);
        }
        
        /// CodeRemarks
        public void InitiateCriticalPeakPriceEventAsync(criticalPeakPriceEvent criticalPeakPriceEvent, HANDeviceID deviceID, string transactionID, HANInterfaceID interfaceID, string responseURL, object userState) {
            if ((this.InitiateCriticalPeakPriceEventOperationCompleted == null)) {
                this.InitiateCriticalPeakPriceEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateCriticalPeakPriceEventOperationCompleted);
            }
            this.InvokeAsync("InitiateCriticalPeakPriceEvent", new object[] {
                        criticalPeakPriceEvent,
                        deviceID,
                        transactionID,
                        interfaceID,
                        responseURL}, this.InitiateCriticalPeakPriceEventOperationCompleted, userState);
        }
        
        private void OnInitiateCriticalPeakPriceEventOperationCompleted(object arg) {
            if ((this.InitiateCriticalPeakPriceEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateCriticalPeakPriceEventCompleted(this, new InitiateCriticalPeakPriceEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateCriticalPeakPriceEventToGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateCriticalPeakPriceEventToGroup(criticalPeakPriceEvent criticalPeakPriceEvent, HANGroupID groupID, string transactionID, string responseURL) {
            object[] results = this.Invoke("InitiateCriticalPeakPriceEventToGroup", new object[] {
                        criticalPeakPriceEvent,
                        groupID,
                        transactionID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateCriticalPeakPriceEventToGroupAsync(criticalPeakPriceEvent criticalPeakPriceEvent, HANGroupID groupID, string transactionID, string responseURL) {
            this.InitiateCriticalPeakPriceEventToGroupAsync(criticalPeakPriceEvent, groupID, transactionID, responseURL, null);
        }
        
        /// CodeRemarks
        public void InitiateCriticalPeakPriceEventToGroupAsync(criticalPeakPriceEvent criticalPeakPriceEvent, HANGroupID groupID, string transactionID, string responseURL, object userState) {
            if ((this.InitiateCriticalPeakPriceEventToGroupOperationCompleted == null)) {
                this.InitiateCriticalPeakPriceEventToGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateCriticalPeakPriceEventToGroupOperationCompleted);
            }
            this.InvokeAsync("InitiateCriticalPeakPriceEventToGroup", new object[] {
                        criticalPeakPriceEvent,
                        groupID,
                        transactionID,
                        responseURL}, this.InitiateCriticalPeakPriceEventToGroupOperationCompleted, userState);
        }
        
        private void OnInitiateCriticalPeakPriceEventToGroupOperationCompleted(object arg) {
            if ((this.InitiateCriticalPeakPriceEventToGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateCriticalPeakPriceEventToGroupCompleted(this, new InitiateCriticalPeakPriceEventToGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateLoadManagementEvent", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateLoadManagementEvent(loadManagementEvent theLMEvent, string transactionID, string responseURL) {
            object[] results = this.Invoke("InitiateLoadManagementEvent", new object[] {
                        theLMEvent,
                        transactionID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateLoadManagementEventAsync(loadManagementEvent theLMEvent, string transactionID, string responseURL) {
            this.InitiateLoadManagementEventAsync(theLMEvent, transactionID, responseURL, null);
        }
        
        /// CodeRemarks
        public void InitiateLoadManagementEventAsync(loadManagementEvent theLMEvent, string transactionID, string responseURL, object userState) {
            if ((this.InitiateLoadManagementEventOperationCompleted == null)) {
                this.InitiateLoadManagementEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateLoadManagementEventOperationCompleted);
            }
            this.InvokeAsync("InitiateLoadManagementEvent", new object[] {
                        theLMEvent,
                        transactionID,
                        responseURL}, this.InitiateLoadManagementEventOperationCompleted, userState);
        }
        
        private void OnInitiateLoadManagementEventOperationCompleted(object arg) {
            if ((this.InitiateLoadManagementEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateLoadManagementEventCompleted(this, new InitiateLoadManagementEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateLoadManagementEvents", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateLoadManagementEvents(loadManagementEvent[] theLMEvents, string transactionID, string responseURL) {
            object[] results = this.Invoke("InitiateLoadManagementEvents", new object[] {
                        theLMEvents,
                        transactionID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateLoadManagementEventsAsync(loadManagementEvent[] theLMEvents, string transactionID, string responseURL) {
            this.InitiateLoadManagementEventsAsync(theLMEvents, transactionID, responseURL, null);
        }
        
        /// CodeRemarks
        public void InitiateLoadManagementEventsAsync(loadManagementEvent[] theLMEvents, string transactionID, string responseURL, object userState) {
            if ((this.InitiateLoadManagementEventsOperationCompleted == null)) {
                this.InitiateLoadManagementEventsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateLoadManagementEventsOperationCompleted);
            }
            this.InvokeAsync("InitiateLoadManagementEvents", new object[] {
                        theLMEvents,
                        transactionID,
                        responseURL}, this.InitiateLoadManagementEventsOperationCompleted, userState);
        }
        
        private void OnInitiateLoadManagementEventsOperationCompleted(object arg) {
            if ((this.InitiateLoadManagementEventsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateLoadManagementEventsCompleted(this, new InitiateLoadManagementEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiatePowerFactorManagementEvent", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiatePowerFactorManagementEvent(powerFactorManagementEvent thePFMEvent, string transactionID, string responseURL) {
            object[] results = this.Invoke("InitiatePowerFactorManagementEvent", new object[] {
                        thePFMEvent,
                        transactionID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiatePowerFactorManagementEventAsync(powerFactorManagementEvent thePFMEvent, string transactionID, string responseURL) {
            this.InitiatePowerFactorManagementEventAsync(thePFMEvent, transactionID, responseURL, null);
        }
        
        /// CodeRemarks
        public void InitiatePowerFactorManagementEventAsync(powerFactorManagementEvent thePFMEvent, string transactionID, string responseURL, object userState) {
            if ((this.InitiatePowerFactorManagementEventOperationCompleted == null)) {
                this.InitiatePowerFactorManagementEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiatePowerFactorManagementEventOperationCompleted);
            }
            this.InvokeAsync("InitiatePowerFactorManagementEvent", new object[] {
                        thePFMEvent,
                        transactionID,
                        responseURL}, this.InitiatePowerFactorManagementEventOperationCompleted, userState);
        }
        
        private void OnInitiatePowerFactorManagementEventOperationCompleted(object arg) {
            if ((this.InitiatePowerFactorManagementEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiatePowerFactorManagementEventCompleted(this, new InitiatePowerFactorManagementEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiatePlannedOutage", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiatePlannedOutage(meterID[] meterIDs, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("InitiatePlannedOutage", new object[] {
                        meterIDs,
                        startDate,
                        endDate});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiatePlannedOutageAsync(meterID[] meterIDs, System.DateTime startDate, System.DateTime endDate) {
            this.InitiatePlannedOutageAsync(meterIDs, startDate, endDate, null);
        }
        
        /// CodeRemarks
        public void InitiatePlannedOutageAsync(meterID[] meterIDs, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.InitiatePlannedOutageOperationCompleted == null)) {
                this.InitiatePlannedOutageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiatePlannedOutageOperationCompleted);
            }
            this.InvokeAsync("InitiatePlannedOutage", new object[] {
                        meterIDs,
                        startDate,
                        endDate}, this.InitiatePlannedOutageOperationCompleted, userState);
        }
        
        private void OnInitiatePlannedOutageOperationCompleted(object arg) {
            if ((this.InitiatePlannedOutageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiatePlannedOutageCompleted(this, new InitiatePlannedOutageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CancelPlannedOutage", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CancelPlannedOutage(meterID[] meterIDs) {
            object[] results = this.Invoke("CancelPlannedOutage", new object[] {
                        meterIDs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CancelPlannedOutageAsync(meterID[] meterIDs) {
            this.CancelPlannedOutageAsync(meterIDs, null);
        }
        
        /// CodeRemarks
        public void CancelPlannedOutageAsync(meterID[] meterIDs, object userState) {
            if ((this.CancelPlannedOutageOperationCompleted == null)) {
                this.CancelPlannedOutageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelPlannedOutageOperationCompleted);
            }
            this.InvokeAsync("CancelPlannedOutage", new object[] {
                        meterIDs}, this.CancelPlannedOutageOperationCompleted, userState);
        }
        
        private void OnCancelPlannedOutageOperationCompleted(object arg) {
            if ((this.CancelPlannedOutageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelPlannedOutageCompleted(this, new CancelPlannedOutageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateUsageMonitoring", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateUsageMonitoring(meterID[] meterIDs, string responseURL, string transactionID) {
            object[] results = this.Invoke("InitiateUsageMonitoring", new object[] {
                        meterIDs,
                        responseURL,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateUsageMonitoringAsync(meterID[] meterIDs, string responseURL, string transactionID) {
            this.InitiateUsageMonitoringAsync(meterIDs, responseURL, transactionID, null);
        }
        
        /// CodeRemarks
        public void InitiateUsageMonitoringAsync(meterID[] meterIDs, string responseURL, string transactionID, object userState) {
            if ((this.InitiateUsageMonitoringOperationCompleted == null)) {
                this.InitiateUsageMonitoringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateUsageMonitoringOperationCompleted);
            }
            this.InvokeAsync("InitiateUsageMonitoring", new object[] {
                        meterIDs,
                        responseURL,
                        transactionID}, this.InitiateUsageMonitoringOperationCompleted, userState);
        }
        
        private void OnInitiateUsageMonitoringOperationCompleted(object arg) {
            if ((this.InitiateUsageMonitoringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateUsageMonitoringCompleted(this, new InitiateUsageMonitoringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CancelUsageMonitoring", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CancelUsageMonitoring(meterID[] meterIDs) {
            object[] results = this.Invoke("CancelUsageMonitoring", new object[] {
                        meterIDs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CancelUsageMonitoringAsync(meterID[] meterIDs) {
            this.CancelUsageMonitoringAsync(meterIDs, null);
        }
        
        /// CodeRemarks
        public void CancelUsageMonitoringAsync(meterID[] meterIDs, object userState) {
            if ((this.CancelUsageMonitoringOperationCompleted == null)) {
                this.CancelUsageMonitoringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelUsageMonitoringOperationCompleted);
            }
            this.InvokeAsync("CancelUsageMonitoring", new object[] {
                        meterIDs}, this.CancelUsageMonitoringOperationCompleted, userState);
        }
        
        private void OnCancelUsageMonitoringOperationCompleted(object arg) {
            if ((this.CancelUsageMonitoringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelUsageMonitoringCompleted(this, new CancelUsageMonitoringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateDisconnectedStatus", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateDisconnectedStatus(meterID[] meterIDs) {
            object[] results = this.Invoke("InitiateDisconnectedStatus", new object[] {
                        meterIDs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateDisconnectedStatusAsync(meterID[] meterIDs) {
            this.InitiateDisconnectedStatusAsync(meterIDs, null);
        }
        
        /// CodeRemarks
        public void InitiateDisconnectedStatusAsync(meterID[] meterIDs, object userState) {
            if ((this.InitiateDisconnectedStatusOperationCompleted == null)) {
                this.InitiateDisconnectedStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateDisconnectedStatusOperationCompleted);
            }
            this.InvokeAsync("InitiateDisconnectedStatus", new object[] {
                        meterIDs}, this.InitiateDisconnectedStatusOperationCompleted, userState);
        }
        
        private void OnInitiateDisconnectedStatusOperationCompleted(object arg) {
            if ((this.InitiateDisconnectedStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateDisconnectedStatusCompleted(this, new InitiateDisconnectedStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CancelDisconnectedStatus", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CancelDisconnectedStatus(meterID[] meterIDs) {
            object[] results = this.Invoke("CancelDisconnectedStatus", new object[] {
                        meterIDs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CancelDisconnectedStatusAsync(meterID[] meterIDs) {
            this.CancelDisconnectedStatusAsync(meterIDs, null);
        }
        
        /// CodeRemarks
        public void CancelDisconnectedStatusAsync(meterID[] meterIDs, object userState) {
            if ((this.CancelDisconnectedStatusOperationCompleted == null)) {
                this.CancelDisconnectedStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelDisconnectedStatusOperationCompleted);
            }
            this.InvokeAsync("CancelDisconnectedStatus", new object[] {
                        meterIDs}, this.CancelDisconnectedStatusOperationCompleted, userState);
        }
        
        private void OnCancelDisconnectedStatusOperationCompleted(object arg) {
            if ((this.CancelDisconnectedStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelDisconnectedStatusCompleted(this, new CancelDisconnectedStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateMeterReadingsByMeterID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateMeterReadingsByMeterID(meterID[] meterIDs, string responseURL, string transactionID, expirationTime expTime) {
            object[] results = this.Invoke("InitiateMeterReadingsByMeterID", new object[] {
                        meterIDs,
                        responseURL,
                        transactionID,
                        expTime});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateMeterReadingsByMeterIDAsync(meterID[] meterIDs, string responseURL, string transactionID, expirationTime expTime) {
            this.InitiateMeterReadingsByMeterIDAsync(meterIDs, responseURL, transactionID, expTime, null);
        }
        
        /// CodeRemarks
        public void InitiateMeterReadingsByMeterIDAsync(meterID[] meterIDs, string responseURL, string transactionID, expirationTime expTime, object userState) {
            if ((this.InitiateMeterReadingsByMeterIDOperationCompleted == null)) {
                this.InitiateMeterReadingsByMeterIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateMeterReadingsByMeterIDOperationCompleted);
            }
            this.InvokeAsync("InitiateMeterReadingsByMeterID", new object[] {
                        meterIDs,
                        responseURL,
                        transactionID,
                        expTime}, this.InitiateMeterReadingsByMeterIDOperationCompleted, userState);
        }
        
        private void OnInitiateMeterReadingsByMeterIDOperationCompleted(object arg) {
            if ((this.InitiateMeterReadingsByMeterIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateMeterReadingsByMeterIDCompleted(this, new InitiateMeterReadingsByMeterIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/EstablishMeterGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] EstablishMeterGroup(meterGroup meterGroup, serviceType serviceType) {
            object[] results = this.Invoke("EstablishMeterGroup", new object[] {
                        meterGroup,
                        serviceType});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void EstablishMeterGroupAsync(meterGroup meterGroup, serviceType serviceType) {
            this.EstablishMeterGroupAsync(meterGroup, serviceType, null);
        }
        
        /// CodeRemarks
        public void EstablishMeterGroupAsync(meterGroup meterGroup, serviceType serviceType, object userState) {
            if ((this.EstablishMeterGroupOperationCompleted == null)) {
                this.EstablishMeterGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEstablishMeterGroupOperationCompleted);
            }
            this.InvokeAsync("EstablishMeterGroup", new object[] {
                        meterGroup,
                        serviceType}, this.EstablishMeterGroupOperationCompleted, userState);
        }
        
        private void OnEstablishMeterGroupOperationCompleted(object arg) {
            if ((this.EstablishMeterGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EstablishMeterGroupCompleted(this, new EstablishMeterGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/EstablishHANDeviceGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] EstablishHANDeviceGroup(HANGroupID groupID, HANDeviceID[] groupMembers) {
            object[] results = this.Invoke("EstablishHANDeviceGroup", new object[] {
                        groupID,
                        groupMembers});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void EstablishHANDeviceGroupAsync(HANGroupID groupID, HANDeviceID[] groupMembers) {
            this.EstablishHANDeviceGroupAsync(groupID, groupMembers, null);
        }
        
        /// CodeRemarks
        public void EstablishHANDeviceGroupAsync(HANGroupID groupID, HANDeviceID[] groupMembers, object userState) {
            if ((this.EstablishHANDeviceGroupOperationCompleted == null)) {
                this.EstablishHANDeviceGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEstablishHANDeviceGroupOperationCompleted);
            }
            this.InvokeAsync("EstablishHANDeviceGroup", new object[] {
                        groupID,
                        groupMembers}, this.EstablishHANDeviceGroupOperationCompleted, userState);
        }
        
        private void OnEstablishHANDeviceGroupOperationCompleted(object arg) {
            if ((this.EstablishHANDeviceGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EstablishHANDeviceGroupCompleted(this, new EstablishHANDeviceGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InsertIntoHANDeviceGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InsertIntoHANDeviceGroup(HANGroupID groupID, HANDeviceID[] groupMembers) {
            object[] results = this.Invoke("InsertIntoHANDeviceGroup", new object[] {
                        groupID,
                        groupMembers});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InsertIntoHANDeviceGroupAsync(HANGroupID groupID, HANDeviceID[] groupMembers) {
            this.InsertIntoHANDeviceGroupAsync(groupID, groupMembers, null);
        }
        
        /// CodeRemarks
        public void InsertIntoHANDeviceGroupAsync(HANGroupID groupID, HANDeviceID[] groupMembers, object userState) {
            if ((this.InsertIntoHANDeviceGroupOperationCompleted == null)) {
                this.InsertIntoHANDeviceGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertIntoHANDeviceGroupOperationCompleted);
            }
            this.InvokeAsync("InsertIntoHANDeviceGroup", new object[] {
                        groupID,
                        groupMembers}, this.InsertIntoHANDeviceGroupOperationCompleted, userState);
        }
        
        private void OnInsertIntoHANDeviceGroupOperationCompleted(object arg) {
            if ((this.InsertIntoHANDeviceGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertIntoHANDeviceGroupCompleted(this, new InsertIntoHANDeviceGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/RemoveFromHANDeviceGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] RemoveFromHANDeviceGroup(HANGroupID groupID, HANDeviceID[] groupMembers) {
            object[] results = this.Invoke("RemoveFromHANDeviceGroup", new object[] {
                        groupID,
                        groupMembers});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void RemoveFromHANDeviceGroupAsync(HANGroupID groupID, HANDeviceID[] groupMembers) {
            this.RemoveFromHANDeviceGroupAsync(groupID, groupMembers, null);
        }
        
        /// CodeRemarks
        public void RemoveFromHANDeviceGroupAsync(HANGroupID groupID, HANDeviceID[] groupMembers, object userState) {
            if ((this.RemoveFromHANDeviceGroupOperationCompleted == null)) {
                this.RemoveFromHANDeviceGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveFromHANDeviceGroupOperationCompleted);
            }
            this.InvokeAsync("RemoveFromHANDeviceGroup", new object[] {
                        groupID,
                        groupMembers}, this.RemoveFromHANDeviceGroupOperationCompleted, userState);
        }
        
        private void OnRemoveFromHANDeviceGroupOperationCompleted(object arg) {
            if ((this.RemoveFromHANDeviceGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveFromHANDeviceGroupCompleted(this, new RemoveFromHANDeviceGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetHANDeviceGroupNames", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetHANDeviceGroupNames() {
            object[] results = this.Invoke("GetHANDeviceGroupNames", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetHANDeviceGroupNamesAsync() {
            this.GetHANDeviceGroupNamesAsync(null);
        }
        
        /// CodeRemarks
        public void GetHANDeviceGroupNamesAsync(object userState) {
            if ((this.GetHANDeviceGroupNamesOperationCompleted == null)) {
                this.GetHANDeviceGroupNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHANDeviceGroupNamesOperationCompleted);
            }
            this.InvokeAsync("GetHANDeviceGroupNames", new object[0], this.GetHANDeviceGroupNamesOperationCompleted, userState);
        }
        
        private void OnGetHANDeviceGroupNamesOperationCompleted(object arg) {
            if ((this.GetHANDeviceGroupNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHANDeviceGroupNamesCompleted(this, new GetHANDeviceGroupNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetHANDeviceGroupMembers", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HANDeviceGroup GetHANDeviceGroupMembers(string HANDeviceGroupName) {
            object[] results = this.Invoke("GetHANDeviceGroupMembers", new object[] {
                        HANDeviceGroupName});
            return ((HANDeviceGroup)(results[0]));
        }
        
        /// CodeRemarks
        public void GetHANDeviceGroupMembersAsync(string HANDeviceGroupName) {
            this.GetHANDeviceGroupMembersAsync(HANDeviceGroupName, null);
        }
        
        /// CodeRemarks
        public void GetHANDeviceGroupMembersAsync(string HANDeviceGroupName, object userState) {
            if ((this.GetHANDeviceGroupMembersOperationCompleted == null)) {
                this.GetHANDeviceGroupMembersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHANDeviceGroupMembersOperationCompleted);
            }
            this.InvokeAsync("GetHANDeviceGroupMembers", new object[] {
                        HANDeviceGroupName}, this.GetHANDeviceGroupMembersOperationCompleted, userState);
        }
        
        private void OnGetHANDeviceGroupMembersOperationCompleted(object arg) {
            if ((this.GetHANDeviceGroupMembersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHANDeviceGroupMembersCompleted(this, new GetHANDeviceGroupMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetHANDeviceGroupNamesByHANDeviceID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetHANDeviceGroupNamesByHANDeviceID(HANDeviceID deviceID) {
            object[] results = this.Invoke("GetHANDeviceGroupNamesByHANDeviceID", new object[] {
                        deviceID});
            return ((string[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetHANDeviceGroupNamesByHANDeviceIDAsync(HANDeviceID deviceID) {
            this.GetHANDeviceGroupNamesByHANDeviceIDAsync(deviceID, null);
        }
        
        /// CodeRemarks
        public void GetHANDeviceGroupNamesByHANDeviceIDAsync(HANDeviceID deviceID, object userState) {
            if ((this.GetHANDeviceGroupNamesByHANDeviceIDOperationCompleted == null)) {
                this.GetHANDeviceGroupNamesByHANDeviceIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHANDeviceGroupNamesByHANDeviceIDOperationCompleted);
            }
            this.InvokeAsync("GetHANDeviceGroupNamesByHANDeviceID", new object[] {
                        deviceID}, this.GetHANDeviceGroupNamesByHANDeviceIDOperationCompleted, userState);
        }
        
        private void OnGetHANDeviceGroupNamesByHANDeviceIDOperationCompleted(object arg) {
            if ((this.GetHANDeviceGroupNamesByHANDeviceIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHANDeviceGroupNamesByHANDeviceIDCompleted(this, new GetHANDeviceGroupNamesByHANDeviceIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/DeleteMeterGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] DeleteMeterGroup(string meterGroupID, serviceType serviceType) {
            object[] results = this.Invoke("DeleteMeterGroup", new object[] {
                        meterGroupID,
                        serviceType});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void DeleteMeterGroupAsync(string meterGroupID, serviceType serviceType) {
            this.DeleteMeterGroupAsync(meterGroupID, serviceType, null);
        }
        
        /// CodeRemarks
        public void DeleteMeterGroupAsync(string meterGroupID, serviceType serviceType, object userState) {
            if ((this.DeleteMeterGroupOperationCompleted == null)) {
                this.DeleteMeterGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMeterGroupOperationCompleted);
            }
            this.InvokeAsync("DeleteMeterGroup", new object[] {
                        meterGroupID,
                        serviceType}, this.DeleteMeterGroupOperationCompleted, userState);
        }
        
        private void OnDeleteMeterGroupOperationCompleted(object arg) {
            if ((this.DeleteMeterGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMeterGroupCompleted(this, new DeleteMeterGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InsertMeterInMeterGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InsertMeterInMeterGroup(meterID[] meterIDs, string meterGroupID) {
            object[] results = this.Invoke("InsertMeterInMeterGroup", new object[] {
                        meterIDs,
                        meterGroupID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InsertMeterInMeterGroupAsync(meterID[] meterIDs, string meterGroupID) {
            this.InsertMeterInMeterGroupAsync(meterIDs, meterGroupID, null);
        }
        
        /// CodeRemarks
        public void InsertMeterInMeterGroupAsync(meterID[] meterIDs, string meterGroupID, object userState) {
            if ((this.InsertMeterInMeterGroupOperationCompleted == null)) {
                this.InsertMeterInMeterGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertMeterInMeterGroupOperationCompleted);
            }
            this.InvokeAsync("InsertMeterInMeterGroup", new object[] {
                        meterIDs,
                        meterGroupID}, this.InsertMeterInMeterGroupOperationCompleted, userState);
        }
        
        private void OnInsertMeterInMeterGroupOperationCompleted(object arg) {
            if ((this.InsertMeterInMeterGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertMeterInMeterGroupCompleted(this, new InsertMeterInMeterGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/RemoveMetersFromMeterGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] RemoveMetersFromMeterGroup(meterID[] meterIDs, string meterGroupID) {
            object[] results = this.Invoke("RemoveMetersFromMeterGroup", new object[] {
                        meterIDs,
                        meterGroupID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void RemoveMetersFromMeterGroupAsync(meterID[] meterIDs, string meterGroupID) {
            this.RemoveMetersFromMeterGroupAsync(meterIDs, meterGroupID, null);
        }
        
        /// CodeRemarks
        public void RemoveMetersFromMeterGroupAsync(meterID[] meterIDs, string meterGroupID, object userState) {
            if ((this.RemoveMetersFromMeterGroupOperationCompleted == null)) {
                this.RemoveMetersFromMeterGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveMetersFromMeterGroupOperationCompleted);
            }
            this.InvokeAsync("RemoveMetersFromMeterGroup", new object[] {
                        meterIDs,
                        meterGroupID}, this.RemoveMetersFromMeterGroupOperationCompleted, userState);
        }
        
        private void OnRemoveMetersFromMeterGroupOperationCompleted(object arg) {
            if ((this.RemoveMetersFromMeterGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveMetersFromMeterGroupCompleted(this, new RemoveMetersFromMeterGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InsertMeterInConfigurationGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InsertMeterInConfigurationGroup(meterID[] meterIDs, string meterGroupID, string transactionID, string responseURL) {
            object[] results = this.Invoke("InsertMeterInConfigurationGroup", new object[] {
                        meterIDs,
                        meterGroupID,
                        transactionID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InsertMeterInConfigurationGroupAsync(meterID[] meterIDs, string meterGroupID, string transactionID, string responseURL) {
            this.InsertMeterInConfigurationGroupAsync(meterIDs, meterGroupID, transactionID, responseURL, null);
        }
        
        /// CodeRemarks
        public void InsertMeterInConfigurationGroupAsync(meterID[] meterIDs, string meterGroupID, string transactionID, string responseURL, object userState) {
            if ((this.InsertMeterInConfigurationGroupOperationCompleted == null)) {
                this.InsertMeterInConfigurationGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertMeterInConfigurationGroupOperationCompleted);
            }
            this.InvokeAsync("InsertMeterInConfigurationGroup", new object[] {
                        meterIDs,
                        meterGroupID,
                        transactionID,
                        responseURL}, this.InsertMeterInConfigurationGroupOperationCompleted, userState);
        }
        
        private void OnInsertMeterInConfigurationGroupOperationCompleted(object arg) {
            if ((this.InsertMeterInConfigurationGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertMeterInConfigurationGroupCompleted(this, new InsertMeterInConfigurationGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/RemoveMetersFromConfigurationGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] RemoveMetersFromConfigurationGroup(meterID[] meterIDs, string meterGroupID) {
            object[] results = this.Invoke("RemoveMetersFromConfigurationGroup", new object[] {
                        meterIDs,
                        meterGroupID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void RemoveMetersFromConfigurationGroupAsync(meterID[] meterIDs, string meterGroupID) {
            this.RemoveMetersFromConfigurationGroupAsync(meterIDs, meterGroupID, null);
        }
        
        /// CodeRemarks
        public void RemoveMetersFromConfigurationGroupAsync(meterID[] meterIDs, string meterGroupID, object userState) {
            if ((this.RemoveMetersFromConfigurationGroupOperationCompleted == null)) {
                this.RemoveMetersFromConfigurationGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveMetersFromConfigurationGroupOperationCompleted);
            }
            this.InvokeAsync("RemoveMetersFromConfigurationGroup", new object[] {
                        meterIDs,
                        meterGroupID}, this.RemoveMetersFromConfigurationGroupOperationCompleted, userState);
        }
        
        private void OnRemoveMetersFromConfigurationGroupOperationCompleted(object arg) {
            if ((this.RemoveMetersFromConfigurationGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveMetersFromConfigurationGroupCompleted(this, new RemoveMetersFromConfigurationGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateGroupMeterReading", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateGroupMeterReading(string meterGroupName, string responseURL, string transactionID, serviceType serviceType, expirationTime expTime) {
            object[] results = this.Invoke("InitiateGroupMeterReading", new object[] {
                        meterGroupName,
                        responseURL,
                        transactionID,
                        serviceType,
                        expTime});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateGroupMeterReadingAsync(string meterGroupName, string responseURL, string transactionID, serviceType serviceType, expirationTime expTime) {
            this.InitiateGroupMeterReadingAsync(meterGroupName, responseURL, transactionID, serviceType, expTime, null);
        }
        
        /// CodeRemarks
        public void InitiateGroupMeterReadingAsync(string meterGroupName, string responseURL, string transactionID, serviceType serviceType, expirationTime expTime, object userState) {
            if ((this.InitiateGroupMeterReadingOperationCompleted == null)) {
                this.InitiateGroupMeterReadingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateGroupMeterReadingOperationCompleted);
            }
            this.InvokeAsync("InitiateGroupMeterReading", new object[] {
                        meterGroupName,
                        responseURL,
                        transactionID,
                        serviceType,
                        expTime}, this.InitiateGroupMeterReadingOperationCompleted, userState);
        }
        
        private void OnInitiateGroupMeterReadingOperationCompleted(object arg) {
            if ((this.InitiateGroupMeterReadingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateGroupMeterReadingCompleted(this, new InitiateGroupMeterReadingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/ScheduleGroupMeterReading", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] ScheduleGroupMeterReading(string meterGroupName, System.DateTime timeToRead, string responseURL, string transactionID, serviceType serviceType) {
            object[] results = this.Invoke("ScheduleGroupMeterReading", new object[] {
                        meterGroupName,
                        timeToRead,
                        responseURL,
                        transactionID,
                        serviceType});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void ScheduleGroupMeterReadingAsync(string meterGroupName, System.DateTime timeToRead, string responseURL, string transactionID, serviceType serviceType) {
            this.ScheduleGroupMeterReadingAsync(meterGroupName, timeToRead, responseURL, transactionID, serviceType, null);
        }
        
        /// CodeRemarks
        public void ScheduleGroupMeterReadingAsync(string meterGroupName, System.DateTime timeToRead, string responseURL, string transactionID, serviceType serviceType, object userState) {
            if ((this.ScheduleGroupMeterReadingOperationCompleted == null)) {
                this.ScheduleGroupMeterReadingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnScheduleGroupMeterReadingOperationCompleted);
            }
            this.InvokeAsync("ScheduleGroupMeterReading", new object[] {
                        meterGroupName,
                        timeToRead,
                        responseURL,
                        transactionID,
                        serviceType}, this.ScheduleGroupMeterReadingOperationCompleted, userState);
        }
        
        private void OnScheduleGroupMeterReadingOperationCompleted(object arg) {
            if ((this.ScheduleGroupMeterReadingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ScheduleGroupMeterReadingCompleted(this, new ScheduleGroupMeterReadingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateMeterReadingByMeterIDAndFieldName", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateMeterReadingByMeterIDAndFieldName(meterID meterID, string responseURL, string fieldName, string transactionID, expirationTime expTime) {
            object[] results = this.Invoke("InitiateMeterReadingByMeterIDAndFieldName", new object[] {
                        meterID,
                        responseURL,
                        fieldName,
                        transactionID,
                        expTime});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateMeterReadingByMeterIDAndFieldNameAsync(meterID meterID, string responseURL, string fieldName, string transactionID, expirationTime expTime) {
            this.InitiateMeterReadingByMeterIDAndFieldNameAsync(meterID, responseURL, fieldName, transactionID, expTime, null);
        }
        
        /// CodeRemarks
        public void InitiateMeterReadingByMeterIDAndFieldNameAsync(meterID meterID, string responseURL, string fieldName, string transactionID, expirationTime expTime, object userState) {
            if ((this.InitiateMeterReadingByMeterIDAndFieldNameOperationCompleted == null)) {
                this.InitiateMeterReadingByMeterIDAndFieldNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateMeterReadingByMeterIDAndFieldNameOperationCompleted);
            }
            this.InvokeAsync("InitiateMeterReadingByMeterIDAndFieldName", new object[] {
                        meterID,
                        responseURL,
                        fieldName,
                        transactionID,
                        expTime}, this.InitiateMeterReadingByMeterIDAndFieldNameOperationCompleted, userState);
        }
        
        private void OnInitiateMeterReadingByMeterIDAndFieldNameOperationCompleted(object arg) {
            if ((this.InitiateMeterReadingByMeterIDAndFieldNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateMeterReadingByMeterIDAndFieldNameCompleted(this, new InitiateMeterReadingByMeterIDAndFieldNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateMeterReadingByObject", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateMeterReadingByObject(string objectName, string nounType, phaseCode PhaseCode, string responseURL, string transactionID, expirationTime expTime) {
            object[] results = this.Invoke("InitiateMeterReadingByObject", new object[] {
                        objectName,
                        nounType,
                        PhaseCode,
                        responseURL,
                        transactionID,
                        expTime});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateMeterReadingByObjectAsync(string objectName, string nounType, phaseCode PhaseCode, string responseURL, string transactionID, expirationTime expTime) {
            this.InitiateMeterReadingByObjectAsync(objectName, nounType, PhaseCode, responseURL, transactionID, expTime, null);
        }
        
        /// CodeRemarks
        public void InitiateMeterReadingByObjectAsync(string objectName, string nounType, phaseCode PhaseCode, string responseURL, string transactionID, expirationTime expTime, object userState) {
            if ((this.InitiateMeterReadingByObjectOperationCompleted == null)) {
                this.InitiateMeterReadingByObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateMeterReadingByObjectOperationCompleted);
            }
            this.InvokeAsync("InitiateMeterReadingByObject", new object[] {
                        objectName,
                        nounType,
                        PhaseCode,
                        responseURL,
                        transactionID,
                        expTime}, this.InitiateMeterReadingByObjectOperationCompleted, userState);
        }
        
        private void OnInitiateMeterReadingByObjectOperationCompleted(object arg) {
            if ((this.InitiateMeterReadingByObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateMeterReadingByObjectCompleted(this, new InitiateMeterReadingByObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateOutageDetectionEventRequest", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateOutageDetectionEventRequest(meterID[] meterIDs, System.DateTime requestDate, string responseURL, string transactionID, expirationTime expTime) {
            object[] results = this.Invoke("InitiateOutageDetectionEventRequest", new object[] {
                        meterIDs,
                        requestDate,
                        responseURL,
                        transactionID,
                        expTime});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateOutageDetectionEventRequestAsync(meterID[] meterIDs, System.DateTime requestDate, string responseURL, string transactionID, expirationTime expTime) {
            this.InitiateOutageDetectionEventRequestAsync(meterIDs, requestDate, responseURL, transactionID, expTime, null);
        }
        
        /// CodeRemarks
        public void InitiateOutageDetectionEventRequestAsync(meterID[] meterIDs, System.DateTime requestDate, string responseURL, string transactionID, expirationTime expTime, object userState) {
            if ((this.InitiateOutageDetectionEventRequestOperationCompleted == null)) {
                this.InitiateOutageDetectionEventRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateOutageDetectionEventRequestOperationCompleted);
            }
            this.InvokeAsync("InitiateOutageDetectionEventRequest", new object[] {
                        meterIDs,
                        requestDate,
                        responseURL,
                        transactionID,
                        expTime}, this.InitiateOutageDetectionEventRequestOperationCompleted, userState);
        }
        
        private void OnInitiateOutageDetectionEventRequestOperationCompleted(object arg) {
            if ((this.InitiateOutageDetectionEventRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateOutageDetectionEventRequestCompleted(this, new InitiateOutageDetectionEventRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateODEventRequestByObject", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateODEventRequestByObject(string objectName, string nounType, phaseCode PhaseCode, System.DateTime requestDate, string responseURL, string transactionID, expirationTime expTime) {
            object[] results = this.Invoke("InitiateODEventRequestByObject", new object[] {
                        objectName,
                        nounType,
                        PhaseCode,
                        requestDate,
                        responseURL,
                        transactionID,
                        expTime});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateODEventRequestByObjectAsync(string objectName, string nounType, phaseCode PhaseCode, System.DateTime requestDate, string responseURL, string transactionID, expirationTime expTime) {
            this.InitiateODEventRequestByObjectAsync(objectName, nounType, PhaseCode, requestDate, responseURL, transactionID, expTime, null);
        }
        
        /// CodeRemarks
        public void InitiateODEventRequestByObjectAsync(string objectName, string nounType, phaseCode PhaseCode, System.DateTime requestDate, string responseURL, string transactionID, expirationTime expTime, object userState) {
            if ((this.InitiateODEventRequestByObjectOperationCompleted == null)) {
                this.InitiateODEventRequestByObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateODEventRequestByObjectOperationCompleted);
            }
            this.InvokeAsync("InitiateODEventRequestByObject", new object[] {
                        objectName,
                        nounType,
                        PhaseCode,
                        requestDate,
                        responseURL,
                        transactionID,
                        expTime}, this.InitiateODEventRequestByObjectOperationCompleted, userState);
        }
        
        private void OnInitiateODEventRequestByObjectOperationCompleted(object arg) {
            if ((this.InitiateODEventRequestByObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateODEventRequestByObjectCompleted(this, new InitiateODEventRequestByObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateODMonitoringRequestByObject", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateODMonitoringRequestByObject(string objectName, string nounType, phaseCode PhaseCode, int periodicity, System.DateTime requestDate, string responseURL, string transactionID, expirationTime expTime) {
            object[] results = this.Invoke("InitiateODMonitoringRequestByObject", new object[] {
                        objectName,
                        nounType,
                        PhaseCode,
                        periodicity,
                        requestDate,
                        responseURL,
                        transactionID,
                        expTime});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateODMonitoringRequestByObjectAsync(string objectName, string nounType, phaseCode PhaseCode, int periodicity, System.DateTime requestDate, string responseURL, string transactionID, expirationTime expTime) {
            this.InitiateODMonitoringRequestByObjectAsync(objectName, nounType, PhaseCode, periodicity, requestDate, responseURL, transactionID, expTime, null);
        }
        
        /// CodeRemarks
        public void InitiateODMonitoringRequestByObjectAsync(string objectName, string nounType, phaseCode PhaseCode, int periodicity, System.DateTime requestDate, string responseURL, string transactionID, expirationTime expTime, object userState) {
            if ((this.InitiateODMonitoringRequestByObjectOperationCompleted == null)) {
                this.InitiateODMonitoringRequestByObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateODMonitoringRequestByObjectOperationCompleted);
            }
            this.InvokeAsync("InitiateODMonitoringRequestByObject", new object[] {
                        objectName,
                        nounType,
                        PhaseCode,
                        periodicity,
                        requestDate,
                        responseURL,
                        transactionID,
                        expTime}, this.InitiateODMonitoringRequestByObjectOperationCompleted, userState);
        }
        
        private void OnInitiateODMonitoringRequestByObjectOperationCompleted(object arg) {
            if ((this.InitiateODMonitoringRequestByObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateODMonitoringRequestByObjectCompleted(this, new InitiateODMonitoringRequestByObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/DisplayODMonitoringRequests", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public objectRef[] DisplayODMonitoringRequests() {
            object[] results = this.Invoke("DisplayODMonitoringRequests", new object[0]);
            return ((objectRef[])(results[0]));
        }
        
        /// CodeRemarks
        public void DisplayODMonitoringRequestsAsync() {
            this.DisplayODMonitoringRequestsAsync(null);
        }
        
        /// CodeRemarks
        public void DisplayODMonitoringRequestsAsync(object userState) {
            if ((this.DisplayODMonitoringRequestsOperationCompleted == null)) {
                this.DisplayODMonitoringRequestsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisplayODMonitoringRequestsOperationCompleted);
            }
            this.InvokeAsync("DisplayODMonitoringRequests", new object[0], this.DisplayODMonitoringRequestsOperationCompleted, userState);
        }
        
        private void OnDisplayODMonitoringRequestsOperationCompleted(object arg) {
            if ((this.DisplayODMonitoringRequestsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisplayODMonitoringRequestsCompleted(this, new DisplayODMonitoringRequestsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CancelODMonitoringRequestByObject", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CancelODMonitoringRequestByObject(objectRef[] ObjectRef, System.DateTime requestDate) {
            object[] results = this.Invoke("CancelODMonitoringRequestByObject", new object[] {
                        ObjectRef,
                        requestDate});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CancelODMonitoringRequestByObjectAsync(objectRef[] ObjectRef, System.DateTime requestDate) {
            this.CancelODMonitoringRequestByObjectAsync(ObjectRef, requestDate, null);
        }
        
        /// CodeRemarks
        public void CancelODMonitoringRequestByObjectAsync(objectRef[] ObjectRef, System.DateTime requestDate, object userState) {
            if ((this.CancelODMonitoringRequestByObjectOperationCompleted == null)) {
                this.CancelODMonitoringRequestByObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelODMonitoringRequestByObjectOperationCompleted);
            }
            this.InvokeAsync("CancelODMonitoringRequestByObject", new object[] {
                        ObjectRef,
                        requestDate}, this.CancelODMonitoringRequestByObjectOperationCompleted, userState);
        }
        
        private void OnCancelODMonitoringRequestByObjectOperationCompleted(object arg) {
            if ((this.CancelODMonitoringRequestByObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelODMonitoringRequestByObjectCompleted(this, new CancelODMonitoringRequestByObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateConnectDisconnect", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateConnectDisconnect(connectDisconnectEvent[] cdEvents, string responseURL, string transactionID, expirationTime expTime) {
            object[] results = this.Invoke("InitiateConnectDisconnect", new object[] {
                        cdEvents,
                        responseURL,
                        transactionID,
                        expTime});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateConnectDisconnectAsync(connectDisconnectEvent[] cdEvents, string responseURL, string transactionID, expirationTime expTime) {
            this.InitiateConnectDisconnectAsync(cdEvents, responseURL, transactionID, expTime, null);
        }
        
        /// CodeRemarks
        public void InitiateConnectDisconnectAsync(connectDisconnectEvent[] cdEvents, string responseURL, string transactionID, expirationTime expTime, object userState) {
            if ((this.InitiateConnectDisconnectOperationCompleted == null)) {
                this.InitiateConnectDisconnectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateConnectDisconnectOperationCompleted);
            }
            this.InvokeAsync("InitiateConnectDisconnect", new object[] {
                        cdEvents,
                        responseURL,
                        transactionID,
                        expTime}, this.InitiateConnectDisconnectOperationCompleted, userState);
        }
        
        private void OnInitiateConnectDisconnectOperationCompleted(object arg) {
            if ((this.InitiateConnectDisconnectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateConnectDisconnectCompleted(this, new InitiateConnectDisconnectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CDStateChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CDStateChangedNotification(CDStateChange stateChange, string transactionID) {
            object[] results = this.Invoke("CDStateChangedNotification", new object[] {
                        stateChange,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CDStateChangedNotificationAsync(CDStateChange stateChange, string transactionID) {
            this.CDStateChangedNotificationAsync(stateChange, transactionID, null);
        }
        
        /// CodeRemarks
        public void CDStateChangedNotificationAsync(CDStateChange stateChange, string transactionID, object userState) {
            if ((this.CDStateChangedNotificationOperationCompleted == null)) {
                this.CDStateChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCDStateChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("CDStateChangedNotification", new object[] {
                        stateChange,
                        transactionID}, this.CDStateChangedNotificationOperationCompleted, userState);
        }
        
        private void OnCDStateChangedNotificationOperationCompleted(object arg) {
            if ((this.CDStateChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CDStateChangedNotificationCompleted(this, new CDStateChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CDStatesChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CDStatesChangedNotification(CDStateChange[] stateChanges, string transactionID) {
            object[] results = this.Invoke("CDStatesChangedNotification", new object[] {
                        stateChanges,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CDStatesChangedNotificationAsync(CDStateChange[] stateChanges, string transactionID) {
            this.CDStatesChangedNotificationAsync(stateChanges, transactionID, null);
        }
        
        /// CodeRemarks
        public void CDStatesChangedNotificationAsync(CDStateChange[] stateChanges, string transactionID, object userState) {
            if ((this.CDStatesChangedNotificationOperationCompleted == null)) {
                this.CDStatesChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCDStatesChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("CDStatesChangedNotification", new object[] {
                        stateChanges,
                        transactionID}, this.CDStatesChangedNotificationOperationCompleted, userState);
        }
        
        private void OnCDStatesChangedNotificationOperationCompleted(object arg) {
            if ((this.CDStatesChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CDStatesChangedNotificationCompleted(this, new CDStatesChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/UpdateServiceLocationDisplays", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] UpdateServiceLocationDisplays(string serviceLocationID, serviceType serviceType) {
            object[] results = this.Invoke("UpdateServiceLocationDisplays", new object[] {
                        serviceLocationID,
                        serviceType});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void UpdateServiceLocationDisplaysAsync(string serviceLocationID, serviceType serviceType) {
            this.UpdateServiceLocationDisplaysAsync(serviceLocationID, serviceType, null);
        }
        
        /// CodeRemarks
        public void UpdateServiceLocationDisplaysAsync(string serviceLocationID, serviceType serviceType, object userState) {
            if ((this.UpdateServiceLocationDisplaysOperationCompleted == null)) {
                this.UpdateServiceLocationDisplaysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateServiceLocationDisplaysOperationCompleted);
            }
            this.InvokeAsync("UpdateServiceLocationDisplays", new object[] {
                        serviceLocationID,
                        serviceType}, this.UpdateServiceLocationDisplaysOperationCompleted, userState);
        }
        
        private void OnUpdateServiceLocationDisplaysOperationCompleted(object arg) {
            if ((this.UpdateServiceLocationDisplaysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateServiceLocationDisplaysCompleted(this, new UpdateServiceLocationDisplaysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/IntervalDataNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] IntervalDataNotification(intervalData intervalReads, string transactionID, string errorString) {
            object[] results = this.Invoke("IntervalDataNotification", new object[] {
                        intervalReads,
                        transactionID,
                        errorString});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void IntervalDataNotificationAsync(intervalData intervalReads, string transactionID, string errorString) {
            this.IntervalDataNotificationAsync(intervalReads, transactionID, errorString, null);
        }
        
        /// CodeRemarks
        public void IntervalDataNotificationAsync(intervalData intervalReads, string transactionID, string errorString, object userState) {
            if ((this.IntervalDataNotificationOperationCompleted == null)) {
                this.IntervalDataNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIntervalDataNotificationOperationCompleted);
            }
            this.InvokeAsync("IntervalDataNotification", new object[] {
                        intervalReads,
                        transactionID,
                        errorString}, this.IntervalDataNotificationOperationCompleted, userState);
        }
        
        private void OnIntervalDataNotificationOperationCompleted(object arg) {
            if ((this.IntervalDataNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IntervalDataNotificationCompleted(this, new IntervalDataNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateLPMeterReadingsByMeterID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateLPMeterReadingsByMeterID(meterID[] meterIDs, string responseURL, string transactionID) {
            object[] results = this.Invoke("InitiateLPMeterReadingsByMeterID", new object[] {
                        meterIDs,
                        responseURL,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateLPMeterReadingsByMeterIDAsync(meterID[] meterIDs, string responseURL, string transactionID) {
            this.InitiateLPMeterReadingsByMeterIDAsync(meterIDs, responseURL, transactionID, null);
        }
        
        /// CodeRemarks
        public void InitiateLPMeterReadingsByMeterIDAsync(meterID[] meterIDs, string responseURL, string transactionID, object userState) {
            if ((this.InitiateLPMeterReadingsByMeterIDOperationCompleted == null)) {
                this.InitiateLPMeterReadingsByMeterIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateLPMeterReadingsByMeterIDOperationCompleted);
            }
            this.InvokeAsync("InitiateLPMeterReadingsByMeterID", new object[] {
                        meterIDs,
                        responseURL,
                        transactionID}, this.InitiateLPMeterReadingsByMeterIDOperationCompleted, userState);
        }
        
        private void OnInitiateLPMeterReadingsByMeterIDOperationCompleted(object arg) {
            if ((this.InitiateLPMeterReadingsByMeterIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateLPMeterReadingsByMeterIDCompleted(this, new InitiateLPMeterReadingsByMeterIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateCDStateRequest", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateCDStateRequest(CDState[] states, string responseURL, string transactionID, expirationTime expTime) {
            object[] results = this.Invoke("InitiateCDStateRequest", new object[] {
                        states,
                        responseURL,
                        transactionID,
                        expTime});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateCDStateRequestAsync(CDState[] states, string responseURL, string transactionID, expirationTime expTime) {
            this.InitiateCDStateRequestAsync(states, responseURL, transactionID, expTime, null);
        }
        
        /// CodeRemarks
        public void InitiateCDStateRequestAsync(CDState[] states, string responseURL, string transactionID, expirationTime expTime, object userState) {
            if ((this.InitiateCDStateRequestOperationCompleted == null)) {
                this.InitiateCDStateRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateCDStateRequestOperationCompleted);
            }
            this.InvokeAsync("InitiateCDStateRequest", new object[] {
                        states,
                        responseURL,
                        transactionID,
                        expTime}, this.InitiateCDStateRequestOperationCompleted, userState);
        }
        
        private void OnInitiateCDStateRequestOperationCompleted(object arg) {
            if ((this.InitiateCDStateRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateCDStateRequestCompleted(this, new InitiateCDStateRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CDStateNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CDStateNotification(CDState state, string transactionID) {
            object[] results = this.Invoke("CDStateNotification", new object[] {
                        state,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CDStateNotificationAsync(CDState state, string transactionID) {
            this.CDStateNotificationAsync(state, transactionID, null);
        }
        
        /// CodeRemarks
        public void CDStateNotificationAsync(CDState state, string transactionID, object userState) {
            if ((this.CDStateNotificationOperationCompleted == null)) {
                this.CDStateNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCDStateNotificationOperationCompleted);
            }
            this.InvokeAsync("CDStateNotification", new object[] {
                        state,
                        transactionID}, this.CDStateNotificationOperationCompleted, userState);
        }
        
        private void OnCDStateNotificationOperationCompleted(object arg) {
            if ((this.CDStateNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CDStateNotificationCompleted(this, new CDStateNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CDStatesNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CDStatesNotification(CDState[] states, string transactionID) {
            object[] results = this.Invoke("CDStatesNotification", new object[] {
                        states,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CDStatesNotificationAsync(CDState[] states, string transactionID) {
            this.CDStatesNotificationAsync(states, transactionID, null);
        }
        
        /// CodeRemarks
        public void CDStatesNotificationAsync(CDState[] states, string transactionID, object userState) {
            if ((this.CDStatesNotificationOperationCompleted == null)) {
                this.CDStatesNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCDStatesNotificationOperationCompleted);
            }
            this.InvokeAsync("CDStatesNotification", new object[] {
                        states,
                        transactionID}, this.CDStatesNotificationOperationCompleted, userState);
        }
        
        private void OnCDStatesNotificationOperationCompleted(object arg) {
            if ((this.CDStatesNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CDStatesNotificationCompleted(this, new CDStatesNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CancelDemandResponseEvent", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CancelDemandResponseEvent(demandResponseEvent demandResponseEvent, HANInterfaceID interfaceID, string transactionID, string responseURL) {
            object[] results = this.Invoke("CancelDemandResponseEvent", new object[] {
                        demandResponseEvent,
                        interfaceID,
                        transactionID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CancelDemandResponseEventAsync(demandResponseEvent demandResponseEvent, HANInterfaceID interfaceID, string transactionID, string responseURL) {
            this.CancelDemandResponseEventAsync(demandResponseEvent, interfaceID, transactionID, responseURL, null);
        }
        
        /// CodeRemarks
        public void CancelDemandResponseEventAsync(demandResponseEvent demandResponseEvent, HANInterfaceID interfaceID, string transactionID, string responseURL, object userState) {
            if ((this.CancelDemandResponseEventOperationCompleted == null)) {
                this.CancelDemandResponseEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelDemandResponseEventOperationCompleted);
            }
            this.InvokeAsync("CancelDemandResponseEvent", new object[] {
                        demandResponseEvent,
                        interfaceID,
                        transactionID,
                        responseURL}, this.CancelDemandResponseEventOperationCompleted, userState);
        }
        
        private void OnCancelDemandResponseEventOperationCompleted(object arg) {
            if ((this.CancelDemandResponseEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelDemandResponseEventCompleted(this, new CancelDemandResponseEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CancelDemandResponseEventToGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CancelDemandResponseEventToGroup(string eventID, HANGroupID groupID, string transactionID, string responseURL) {
            object[] results = this.Invoke("CancelDemandResponseEventToGroup", new object[] {
                        eventID,
                        groupID,
                        transactionID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CancelDemandResponseEventToGroupAsync(string eventID, HANGroupID groupID, string transactionID, string responseURL) {
            this.CancelDemandResponseEventToGroupAsync(eventID, groupID, transactionID, responseURL, null);
        }
        
        /// CodeRemarks
        public void CancelDemandResponseEventToGroupAsync(string eventID, HANGroupID groupID, string transactionID, string responseURL, object userState) {
            if ((this.CancelDemandResponseEventToGroupOperationCompleted == null)) {
                this.CancelDemandResponseEventToGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelDemandResponseEventToGroupOperationCompleted);
            }
            this.InvokeAsync("CancelDemandResponseEventToGroup", new object[] {
                        eventID,
                        groupID,
                        transactionID,
                        responseURL}, this.CancelDemandResponseEventToGroupOperationCompleted, userState);
        }
        
        private void OnCancelDemandResponseEventToGroupOperationCompleted(object arg) {
            if ((this.CancelDemandResponseEventToGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelDemandResponseEventToGroupCompleted(this, new CancelDemandResponseEventToGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/DemandResponseEventNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] DemandResponseEventNotification(demandResponseEventStatus[] eventHistory, string transactionID) {
            object[] results = this.Invoke("DemandResponseEventNotification", new object[] {
                        eventHistory,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void DemandResponseEventNotificationAsync(demandResponseEventStatus[] eventHistory, string transactionID) {
            this.DemandResponseEventNotificationAsync(eventHistory, transactionID, null);
        }
        
        /// CodeRemarks
        public void DemandResponseEventNotificationAsync(demandResponseEventStatus[] eventHistory, string transactionID, object userState) {
            if ((this.DemandResponseEventNotificationOperationCompleted == null)) {
                this.DemandResponseEventNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDemandResponseEventNotificationOperationCompleted);
            }
            this.InvokeAsync("DemandResponseEventNotification", new object[] {
                        eventHistory,
                        transactionID}, this.DemandResponseEventNotificationOperationCompleted, userState);
        }
        
        private void OnDemandResponseEventNotificationOperationCompleted(object arg) {
            if ((this.DemandResponseEventNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DemandResponseEventNotificationCompleted(this, new DemandResponseEventNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/DemandResponseSetupNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] DemandResponseSetupNotification(demandResponseParameters drParameters, HANDeviceID deviceID, string transactionID, HANInterfaceID interfaceID) {
            object[] results = this.Invoke("DemandResponseSetupNotification", new object[] {
                        drParameters,
                        deviceID,
                        transactionID,
                        interfaceID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void DemandResponseSetupNotificationAsync(demandResponseParameters drParameters, HANDeviceID deviceID, string transactionID, HANInterfaceID interfaceID) {
            this.DemandResponseSetupNotificationAsync(drParameters, deviceID, transactionID, interfaceID, null);
        }
        
        /// CodeRemarks
        public void DemandResponseSetupNotificationAsync(demandResponseParameters drParameters, HANDeviceID deviceID, string transactionID, HANInterfaceID interfaceID, object userState) {
            if ((this.DemandResponseSetupNotificationOperationCompleted == null)) {
                this.DemandResponseSetupNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDemandResponseSetupNotificationOperationCompleted);
            }
            this.InvokeAsync("DemandResponseSetupNotification", new object[] {
                        drParameters,
                        deviceID,
                        transactionID,
                        interfaceID}, this.DemandResponseSetupNotificationOperationCompleted, userState);
        }
        
        private void OnDemandResponseSetupNotificationOperationCompleted(object arg) {
            if ((this.DemandResponseSetupNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DemandResponseSetupNotificationCompleted(this, new DemandResponseSetupNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateDemandResponseEvent", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateDemandResponseEvent(demandResponseEvent demandResponseEvent, HANInterfaceID interfaceID, string transactionID, string responseURL) {
            object[] results = this.Invoke("InitiateDemandResponseEvent", new object[] {
                        demandResponseEvent,
                        interfaceID,
                        transactionID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateDemandResponseEventAsync(demandResponseEvent demandResponseEvent, HANInterfaceID interfaceID, string transactionID, string responseURL) {
            this.InitiateDemandResponseEventAsync(demandResponseEvent, interfaceID, transactionID, responseURL, null);
        }
        
        /// CodeRemarks
        public void InitiateDemandResponseEventAsync(demandResponseEvent demandResponseEvent, HANInterfaceID interfaceID, string transactionID, string responseURL, object userState) {
            if ((this.InitiateDemandResponseEventOperationCompleted == null)) {
                this.InitiateDemandResponseEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateDemandResponseEventOperationCompleted);
            }
            this.InvokeAsync("InitiateDemandResponseEvent", new object[] {
                        demandResponseEvent,
                        interfaceID,
                        transactionID,
                        responseURL}, this.InitiateDemandResponseEventOperationCompleted, userState);
        }
        
        private void OnInitiateDemandResponseEventOperationCompleted(object arg) {
            if ((this.InitiateDemandResponseEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateDemandResponseEventCompleted(this, new InitiateDemandResponseEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateDemandResponseEventStatusRequest", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateDemandResponseEventStatusRequest(string eventID, HANInterfaceID interfaceID, duration dither, string transactionID, string responseURL) {
            object[] results = this.Invoke("InitiateDemandResponseEventStatusRequest", new object[] {
                        eventID,
                        interfaceID,
                        dither,
                        transactionID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateDemandResponseEventStatusRequestAsync(string eventID, HANInterfaceID interfaceID, duration dither, string transactionID, string responseURL) {
            this.InitiateDemandResponseEventStatusRequestAsync(eventID, interfaceID, dither, transactionID, responseURL, null);
        }
        
        /// CodeRemarks
        public void InitiateDemandResponseEventStatusRequestAsync(string eventID, HANInterfaceID interfaceID, duration dither, string transactionID, string responseURL, object userState) {
            if ((this.InitiateDemandResponseEventStatusRequestOperationCompleted == null)) {
                this.InitiateDemandResponseEventStatusRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateDemandResponseEventStatusRequestOperationCompleted);
            }
            this.InvokeAsync("InitiateDemandResponseEventStatusRequest", new object[] {
                        eventID,
                        interfaceID,
                        dither,
                        transactionID,
                        responseURL}, this.InitiateDemandResponseEventStatusRequestOperationCompleted, userState);
        }
        
        private void OnInitiateDemandResponseEventStatusRequestOperationCompleted(object arg) {
            if ((this.InitiateDemandResponseEventStatusRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateDemandResponseEventStatusRequestCompleted(this, new InitiateDemandResponseEventStatusRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateDemandResponseEventToGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateDemandResponseEventToGroup(demandResponseEvent demandResponseEvent, HANGroupID groupID, string transactionID, string responseURL) {
            object[] results = this.Invoke("InitiateDemandResponseEventToGroup", new object[] {
                        demandResponseEvent,
                        groupID,
                        transactionID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateDemandResponseEventToGroupAsync(demandResponseEvent demandResponseEvent, HANGroupID groupID, string transactionID, string responseURL) {
            this.InitiateDemandResponseEventToGroupAsync(demandResponseEvent, groupID, transactionID, responseURL, null);
        }
        
        /// CodeRemarks
        public void InitiateDemandResponseEventToGroupAsync(demandResponseEvent demandResponseEvent, HANGroupID groupID, string transactionID, string responseURL, object userState) {
            if ((this.InitiateDemandResponseEventToGroupOperationCompleted == null)) {
                this.InitiateDemandResponseEventToGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateDemandResponseEventToGroupOperationCompleted);
            }
            this.InvokeAsync("InitiateDemandResponseEventToGroup", new object[] {
                        demandResponseEvent,
                        groupID,
                        transactionID,
                        responseURL}, this.InitiateDemandResponseEventToGroupOperationCompleted, userState);
        }
        
        private void OnInitiateDemandResponseEventToGroupOperationCompleted(object arg) {
            if ((this.InitiateDemandResponseEventToGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateDemandResponseEventToGroupCompleted(this, new InitiateDemandResponseEventToGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateDemandResponseEventStatusRequestToGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateDemandResponseEventStatusRequestToGroup(string eventID, HANGroupID groupID, duration dither, string transactionID, string responseURL) {
            object[] results = this.Invoke("InitiateDemandResponseEventStatusRequestToGroup", new object[] {
                        eventID,
                        groupID,
                        dither,
                        transactionID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateDemandResponseEventStatusRequestToGroupAsync(string eventID, HANGroupID groupID, duration dither, string transactionID, string responseURL) {
            this.InitiateDemandResponseEventStatusRequestToGroupAsync(eventID, groupID, dither, transactionID, responseURL, null);
        }
        
        /// CodeRemarks
        public void InitiateDemandResponseEventStatusRequestToGroupAsync(string eventID, HANGroupID groupID, duration dither, string transactionID, string responseURL, object userState) {
            if ((this.InitiateDemandResponseEventStatusRequestToGroupOperationCompleted == null)) {
                this.InitiateDemandResponseEventStatusRequestToGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateDemandResponseEventStatusRequestToGroupOperationCompleted);
            }
            this.InvokeAsync("InitiateDemandResponseEventStatusRequestToGroup", new object[] {
                        eventID,
                        groupID,
                        dither,
                        transactionID,
                        responseURL}, this.InitiateDemandResponseEventStatusRequestToGroupOperationCompleted, userState);
        }
        
        private void OnInitiateDemandResponseEventStatusRequestToGroupOperationCompleted(object arg) {
            if ((this.InitiateDemandResponseEventStatusRequestToGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateDemandResponseEventStatusRequestToGroupCompleted(this, new InitiateDemandResponseEventStatusRequestToGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateDemandResponseSetup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateDemandResponseSetup(demandResponseParameters drParameters, HANDeviceID deviceID, string transactionID, HANInterfaceID interfaceID, string responseURL) {
            object[] results = this.Invoke("InitiateDemandResponseSetup", new object[] {
                        drParameters,
                        deviceID,
                        transactionID,
                        interfaceID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateDemandResponseSetupAsync(demandResponseParameters drParameters, HANDeviceID deviceID, string transactionID, HANInterfaceID interfaceID, string responseURL) {
            this.InitiateDemandResponseSetupAsync(drParameters, deviceID, transactionID, interfaceID, responseURL, null);
        }
        
        /// CodeRemarks
        public void InitiateDemandResponseSetupAsync(demandResponseParameters drParameters, HANDeviceID deviceID, string transactionID, HANInterfaceID interfaceID, string responseURL, object userState) {
            if ((this.InitiateDemandResponseSetupOperationCompleted == null)) {
                this.InitiateDemandResponseSetupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateDemandResponseSetupOperationCompleted);
            }
            this.InvokeAsync("InitiateDemandResponseSetup", new object[] {
                        drParameters,
                        deviceID,
                        transactionID,
                        interfaceID,
                        responseURL}, this.InitiateDemandResponseSetupOperationCompleted, userState);
        }
        
        private void OnInitiateDemandResponseSetupOperationCompleted(object arg) {
            if ((this.InitiateDemandResponseSetupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateDemandResponseSetupCompleted(this, new InitiateDemandResponseSetupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateDemandReset", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateDemandReset(meterID[] meterIDs, string responseURL, string transactionID, expirationTime expTime) {
            object[] results = this.Invoke("InitiateDemandReset", new object[] {
                        meterIDs,
                        responseURL,
                        transactionID,
                        expTime});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateDemandResetAsync(meterID[] meterIDs, string responseURL, string transactionID, expirationTime expTime) {
            this.InitiateDemandResetAsync(meterIDs, responseURL, transactionID, expTime, null);
        }
        
        /// CodeRemarks
        public void InitiateDemandResetAsync(meterID[] meterIDs, string responseURL, string transactionID, expirationTime expTime, object userState) {
            if ((this.InitiateDemandResetOperationCompleted == null)) {
                this.InitiateDemandResetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateDemandResetOperationCompleted);
            }
            this.InvokeAsync("InitiateDemandReset", new object[] {
                        meterIDs,
                        responseURL,
                        transactionID,
                        expTime}, this.InitiateDemandResetOperationCompleted, userState);
        }
        
        private void OnInitiateDemandResetOperationCompleted(object arg) {
            if ((this.InitiateDemandResetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateDemandResetCompleted(this, new InitiateDemandResetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateArmCDDevice", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateArmCDDevice(CDState[] states, string responseURL, string transactionID, expirationTime expTime) {
            object[] results = this.Invoke("InitiateArmCDDevice", new object[] {
                        states,
                        responseURL,
                        transactionID,
                        expTime});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateArmCDDeviceAsync(CDState[] states, string responseURL, string transactionID, expirationTime expTime) {
            this.InitiateArmCDDeviceAsync(states, responseURL, transactionID, expTime, null);
        }
        
        /// CodeRemarks
        public void InitiateArmCDDeviceAsync(CDState[] states, string responseURL, string transactionID, expirationTime expTime, object userState) {
            if ((this.InitiateArmCDDeviceOperationCompleted == null)) {
                this.InitiateArmCDDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateArmCDDeviceOperationCompleted);
            }
            this.InvokeAsync("InitiateArmCDDevice", new object[] {
                        states,
                        responseURL,
                        transactionID,
                        expTime}, this.InitiateArmCDDeviceOperationCompleted, userState);
        }
        
        private void OnInitiateArmCDDeviceOperationCompleted(object arg) {
            if ((this.InitiateArmCDDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateArmCDDeviceCompleted(this, new InitiateArmCDDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateEnableCDDevice", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateEnableCDDevice(CDState[] states, string responseURL, string transactionID, expirationTime expTime) {
            object[] results = this.Invoke("InitiateEnableCDDevice", new object[] {
                        states,
                        responseURL,
                        transactionID,
                        expTime});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateEnableCDDeviceAsync(CDState[] states, string responseURL, string transactionID, expirationTime expTime) {
            this.InitiateEnableCDDeviceAsync(states, responseURL, transactionID, expTime, null);
        }
        
        /// CodeRemarks
        public void InitiateEnableCDDeviceAsync(CDState[] states, string responseURL, string transactionID, expirationTime expTime, object userState) {
            if ((this.InitiateEnableCDDeviceOperationCompleted == null)) {
                this.InitiateEnableCDDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateEnableCDDeviceOperationCompleted);
            }
            this.InvokeAsync("InitiateEnableCDDevice", new object[] {
                        states,
                        responseURL,
                        transactionID,
                        expTime}, this.InitiateEnableCDDeviceOperationCompleted, userState);
        }
        
        private void OnInitiateEnableCDDeviceOperationCompleted(object arg) {
            if ((this.InitiateEnableCDDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateEnableCDDeviceCompleted(this, new InitiateEnableCDDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateDisableCDDevice", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateDisableCDDevice(CDState[] states, string responseURL, string transactionID, expirationTime expTime) {
            object[] results = this.Invoke("InitiateDisableCDDevice", new object[] {
                        states,
                        responseURL,
                        transactionID,
                        expTime});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateDisableCDDeviceAsync(CDState[] states, string responseURL, string transactionID, expirationTime expTime) {
            this.InitiateDisableCDDeviceAsync(states, responseURL, transactionID, expTime, null);
        }
        
        /// CodeRemarks
        public void InitiateDisableCDDeviceAsync(CDState[] states, string responseURL, string transactionID, expirationTime expTime, object userState) {
            if ((this.InitiateDisableCDDeviceOperationCompleted == null)) {
                this.InitiateDisableCDDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateDisableCDDeviceOperationCompleted);
            }
            this.InvokeAsync("InitiateDisableCDDevice", new object[] {
                        states,
                        responseURL,
                        transactionID,
                        expTime}, this.InitiateDisableCDDeviceOperationCompleted, userState);
        }
        
        private void OnInitiateDisableCDDeviceOperationCompleted(object arg) {
            if ((this.InitiateDisableCDDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateDisableCDDeviceCompleted(this, new InitiateDisableCDDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/EstablishSchedules", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] EstablishSchedules(schedule[] schedules) {
            object[] results = this.Invoke("EstablishSchedules", new object[] {
                        schedules});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void EstablishSchedulesAsync(schedule[] schedules) {
            this.EstablishSchedulesAsync(schedules, null);
        }
        
        /// CodeRemarks
        public void EstablishSchedulesAsync(schedule[] schedules, object userState) {
            if ((this.EstablishSchedulesOperationCompleted == null)) {
                this.EstablishSchedulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEstablishSchedulesOperationCompleted);
            }
            this.InvokeAsync("EstablishSchedules", new object[] {
                        schedules}, this.EstablishSchedulesOperationCompleted, userState);
        }
        
        private void OnEstablishSchedulesOperationCompleted(object arg) {
            if ((this.EstablishSchedulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EstablishSchedulesCompleted(this, new EstablishSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/DeleteSchedule", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] DeleteSchedule(string scheduleID) {
            object[] results = this.Invoke("DeleteSchedule", new object[] {
                        scheduleID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void DeleteScheduleAsync(string scheduleID) {
            this.DeleteScheduleAsync(scheduleID, null);
        }
        
        /// CodeRemarks
        public void DeleteScheduleAsync(string scheduleID, object userState) {
            if ((this.DeleteScheduleOperationCompleted == null)) {
                this.DeleteScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteScheduleOperationCompleted);
            }
            this.InvokeAsync("DeleteSchedule", new object[] {
                        scheduleID}, this.DeleteScheduleOperationCompleted, userState);
        }
        
        private void OnDeleteScheduleOperationCompleted(object arg) {
            if ((this.DeleteScheduleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteScheduleCompleted(this, new DeleteScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/EstablishReadingSchedules", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] EstablishReadingSchedules(readingSchedule[] readingSchedules) {
            object[] results = this.Invoke("EstablishReadingSchedules", new object[] {
                        readingSchedules});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void EstablishReadingSchedulesAsync(readingSchedule[] readingSchedules) {
            this.EstablishReadingSchedulesAsync(readingSchedules, null);
        }
        
        /// CodeRemarks
        public void EstablishReadingSchedulesAsync(readingSchedule[] readingSchedules, object userState) {
            if ((this.EstablishReadingSchedulesOperationCompleted == null)) {
                this.EstablishReadingSchedulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEstablishReadingSchedulesOperationCompleted);
            }
            this.InvokeAsync("EstablishReadingSchedules", new object[] {
                        readingSchedules}, this.EstablishReadingSchedulesOperationCompleted, userState);
        }
        
        private void OnEstablishReadingSchedulesOperationCompleted(object arg) {
            if ((this.EstablishReadingSchedulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EstablishReadingSchedulesCompleted(this, new EstablishReadingSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/EnableReadingSchedules", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] EnableReadingSchedules(string[] readingScheduleID) {
            object[] results = this.Invoke("EnableReadingSchedules", new object[] {
                        readingScheduleID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void EnableReadingSchedulesAsync(string[] readingScheduleID) {
            this.EnableReadingSchedulesAsync(readingScheduleID, null);
        }
        
        /// CodeRemarks
        public void EnableReadingSchedulesAsync(string[] readingScheduleID, object userState) {
            if ((this.EnableReadingSchedulesOperationCompleted == null)) {
                this.EnableReadingSchedulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnableReadingSchedulesOperationCompleted);
            }
            this.InvokeAsync("EnableReadingSchedules", new object[] {
                        readingScheduleID}, this.EnableReadingSchedulesOperationCompleted, userState);
        }
        
        private void OnEnableReadingSchedulesOperationCompleted(object arg) {
            if ((this.EnableReadingSchedulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnableReadingSchedulesCompleted(this, new EnableReadingSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/DisableReadingSchedule", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] DisableReadingSchedule(string readingScheduleID) {
            object[] results = this.Invoke("DisableReadingSchedule", new object[] {
                        readingScheduleID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void DisableReadingScheduleAsync(string readingScheduleID) {
            this.DisableReadingScheduleAsync(readingScheduleID, null);
        }
        
        /// CodeRemarks
        public void DisableReadingScheduleAsync(string readingScheduleID, object userState) {
            if ((this.DisableReadingScheduleOperationCompleted == null)) {
                this.DisableReadingScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisableReadingScheduleOperationCompleted);
            }
            this.InvokeAsync("DisableReadingSchedule", new object[] {
                        readingScheduleID}, this.DisableReadingScheduleOperationCompleted, userState);
        }
        
        private void OnDisableReadingScheduleOperationCompleted(object arg) {
            if ((this.DisableReadingScheduleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisableReadingScheduleCompleted(this, new DisableReadingScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/DeleteReadingSchedule", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] DeleteReadingSchedule(string readingScheduleID) {
            object[] results = this.Invoke("DeleteReadingSchedule", new object[] {
                        readingScheduleID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void DeleteReadingScheduleAsync(string readingScheduleID) {
            this.DeleteReadingScheduleAsync(readingScheduleID, null);
        }
        
        /// CodeRemarks
        public void DeleteReadingScheduleAsync(string readingScheduleID, object userState) {
            if ((this.DeleteReadingScheduleOperationCompleted == null)) {
                this.DeleteReadingScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteReadingScheduleOperationCompleted);
            }
            this.InvokeAsync("DeleteReadingSchedule", new object[] {
                        readingScheduleID}, this.DeleteReadingScheduleOperationCompleted, userState);
        }
        
        private void OnDeleteReadingScheduleOperationCompleted(object arg) {
            if ((this.DeleteReadingScheduleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteReadingScheduleCompleted(this, new DeleteReadingScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateMeterReadingsByFieldName", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateMeterReadingsByFieldName(meterID[] meterIDs, string[] fieldNames, string responseURL, string transactionID, expirationTime expTime, string formattedBlockTemplateName) {
            object[] results = this.Invoke("InitiateMeterReadingsByFieldName", new object[] {
                        meterIDs,
                        fieldNames,
                        responseURL,
                        transactionID,
                        expTime,
                        formattedBlockTemplateName});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateMeterReadingsByFieldNameAsync(meterID[] meterIDs, string[] fieldNames, string responseURL, string transactionID, expirationTime expTime, string formattedBlockTemplateName) {
            this.InitiateMeterReadingsByFieldNameAsync(meterIDs, fieldNames, responseURL, transactionID, expTime, formattedBlockTemplateName, null);
        }
        
        /// CodeRemarks
        public void InitiateMeterReadingsByFieldNameAsync(meterID[] meterIDs, string[] fieldNames, string responseURL, string transactionID, expirationTime expTime, string formattedBlockTemplateName, object userState) {
            if ((this.InitiateMeterReadingsByFieldNameOperationCompleted == null)) {
                this.InitiateMeterReadingsByFieldNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateMeterReadingsByFieldNameOperationCompleted);
            }
            this.InvokeAsync("InitiateMeterReadingsByFieldName", new object[] {
                        meterIDs,
                        fieldNames,
                        responseURL,
                        transactionID,
                        expTime,
                        formattedBlockTemplateName}, this.InitiateMeterReadingsByFieldNameOperationCompleted, userState);
        }
        
        private void OnInitiateMeterReadingsByFieldNameOperationCompleted(object arg) {
            if ((this.InitiateMeterReadingsByFieldNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateMeterReadingsByFieldNameCompleted(this, new InitiateMeterReadingsByFieldNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateODEventRequestByServiceLocation", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateODEventRequestByServiceLocation(string[] serviceLocationID, System.DateTime requestDate, string responseURL, string transactionID, expirationTime expTime) {
            object[] results = this.Invoke("InitiateODEventRequestByServiceLocation", new object[] {
                        serviceLocationID,
                        requestDate,
                        responseURL,
                        transactionID,
                        expTime});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateODEventRequestByServiceLocationAsync(string[] serviceLocationID, System.DateTime requestDate, string responseURL, string transactionID, expirationTime expTime) {
            this.InitiateODEventRequestByServiceLocationAsync(serviceLocationID, requestDate, responseURL, transactionID, expTime, null);
        }
        
        /// CodeRemarks
        public void InitiateODEventRequestByServiceLocationAsync(string[] serviceLocationID, System.DateTime requestDate, string responseURL, string transactionID, expirationTime expTime, object userState) {
            if ((this.InitiateODEventRequestByServiceLocationOperationCompleted == null)) {
                this.InitiateODEventRequestByServiceLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateODEventRequestByServiceLocationOperationCompleted);
            }
            this.InvokeAsync("InitiateODEventRequestByServiceLocation", new object[] {
                        serviceLocationID,
                        requestDate,
                        responseURL,
                        transactionID,
                        expTime}, this.InitiateODEventRequestByServiceLocationOperationCompleted, userState);
        }
        
        private void OnInitiateODEventRequestByServiceLocationOperationCompleted(object arg) {
            if ((this.InitiateODEventRequestByServiceLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateODEventRequestByServiceLocationCompleted(this, new InitiateODEventRequestByServiceLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAllActiveOutageEvents", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public outageEvent[] GetAllActiveOutageEvents(string lastReceived) {
            object[] results = this.Invoke("GetAllActiveOutageEvents", new object[] {
                        lastReceived});
            return ((outageEvent[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllActiveOutageEventsAsync(string lastReceived) {
            this.GetAllActiveOutageEventsAsync(lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetAllActiveOutageEventsAsync(string lastReceived, object userState) {
            if ((this.GetAllActiveOutageEventsOperationCompleted == null)) {
                this.GetAllActiveOutageEventsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllActiveOutageEventsOperationCompleted);
            }
            this.InvokeAsync("GetAllActiveOutageEvents", new object[] {
                        lastReceived}, this.GetAllActiveOutageEventsOperationCompleted, userState);
        }
        
        private void OnGetAllActiveOutageEventsOperationCompleted(object arg) {
            if ((this.GetAllActiveOutageEventsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllActiveOutageEventsCompleted(this, new GetAllActiveOutageEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetOutageEvent", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public outageEvent GetOutageEvent(string outageEventID) {
            object[] results = this.Invoke("GetOutageEvent", new object[] {
                        outageEventID});
            return ((outageEvent)(results[0]));
        }
        
        /// CodeRemarks
        public void GetOutageEventAsync(string outageEventID) {
            this.GetOutageEventAsync(outageEventID, null);
        }
        
        /// CodeRemarks
        public void GetOutageEventAsync(string outageEventID, object userState) {
            if ((this.GetOutageEventOperationCompleted == null)) {
                this.GetOutageEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOutageEventOperationCompleted);
            }
            this.InvokeAsync("GetOutageEvent", new object[] {
                        outageEventID}, this.GetOutageEventOperationCompleted, userState);
        }
        
        private void OnGetOutageEventOperationCompleted(object arg) {
            if ((this.GetOutageEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOutageEventCompleted(this, new GetOutageEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetCircuitElementByObject", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public circuitElement GetCircuitElementByObject(string eaLoc) {
            object[] results = this.Invoke("GetCircuitElementByObject", new object[] {
                        eaLoc});
            return ((circuitElement)(results[0]));
        }
        
        /// CodeRemarks
        public void GetCircuitElementByObjectAsync(string eaLoc) {
            this.GetCircuitElementByObjectAsync(eaLoc, null);
        }
        
        /// CodeRemarks
        public void GetCircuitElementByObjectAsync(string eaLoc, object userState) {
            if ((this.GetCircuitElementByObjectOperationCompleted == null)) {
                this.GetCircuitElementByObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCircuitElementByObjectOperationCompleted);
            }
            this.InvokeAsync("GetCircuitElementByObject", new object[] {
                        eaLoc}, this.GetCircuitElementByObjectOperationCompleted, userState);
        }
        
        private void OnGetCircuitElementByObjectOperationCompleted(object arg) {
            if ((this.GetCircuitElementByObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCircuitElementByObjectCompleted(this, new GetCircuitElementByObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAllLoadManagementDevices", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public loadManagementDevice[] GetAllLoadManagementDevices(string lastReceived) {
            object[] results = this.Invoke("GetAllLoadManagementDevices", new object[] {
                        lastReceived});
            return ((loadManagementDevice[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllLoadManagementDevicesAsync(string lastReceived) {
            this.GetAllLoadManagementDevicesAsync(lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetAllLoadManagementDevicesAsync(string lastReceived, object userState) {
            if ((this.GetAllLoadManagementDevicesOperationCompleted == null)) {
                this.GetAllLoadManagementDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllLoadManagementDevicesOperationCompleted);
            }
            this.InvokeAsync("GetAllLoadManagementDevices", new object[] {
                        lastReceived}, this.GetAllLoadManagementDevicesOperationCompleted, userState);
        }
        
        private void OnGetAllLoadManagementDevicesOperationCompleted(object arg) {
            if ((this.GetAllLoadManagementDevicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllLoadManagementDevicesCompleted(this, new GetAllLoadManagementDevicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAmountOfControllableLoad", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public float GetAmountOfControllableLoad() {
            object[] results = this.Invoke("GetAmountOfControllableLoad", new object[0]);
            return ((float)(results[0]));
        }
        
        /// CodeRemarks
        public void GetAmountOfControllableLoadAsync() {
            this.GetAmountOfControllableLoadAsync(null);
        }
        
        /// CodeRemarks
        public void GetAmountOfControllableLoadAsync(object userState) {
            if ((this.GetAmountOfControllableLoadOperationCompleted == null)) {
                this.GetAmountOfControllableLoadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAmountOfControllableLoadOperationCompleted);
            }
            this.InvokeAsync("GetAmountOfControllableLoad", new object[0], this.GetAmountOfControllableLoadOperationCompleted, userState);
        }
        
        private void OnGetAmountOfControllableLoadOperationCompleted(object arg) {
            if ((this.GetAmountOfControllableLoadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAmountOfControllableLoadCompleted(this, new GetAmountOfControllableLoadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAmountOfControlledLoad", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public float GetAmountOfControlledLoad() {
            object[] results = this.Invoke("GetAmountOfControlledLoad", new object[0]);
            return ((float)(results[0]));
        }
        
        /// CodeRemarks
        public void GetAmountOfControlledLoadAsync() {
            this.GetAmountOfControlledLoadAsync(null);
        }
        
        /// CodeRemarks
        public void GetAmountOfControlledLoadAsync(object userState) {
            if ((this.GetAmountOfControlledLoadOperationCompleted == null)) {
                this.GetAmountOfControlledLoadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAmountOfControlledLoadOperationCompleted);
            }
            this.InvokeAsync("GetAmountOfControlledLoad", new object[0], this.GetAmountOfControlledLoadOperationCompleted, userState);
        }
        
        private void OnGetAmountOfControlledLoadOperationCompleted(object arg) {
            if ((this.GetAmountOfControlledLoadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAmountOfControlledLoadCompleted(this, new GetAmountOfControlledLoadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetLoadManagementDeviceByMeterID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public loadManagementDevice[] GetLoadManagementDeviceByMeterID(meterID meterID) {
            object[] results = this.Invoke("GetLoadManagementDeviceByMeterID", new object[] {
                        meterID});
            return ((loadManagementDevice[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetLoadManagementDeviceByMeterIDAsync(meterID meterID) {
            this.GetLoadManagementDeviceByMeterIDAsync(meterID, null);
        }
        
        /// CodeRemarks
        public void GetLoadManagementDeviceByMeterIDAsync(meterID meterID, object userState) {
            if ((this.GetLoadManagementDeviceByMeterIDOperationCompleted == null)) {
                this.GetLoadManagementDeviceByMeterIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLoadManagementDeviceByMeterIDOperationCompleted);
            }
            this.InvokeAsync("GetLoadManagementDeviceByMeterID", new object[] {
                        meterID}, this.GetLoadManagementDeviceByMeterIDOperationCompleted, userState);
        }
        
        private void OnGetLoadManagementDeviceByMeterIDOperationCompleted(object arg) {
            if ((this.GetLoadManagementDeviceByMeterIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLoadManagementDeviceByMeterIDCompleted(this, new GetLoadManagementDeviceByMeterIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetLoadManagementDeviceByServiceLocationID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public loadManagementDevice[] GetLoadManagementDeviceByServiceLocationID(string serviceLocationID, serviceType serviceType) {
            object[] results = this.Invoke("GetLoadManagementDeviceByServiceLocationID", new object[] {
                        serviceLocationID,
                        serviceType});
            return ((loadManagementDevice[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetLoadManagementDeviceByServiceLocationIDAsync(string serviceLocationID, serviceType serviceType) {
            this.GetLoadManagementDeviceByServiceLocationIDAsync(serviceLocationID, serviceType, null);
        }
        
        /// CodeRemarks
        public void GetLoadManagementDeviceByServiceLocationIDAsync(string serviceLocationID, serviceType serviceType, object userState) {
            if ((this.GetLoadManagementDeviceByServiceLocationIDOperationCompleted == null)) {
                this.GetLoadManagementDeviceByServiceLocationIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLoadManagementDeviceByServiceLocationIDOperationCompleted);
            }
            this.InvokeAsync("GetLoadManagementDeviceByServiceLocationID", new object[] {
                        serviceLocationID,
                        serviceType}, this.GetLoadManagementDeviceByServiceLocationIDOperationCompleted, userState);
        }
        
        private void OnGetLoadManagementDeviceByServiceLocationIDOperationCompleted(object arg) {
            if ((this.GetLoadManagementDeviceByServiceLocationIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLoadManagementDeviceByServiceLocationIDCompleted(this, new GetLoadManagementDeviceByServiceLocationIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/IsLoadManagementActive", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsLoadManagementActive(string serviceLocationID, serviceType serviceType) {
            object[] results = this.Invoke("IsLoadManagementActive", new object[] {
                        serviceLocationID,
                        serviceType});
            return ((bool)(results[0]));
        }
        
        /// CodeRemarks
        public void IsLoadManagementActiveAsync(string serviceLocationID, serviceType serviceType) {
            this.IsLoadManagementActiveAsync(serviceLocationID, serviceType, null);
        }
        
        /// CodeRemarks
        public void IsLoadManagementActiveAsync(string serviceLocationID, serviceType serviceType, object userState) {
            if ((this.IsLoadManagementActiveOperationCompleted == null)) {
                this.IsLoadManagementActiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsLoadManagementActiveOperationCompleted);
            }
            this.InvokeAsync("IsLoadManagementActive", new object[] {
                        serviceLocationID,
                        serviceType}, this.IsLoadManagementActiveOperationCompleted, userState);
        }
        
        private void OnIsLoadManagementActiveOperationCompleted(object arg) {
            if ((this.IsLoadManagementActiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsLoadManagementActiveCompleted(this, new IsLoadManagementActiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAllSubstationLoadControlStatuses", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public substationLoadControlStatus[] GetAllSubstationLoadControlStatuses() {
            object[] results = this.Invoke("GetAllSubstationLoadControlStatuses", new object[0]);
            return ((substationLoadControlStatus[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllSubstationLoadControlStatusesAsync() {
            this.GetAllSubstationLoadControlStatusesAsync(null);
        }
        
        /// CodeRemarks
        public void GetAllSubstationLoadControlStatusesAsync(object userState) {
            if ((this.GetAllSubstationLoadControlStatusesOperationCompleted == null)) {
                this.GetAllSubstationLoadControlStatusesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllSubstationLoadControlStatusesOperationCompleted);
            }
            this.InvokeAsync("GetAllSubstationLoadControlStatuses", new object[0], this.GetAllSubstationLoadControlStatusesOperationCompleted, userState);
        }
        
        private void OnGetAllSubstationLoadControlStatusesOperationCompleted(object arg) {
            if ((this.GetAllSubstationLoadControlStatusesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllSubstationLoadControlStatusesCompleted(this, new GetAllSubstationLoadControlStatusesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/ModifyODDataForOutageDetectionDevice", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] ModifyODDataForOutageDetectionDevice(outageDetectionDevice oDDevice) {
            object[] results = this.Invoke("ModifyODDataForOutageDetectionDevice", new object[] {
                        oDDevice});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void ModifyODDataForOutageDetectionDeviceAsync(outageDetectionDevice oDDevice) {
            this.ModifyODDataForOutageDetectionDeviceAsync(oDDevice, null);
        }
        
        /// CodeRemarks
        public void ModifyODDataForOutageDetectionDeviceAsync(outageDetectionDevice oDDevice, object userState) {
            if ((this.ModifyODDataForOutageDetectionDeviceOperationCompleted == null)) {
                this.ModifyODDataForOutageDetectionDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyODDataForOutageDetectionDeviceOperationCompleted);
            }
            this.InvokeAsync("ModifyODDataForOutageDetectionDevice", new object[] {
                        oDDevice}, this.ModifyODDataForOutageDetectionDeviceOperationCompleted, userState);
        }
        
        private void OnModifyODDataForOutageDetectionDeviceOperationCompleted(object arg) {
            if ((this.ModifyODDataForOutageDetectionDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyODDataForOutageDetectionDeviceCompleted(this, new ModifyODDataForOutageDetectionDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/BlinkAlarmNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] BlinkAlarmNotification(blinkAlarm[] alarms) {
            object[] results = this.Invoke("BlinkAlarmNotification", new object[] {
                        alarms});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void BlinkAlarmNotificationAsync(blinkAlarm[] alarms) {
            this.BlinkAlarmNotificationAsync(alarms, null);
        }
        
        /// CodeRemarks
        public void BlinkAlarmNotificationAsync(blinkAlarm[] alarms, object userState) {
            if ((this.BlinkAlarmNotificationOperationCompleted == null)) {
                this.BlinkAlarmNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBlinkAlarmNotificationOperationCompleted);
            }
            this.InvokeAsync("BlinkAlarmNotification", new object[] {
                        alarms}, this.BlinkAlarmNotificationOperationCompleted, userState);
        }
        
        private void OnBlinkAlarmNotificationOperationCompleted(object arg) {
            if ((this.BlinkAlarmNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BlinkAlarmNotificationCompleted(this, new BlinkAlarmNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/VoltageAlarmNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] VoltageAlarmNotification(voltageAlarm[] alarms) {
            object[] results = this.Invoke("VoltageAlarmNotification", new object[] {
                        alarms});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void VoltageAlarmNotificationAsync(voltageAlarm[] alarms) {
            this.VoltageAlarmNotificationAsync(alarms, null);
        }
        
        /// CodeRemarks
        public void VoltageAlarmNotificationAsync(voltageAlarm[] alarms, object userState) {
            if ((this.VoltageAlarmNotificationOperationCompleted == null)) {
                this.VoltageAlarmNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVoltageAlarmNotificationOperationCompleted);
            }
            this.InvokeAsync("VoltageAlarmNotification", new object[] {
                        alarms}, this.VoltageAlarmNotificationOperationCompleted, userState);
        }
        
        private void OnVoltageAlarmNotificationOperationCompleted(object arg) {
            if ((this.VoltageAlarmNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VoltageAlarmNotificationCompleted(this, new VoltageAlarmNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CustomerChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CustomerChangedNotification(customer[] changedCustomers) {
            object[] results = this.Invoke("CustomerChangedNotification", new object[] {
                        changedCustomers});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CustomerChangedNotificationAsync(customer[] changedCustomers) {
            this.CustomerChangedNotificationAsync(changedCustomers, null);
        }
        
        /// CodeRemarks
        public void CustomerChangedNotificationAsync(customer[] changedCustomers, object userState) {
            if ((this.CustomerChangedNotificationOperationCompleted == null)) {
                this.CustomerChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("CustomerChangedNotification", new object[] {
                        changedCustomers}, this.CustomerChangedNotificationOperationCompleted, userState);
        }
        
        private void OnCustomerChangedNotificationOperationCompleted(object arg) {
            if ((this.CustomerChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerChangedNotificationCompleted(this, new CustomerChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/AccountChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] AccountChangedNotification(account[] changedAccounts) {
            object[] results = this.Invoke("AccountChangedNotification", new object[] {
                        changedAccounts});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void AccountChangedNotificationAsync(account[] changedAccounts) {
            this.AccountChangedNotificationAsync(changedAccounts, null);
        }
        
        /// CodeRemarks
        public void AccountChangedNotificationAsync(account[] changedAccounts, object userState) {
            if ((this.AccountChangedNotificationOperationCompleted == null)) {
                this.AccountChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAccountChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("AccountChangedNotification", new object[] {
                        changedAccounts}, this.AccountChangedNotificationOperationCompleted, userState);
        }
        
        private void OnAccountChangedNotificationOperationCompleted(object arg) {
            if ((this.AccountChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AccountChangedNotificationCompleted(this, new AccountChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/ServiceLocationChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] ServiceLocationChangedNotification(serviceLocation[] changedServiceLocations) {
            object[] results = this.Invoke("ServiceLocationChangedNotification", new object[] {
                        changedServiceLocations});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void ServiceLocationChangedNotificationAsync(serviceLocation[] changedServiceLocations) {
            this.ServiceLocationChangedNotificationAsync(changedServiceLocations, null);
        }
        
        /// CodeRemarks
        public void ServiceLocationChangedNotificationAsync(serviceLocation[] changedServiceLocations, object userState) {
            if ((this.ServiceLocationChangedNotificationOperationCompleted == null)) {
                this.ServiceLocationChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceLocationChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("ServiceLocationChangedNotification", new object[] {
                        changedServiceLocations}, this.ServiceLocationChangedNotificationOperationCompleted, userState);
        }
        
        private void OnServiceLocationChangedNotificationOperationCompleted(object arg) {
            if ((this.ServiceLocationChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ServiceLocationChangedNotificationCompleted(this, new ServiceLocationChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/MeterChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] MeterChangedNotification(meters changedMeters) {
            object[] results = this.Invoke("MeterChangedNotification", new object[] {
                        changedMeters});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void MeterChangedNotificationAsync(meters changedMeters) {
            this.MeterChangedNotificationAsync(changedMeters, null);
        }
        
        /// CodeRemarks
        public void MeterChangedNotificationAsync(meters changedMeters, object userState) {
            if ((this.MeterChangedNotificationOperationCompleted == null)) {
                this.MeterChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMeterChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("MeterChangedNotification", new object[] {
                        changedMeters}, this.MeterChangedNotificationOperationCompleted, userState);
        }
        
        private void OnMeterChangedNotificationOperationCompleted(object arg) {
            if ((this.MeterChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MeterChangedNotificationCompleted(this, new MeterChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/MeterRemoveNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] MeterRemoveNotification(meters removedMeters) {
            object[] results = this.Invoke("MeterRemoveNotification", new object[] {
                        removedMeters});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void MeterRemoveNotificationAsync(meters removedMeters) {
            this.MeterRemoveNotificationAsync(removedMeters, null);
        }
        
        /// CodeRemarks
        public void MeterRemoveNotificationAsync(meters removedMeters, object userState) {
            if ((this.MeterRemoveNotificationOperationCompleted == null)) {
                this.MeterRemoveNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMeterRemoveNotificationOperationCompleted);
            }
            this.InvokeAsync("MeterRemoveNotification", new object[] {
                        removedMeters}, this.MeterRemoveNotificationOperationCompleted, userState);
        }
        
        private void OnMeterRemoveNotificationOperationCompleted(object arg) {
            if ((this.MeterRemoveNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MeterRemoveNotificationCompleted(this, new MeterRemoveNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/MeterRetireNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] MeterRetireNotification(meters retiredMeters) {
            object[] results = this.Invoke("MeterRetireNotification", new object[] {
                        retiredMeters});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void MeterRetireNotificationAsync(meters retiredMeters) {
            this.MeterRetireNotificationAsync(retiredMeters, null);
        }
        
        /// CodeRemarks
        public void MeterRetireNotificationAsync(meters retiredMeters, object userState) {
            if ((this.MeterRetireNotificationOperationCompleted == null)) {
                this.MeterRetireNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMeterRetireNotificationOperationCompleted);
            }
            this.InvokeAsync("MeterRetireNotification", new object[] {
                        retiredMeters}, this.MeterRetireNotificationOperationCompleted, userState);
        }
        
        private void OnMeterRetireNotificationOperationCompleted(object arg) {
            if ((this.MeterRetireNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MeterRetireNotificationCompleted(this, new MeterRetireNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/MeterAddNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] MeterAddNotification(meters addedMeters) {
            object[] results = this.Invoke("MeterAddNotification", new object[] {
                        addedMeters});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void MeterAddNotificationAsync(meters addedMeters) {
            this.MeterAddNotificationAsync(addedMeters, null);
        }
        
        /// CodeRemarks
        public void MeterAddNotificationAsync(meters addedMeters, object userState) {
            if ((this.MeterAddNotificationOperationCompleted == null)) {
                this.MeterAddNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMeterAddNotificationOperationCompleted);
            }
            this.InvokeAsync("MeterAddNotification", new object[] {
                        addedMeters}, this.MeterAddNotificationOperationCompleted, userState);
        }
        
        private void OnMeterAddNotificationOperationCompleted(object arg) {
            if ((this.MeterAddNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MeterAddNotificationCompleted(this, new MeterAddNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/MeterExchangeNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] MeterExchangeNotification(meterExchanges meterChangeout) {
            object[] results = this.Invoke("MeterExchangeNotification", new object[] {
                        meterChangeout});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void MeterExchangeNotificationAsync(meterExchanges meterChangeout) {
            this.MeterExchangeNotificationAsync(meterChangeout, null);
        }
        
        /// CodeRemarks
        public void MeterExchangeNotificationAsync(meterExchanges meterChangeout, object userState) {
            if ((this.MeterExchangeNotificationOperationCompleted == null)) {
                this.MeterExchangeNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMeterExchangeNotificationOperationCompleted);
            }
            this.InvokeAsync("MeterExchangeNotification", new object[] {
                        meterChangeout}, this.MeterExchangeNotificationOperationCompleted, userState);
        }
        
        private void OnMeterExchangeNotificationOperationCompleted(object arg) {
            if ((this.MeterExchangeNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MeterExchangeNotificationCompleted(this, new MeterExchangeNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CustomersAffectedByOutageNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CustomersAffectedByOutageNotification(customersAffectedByOutage[] newOutages) {
            object[] results = this.Invoke("CustomersAffectedByOutageNotification", new object[] {
                        newOutages});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CustomersAffectedByOutageNotificationAsync(customersAffectedByOutage[] newOutages) {
            this.CustomersAffectedByOutageNotificationAsync(newOutages, null);
        }
        
        /// CodeRemarks
        public void CustomersAffectedByOutageNotificationAsync(customersAffectedByOutage[] newOutages, object userState) {
            if ((this.CustomersAffectedByOutageNotificationOperationCompleted == null)) {
                this.CustomersAffectedByOutageNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomersAffectedByOutageNotificationOperationCompleted);
            }
            this.InvokeAsync("CustomersAffectedByOutageNotification", new object[] {
                        newOutages}, this.CustomersAffectedByOutageNotificationOperationCompleted, userState);
        }
        
        private void OnCustomersAffectedByOutageNotificationOperationCompleted(object arg) {
            if ((this.CustomersAffectedByOutageNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomersAffectedByOutageNotificationCompleted(this, new CustomersAffectedByOutageNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/MeterConnectivityNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] MeterConnectivityNotification(meterConnectivity[] newConnectivity) {
            object[] results = this.Invoke("MeterConnectivityNotification", new object[] {
                        newConnectivity});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void MeterConnectivityNotificationAsync(meterConnectivity[] newConnectivity) {
            this.MeterConnectivityNotificationAsync(newConnectivity, null);
        }
        
        /// CodeRemarks
        public void MeterConnectivityNotificationAsync(meterConnectivity[] newConnectivity, object userState) {
            if ((this.MeterConnectivityNotificationOperationCompleted == null)) {
                this.MeterConnectivityNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMeterConnectivityNotificationOperationCompleted);
            }
            this.InvokeAsync("MeterConnectivityNotification", new object[] {
                        newConnectivity}, this.MeterConnectivityNotificationOperationCompleted, userState);
        }
        
        private void OnMeterConnectivityNotificationOperationCompleted(object arg) {
            if ((this.MeterConnectivityNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MeterConnectivityNotificationCompleted(this, new MeterConnectivityNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/EndDeviceShipmentNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] EndDeviceShipmentNotification(endDeviceShipment shipment) {
            object[] results = this.Invoke("EndDeviceShipmentNotification", new object[] {
                        shipment});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void EndDeviceShipmentNotificationAsync(endDeviceShipment shipment) {
            this.EndDeviceShipmentNotificationAsync(shipment, null);
        }
        
        /// CodeRemarks
        public void EndDeviceShipmentNotificationAsync(endDeviceShipment shipment, object userState) {
            if ((this.EndDeviceShipmentNotificationOperationCompleted == null)) {
                this.EndDeviceShipmentNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEndDeviceShipmentNotificationOperationCompleted);
            }
            this.InvokeAsync("EndDeviceShipmentNotification", new object[] {
                        shipment}, this.EndDeviceShipmentNotificationOperationCompleted, userState);
        }
        
        private void OnEndDeviceShipmentNotificationOperationCompleted(object arg) {
            if ((this.EndDeviceShipmentNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EndDeviceShipmentNotificationCompleted(this, new EndDeviceShipmentNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/FormattedBlockNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] FormattedBlockNotification(formattedBlock changedMeterReads, string transactionID, string errorString) {
            object[] results = this.Invoke("FormattedBlockNotification", new object[] {
                        changedMeterReads,
                        transactionID,
                        errorString});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void FormattedBlockNotificationAsync(formattedBlock changedMeterReads, string transactionID, string errorString) {
            this.FormattedBlockNotificationAsync(changedMeterReads, transactionID, errorString, null);
        }
        
        /// CodeRemarks
        public void FormattedBlockNotificationAsync(formattedBlock changedMeterReads, string transactionID, string errorString, object userState) {
            if ((this.FormattedBlockNotificationOperationCompleted == null)) {
                this.FormattedBlockNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFormattedBlockNotificationOperationCompleted);
            }
            this.InvokeAsync("FormattedBlockNotification", new object[] {
                        changedMeterReads,
                        transactionID,
                        errorString}, this.FormattedBlockNotificationOperationCompleted, userState);
        }
        
        private void OnFormattedBlockNotificationOperationCompleted(object arg) {
            if ((this.FormattedBlockNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FormattedBlockNotificationCompleted(this, new FormattedBlockNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/ODEventNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] ODEventNotification(outageDetectionEvent[] ODEvents, string transactionID) {
            object[] results = this.Invoke("ODEventNotification", new object[] {
                        ODEvents,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void ODEventNotificationAsync(outageDetectionEvent[] ODEvents, string transactionID) {
            this.ODEventNotificationAsync(ODEvents, transactionID, null);
        }
        
        /// CodeRemarks
        public void ODEventNotificationAsync(outageDetectionEvent[] ODEvents, string transactionID, object userState) {
            if ((this.ODEventNotificationOperationCompleted == null)) {
                this.ODEventNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnODEventNotificationOperationCompleted);
            }
            this.InvokeAsync("ODEventNotification", new object[] {
                        ODEvents,
                        transactionID}, this.ODEventNotificationOperationCompleted, userState);
        }
        
        private void OnODEventNotificationOperationCompleted(object arg) {
            if ((this.ODEventNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ODEventNotificationCompleted(this, new ODEventNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/ODDeviceChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] ODDeviceChangedNotification(outageDetectionDevice[] ODDevices) {
            object[] results = this.Invoke("ODDeviceChangedNotification", new object[] {
                        ODDevices});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void ODDeviceChangedNotificationAsync(outageDetectionDevice[] ODDevices) {
            this.ODDeviceChangedNotificationAsync(ODDevices, null);
        }
        
        /// CodeRemarks
        public void ODDeviceChangedNotificationAsync(outageDetectionDevice[] ODDevices, object userState) {
            if ((this.ODDeviceChangedNotificationOperationCompleted == null)) {
                this.ODDeviceChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnODDeviceChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("ODDeviceChangedNotification", new object[] {
                        ODDevices}, this.ODDeviceChangedNotificationOperationCompleted, userState);
        }
        
        private void OnODDeviceChangedNotificationOperationCompleted(object arg) {
            if ((this.ODDeviceChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ODDeviceChangedNotificationCompleted(this, new ODDeviceChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CDDeviceAddNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CDDeviceAddNotification(CDDevice[] addedCDDs) {
            object[] results = this.Invoke("CDDeviceAddNotification", new object[] {
                        addedCDDs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CDDeviceAddNotificationAsync(CDDevice[] addedCDDs) {
            this.CDDeviceAddNotificationAsync(addedCDDs, null);
        }
        
        /// CodeRemarks
        public void CDDeviceAddNotificationAsync(CDDevice[] addedCDDs, object userState) {
            if ((this.CDDeviceAddNotificationOperationCompleted == null)) {
                this.CDDeviceAddNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCDDeviceAddNotificationOperationCompleted);
            }
            this.InvokeAsync("CDDeviceAddNotification", new object[] {
                        addedCDDs}, this.CDDeviceAddNotificationOperationCompleted, userState);
        }
        
        private void OnCDDeviceAddNotificationOperationCompleted(object arg) {
            if ((this.CDDeviceAddNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CDDeviceAddNotificationCompleted(this, new CDDeviceAddNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CDDeviceChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CDDeviceChangedNotification(CDDevice[] changedCDDs) {
            object[] results = this.Invoke("CDDeviceChangedNotification", new object[] {
                        changedCDDs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CDDeviceChangedNotificationAsync(CDDevice[] changedCDDs) {
            this.CDDeviceChangedNotificationAsync(changedCDDs, null);
        }
        
        /// CodeRemarks
        public void CDDeviceChangedNotificationAsync(CDDevice[] changedCDDs, object userState) {
            if ((this.CDDeviceChangedNotificationOperationCompleted == null)) {
                this.CDDeviceChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCDDeviceChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("CDDeviceChangedNotification", new object[] {
                        changedCDDs}, this.CDDeviceChangedNotificationOperationCompleted, userState);
        }
        
        private void OnCDDeviceChangedNotificationOperationCompleted(object arg) {
            if ((this.CDDeviceChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CDDeviceChangedNotificationCompleted(this, new CDDeviceChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CDDeviceExchangeNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CDDeviceExchangeNotification(CDDeviceExchange[] CDDChangeout) {
            object[] results = this.Invoke("CDDeviceExchangeNotification", new object[] {
                        CDDChangeout});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CDDeviceExchangeNotificationAsync(CDDeviceExchange[] CDDChangeout) {
            this.CDDeviceExchangeNotificationAsync(CDDChangeout, null);
        }
        
        /// CodeRemarks
        public void CDDeviceExchangeNotificationAsync(CDDeviceExchange[] CDDChangeout, object userState) {
            if ((this.CDDeviceExchangeNotificationOperationCompleted == null)) {
                this.CDDeviceExchangeNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCDDeviceExchangeNotificationOperationCompleted);
            }
            this.InvokeAsync("CDDeviceExchangeNotification", new object[] {
                        CDDChangeout}, this.CDDeviceExchangeNotificationOperationCompleted, userState);
        }
        
        private void OnCDDeviceExchangeNotificationOperationCompleted(object arg) {
            if ((this.CDDeviceExchangeNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CDDeviceExchangeNotificationCompleted(this, new CDDeviceExchangeNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CDDeviceRemoveNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CDDeviceRemoveNotification(CDDevice[] removedCDDs) {
            object[] results = this.Invoke("CDDeviceRemoveNotification", new object[] {
                        removedCDDs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CDDeviceRemoveNotificationAsync(CDDevice[] removedCDDs) {
            this.CDDeviceRemoveNotificationAsync(removedCDDs, null);
        }
        
        /// CodeRemarks
        public void CDDeviceRemoveNotificationAsync(CDDevice[] removedCDDs, object userState) {
            if ((this.CDDeviceRemoveNotificationOperationCompleted == null)) {
                this.CDDeviceRemoveNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCDDeviceRemoveNotificationOperationCompleted);
            }
            this.InvokeAsync("CDDeviceRemoveNotification", new object[] {
                        removedCDDs}, this.CDDeviceRemoveNotificationOperationCompleted, userState);
        }
        
        private void OnCDDeviceRemoveNotificationOperationCompleted(object arg) {
            if ((this.CDDeviceRemoveNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CDDeviceRemoveNotificationCompleted(this, new CDDeviceRemoveNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CDDeviceInstalledNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CDDeviceInstalledNotification(CDDevice[] installedCDDs) {
            object[] results = this.Invoke("CDDeviceInstalledNotification", new object[] {
                        installedCDDs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CDDeviceInstalledNotificationAsync(CDDevice[] installedCDDs) {
            this.CDDeviceInstalledNotificationAsync(installedCDDs, null);
        }
        
        /// CodeRemarks
        public void CDDeviceInstalledNotificationAsync(CDDevice[] installedCDDs, object userState) {
            if ((this.CDDeviceInstalledNotificationOperationCompleted == null)) {
                this.CDDeviceInstalledNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCDDeviceInstalledNotificationOperationCompleted);
            }
            this.InvokeAsync("CDDeviceInstalledNotification", new object[] {
                        installedCDDs}, this.CDDeviceInstalledNotificationOperationCompleted, userState);
        }
        
        private void OnCDDeviceInstalledNotificationOperationCompleted(object arg) {
            if ((this.CDDeviceInstalledNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CDDeviceInstalledNotificationCompleted(this, new CDDeviceInstalledNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/CDDeviceRetireNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] CDDeviceRetireNotification(CDDevice[] retiredCDDs) {
            object[] results = this.Invoke("CDDeviceRetireNotification", new object[] {
                        retiredCDDs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void CDDeviceRetireNotificationAsync(CDDevice[] retiredCDDs) {
            this.CDDeviceRetireNotificationAsync(retiredCDDs, null);
        }
        
        /// CodeRemarks
        public void CDDeviceRetireNotificationAsync(CDDevice[] retiredCDDs, object userState) {
            if ((this.CDDeviceRetireNotificationOperationCompleted == null)) {
                this.CDDeviceRetireNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCDDeviceRetireNotificationOperationCompleted);
            }
            this.InvokeAsync("CDDeviceRetireNotification", new object[] {
                        retiredCDDs}, this.CDDeviceRetireNotificationOperationCompleted, userState);
        }
        
        private void OnCDDeviceRetireNotificationOperationCompleted(object arg) {
            if ((this.CDDeviceRetireNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CDDeviceRetireNotificationCompleted(this, new CDDeviceRetireNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/HistoryLogChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] HistoryLogChangedNotification(historyLog[] changedHistoryLogs) {
            object[] results = this.Invoke("HistoryLogChangedNotification", new object[] {
                        changedHistoryLogs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void HistoryLogChangedNotificationAsync(historyLog[] changedHistoryLogs) {
            this.HistoryLogChangedNotificationAsync(changedHistoryLogs, null);
        }
        
        /// CodeRemarks
        public void HistoryLogChangedNotificationAsync(historyLog[] changedHistoryLogs, object userState) {
            if ((this.HistoryLogChangedNotificationOperationCompleted == null)) {
                this.HistoryLogChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHistoryLogChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("HistoryLogChangedNotification", new object[] {
                        changedHistoryLogs}, this.HistoryLogChangedNotificationOperationCompleted, userState);
        }
        
        private void OnHistoryLogChangedNotificationOperationCompleted(object arg) {
            if ((this.HistoryLogChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HistoryLogChangedNotificationCompleted(this, new HistoryLogChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/LoadProfileChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] LoadProfileChangedNotification(profileObject[] changedLoadProfiles) {
            object[] results = this.Invoke("LoadProfileChangedNotification", new object[] {
                        changedLoadProfiles});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void LoadProfileChangedNotificationAsync(profileObject[] changedLoadProfiles) {
            this.LoadProfileChangedNotificationAsync(changedLoadProfiles, null);
        }
        
        /// CodeRemarks
        public void LoadProfileChangedNotificationAsync(profileObject[] changedLoadProfiles, object userState) {
            if ((this.LoadProfileChangedNotificationOperationCompleted == null)) {
                this.LoadProfileChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadProfileChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("LoadProfileChangedNotification", new object[] {
                        changedLoadProfiles}, this.LoadProfileChangedNotificationOperationCompleted, userState);
        }
        
        private void OnLoadProfileChangedNotificationOperationCompleted(object arg) {
            if ((this.LoadProfileChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadProfileChangedNotificationCompleted(this, new LoadProfileChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/MeterTestNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] MeterTestNotification(testedElectricMeter[] tests, string transactionID) {
            object[] results = this.Invoke("MeterTestNotification", new object[] {
                        tests,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void MeterTestNotificationAsync(testedElectricMeter[] tests, string transactionID) {
            this.MeterTestNotificationAsync(tests, transactionID, null);
        }
        
        /// CodeRemarks
        public void MeterTestNotificationAsync(testedElectricMeter[] tests, string transactionID, object userState) {
            if ((this.MeterTestNotificationOperationCompleted == null)) {
                this.MeterTestNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMeterTestNotificationOperationCompleted);
            }
            this.InvokeAsync("MeterTestNotification", new object[] {
                        tests,
                        transactionID}, this.MeterTestNotificationOperationCompleted, userState);
        }
        
        private void OnMeterTestNotificationOperationCompleted(object arg) {
            if ((this.MeterTestNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MeterTestNotificationCompleted(this, new MeterTestNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/MeterInstalledNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] MeterInstalledNotification(meters addedMeters, string transactionID) {
            object[] results = this.Invoke("MeterInstalledNotification", new object[] {
                        addedMeters,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void MeterInstalledNotificationAsync(meters addedMeters, string transactionID) {
            this.MeterInstalledNotificationAsync(addedMeters, transactionID, null);
        }
        
        /// CodeRemarks
        public void MeterInstalledNotificationAsync(meters addedMeters, string transactionID, object userState) {
            if ((this.MeterInstalledNotificationOperationCompleted == null)) {
                this.MeterInstalledNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMeterInstalledNotificationOperationCompleted);
            }
            this.InvokeAsync("MeterInstalledNotification", new object[] {
                        addedMeters,
                        transactionID}, this.MeterInstalledNotificationOperationCompleted, userState);
        }
        
        private void OnMeterInstalledNotificationOperationCompleted(object arg) {
            if ((this.MeterInstalledNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MeterInstalledNotificationCompleted(this, new MeterInstalledNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/PPMMeterExchangeNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] PPMMeterExchangeNotification(meterExchanges changeouts) {
            object[] results = this.Invoke("PPMMeterExchangeNotification", new object[] {
                        changeouts});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void PPMMeterExchangeNotificationAsync(meterExchanges changeouts) {
            this.PPMMeterExchangeNotificationAsync(changeouts, null);
        }
        
        /// CodeRemarks
        public void PPMMeterExchangeNotificationAsync(meterExchanges changeouts, object userState) {
            if ((this.PPMMeterExchangeNotificationOperationCompleted == null)) {
                this.PPMMeterExchangeNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPPMMeterExchangeNotificationOperationCompleted);
            }
            this.InvokeAsync("PPMMeterExchangeNotification", new object[] {
                        changeouts}, this.PPMMeterExchangeNotificationOperationCompleted, userState);
        }
        
        private void OnPPMMeterExchangeNotificationOperationCompleted(object arg) {
            if ((this.PPMMeterExchangeNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PPMMeterExchangeNotificationCompleted(this, new PPMMeterExchangeNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/ChargeableDeviceChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] ChargeableDeviceChangedNotification(chargeableDeviceList[] deviceList) {
            object[] results = this.Invoke("ChargeableDeviceChangedNotification", new object[] {
                        deviceList});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void ChargeableDeviceChangedNotificationAsync(chargeableDeviceList[] deviceList) {
            this.ChargeableDeviceChangedNotificationAsync(deviceList, null);
        }
        
        /// CodeRemarks
        public void ChargeableDeviceChangedNotificationAsync(chargeableDeviceList[] deviceList, object userState) {
            if ((this.ChargeableDeviceChangedNotificationOperationCompleted == null)) {
                this.ChargeableDeviceChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChargeableDeviceChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("ChargeableDeviceChangedNotification", new object[] {
                        deviceList}, this.ChargeableDeviceChangedNotificationOperationCompleted, userState);
        }
        
        private void OnChargeableDeviceChangedNotificationOperationCompleted(object arg) {
            if ((this.ChargeableDeviceChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChargeableDeviceChangedNotificationCompleted(this, new ChargeableDeviceChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/ModifyCBDataForCustomer", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] ModifyCBDataForCustomer(customer[] customerData) {
            object[] results = this.Invoke("ModifyCBDataForCustomer", new object[] {
                        customerData});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void ModifyCBDataForCustomerAsync(customer[] customerData) {
            this.ModifyCBDataForCustomerAsync(customerData, null);
        }
        
        /// CodeRemarks
        public void ModifyCBDataForCustomerAsync(customer[] customerData, object userState) {
            if ((this.ModifyCBDataForCustomerOperationCompleted == null)) {
                this.ModifyCBDataForCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyCBDataForCustomerOperationCompleted);
            }
            this.InvokeAsync("ModifyCBDataForCustomer", new object[] {
                        customerData}, this.ModifyCBDataForCustomerOperationCompleted, userState);
        }
        
        private void OnModifyCBDataForCustomerOperationCompleted(object arg) {
            if ((this.ModifyCBDataForCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyCBDataForCustomerCompleted(this, new ModifyCBDataForCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/ModifyCBDataForServiceLocations", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] ModifyCBDataForServiceLocations(serviceLocation[] serviceLocationData) {
            object[] results = this.Invoke("ModifyCBDataForServiceLocations", new object[] {
                        serviceLocationData});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void ModifyCBDataForServiceLocationsAsync(serviceLocation[] serviceLocationData) {
            this.ModifyCBDataForServiceLocationsAsync(serviceLocationData, null);
        }
        
        /// CodeRemarks
        public void ModifyCBDataForServiceLocationsAsync(serviceLocation[] serviceLocationData, object userState) {
            if ((this.ModifyCBDataForServiceLocationsOperationCompleted == null)) {
                this.ModifyCBDataForServiceLocationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyCBDataForServiceLocationsOperationCompleted);
            }
            this.InvokeAsync("ModifyCBDataForServiceLocations", new object[] {
                        serviceLocationData}, this.ModifyCBDataForServiceLocationsOperationCompleted, userState);
        }
        
        private void OnModifyCBDataForServiceLocationsOperationCompleted(object arg) {
            if ((this.ModifyCBDataForServiceLocationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyCBDataForServiceLocationsCompleted(this, new ModifyCBDataForServiceLocationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/ModifyCBDataForMeters", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] ModifyCBDataForMeters(meters meterData) {
            object[] results = this.Invoke("ModifyCBDataForMeters", new object[] {
                        meterData});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void ModifyCBDataForMetersAsync(meters meterData) {
            this.ModifyCBDataForMetersAsync(meterData, null);
        }
        
        /// CodeRemarks
        public void ModifyCBDataForMetersAsync(meters meterData, object userState) {
            if ((this.ModifyCBDataForMetersOperationCompleted == null)) {
                this.ModifyCBDataForMetersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyCBDataForMetersOperationCompleted);
            }
            this.InvokeAsync("ModifyCBDataForMeters", new object[] {
                        meterData}, this.ModifyCBDataForMetersOperationCompleted, userState);
        }
        
        private void OnModifyCBDataForMetersOperationCompleted(object arg) {
            if ((this.ModifyCBDataForMetersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyCBDataForMetersCompleted(this, new ModifyCBDataForMetersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/ReadingChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] ReadingChangedNotification(meterReading[] changedMeterReads, string transactionID) {
            object[] results = this.Invoke("ReadingChangedNotification", new object[] {
                        changedMeterReads,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void ReadingChangedNotificationAsync(meterReading[] changedMeterReads, string transactionID) {
            this.ReadingChangedNotificationAsync(changedMeterReads, transactionID, null);
        }
        
        /// CodeRemarks
        public void ReadingChangedNotificationAsync(meterReading[] changedMeterReads, string transactionID, object userState) {
            if ((this.ReadingChangedNotificationOperationCompleted == null)) {
                this.ReadingChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadingChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("ReadingChangedNotification", new object[] {
                        changedMeterReads,
                        transactionID}, this.ReadingChangedNotificationOperationCompleted, userState);
        }
        
        private void OnReadingChangedNotificationOperationCompleted(object arg) {
            if ((this.ReadingChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadingChangedNotificationCompleted(this, new ReadingChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/IHDMessageStatusNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] IHDMessageStatusNotification(IHDMessageStatus messageStatus, string messageID, HANDeviceID hanDeviceID, string transactionID, HANInterfaceID interfaceID, IHDMessageType messageType) {
            object[] results = this.Invoke("IHDMessageStatusNotification", new object[] {
                        messageStatus,
                        messageID,
                        hanDeviceID,
                        transactionID,
                        interfaceID,
                        messageType});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void IHDMessageStatusNotificationAsync(IHDMessageStatus messageStatus, string messageID, HANDeviceID hanDeviceID, string transactionID, HANInterfaceID interfaceID, IHDMessageType messageType) {
            this.IHDMessageStatusNotificationAsync(messageStatus, messageID, hanDeviceID, transactionID, interfaceID, messageType, null);
        }
        
        /// CodeRemarks
        public void IHDMessageStatusNotificationAsync(IHDMessageStatus messageStatus, string messageID, HANDeviceID hanDeviceID, string transactionID, HANInterfaceID interfaceID, IHDMessageType messageType, object userState) {
            if ((this.IHDMessageStatusNotificationOperationCompleted == null)) {
                this.IHDMessageStatusNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIHDMessageStatusNotificationOperationCompleted);
            }
            this.InvokeAsync("IHDMessageStatusNotification", new object[] {
                        messageStatus,
                        messageID,
                        hanDeviceID,
                        transactionID,
                        interfaceID,
                        messageType}, this.IHDMessageStatusNotificationOperationCompleted, userState);
        }
        
        private void OnIHDMessageStatusNotificationOperationCompleted(object arg) {
            if ((this.IHDMessageStatusNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IHDMessageStatusNotificationCompleted(this, new IHDMessageStatusNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/IHDMessageConfirmedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] IHDMessageConfirmedNotification(string inHomeDisplayMessageID, HANDeviceID hanDeviceID, string transactionID, HANInterfaceID interfaceID, System.DateTime messageConfirmedTime, string errorString) {
            object[] results = this.Invoke("IHDMessageConfirmedNotification", new object[] {
                        inHomeDisplayMessageID,
                        hanDeviceID,
                        transactionID,
                        interfaceID,
                        messageConfirmedTime,
                        errorString});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void IHDMessageConfirmedNotificationAsync(string inHomeDisplayMessageID, HANDeviceID hanDeviceID, string transactionID, HANInterfaceID interfaceID, System.DateTime messageConfirmedTime, string errorString) {
            this.IHDMessageConfirmedNotificationAsync(inHomeDisplayMessageID, hanDeviceID, transactionID, interfaceID, messageConfirmedTime, errorString, null);
        }
        
        /// CodeRemarks
        public void IHDMessageConfirmedNotificationAsync(string inHomeDisplayMessageID, HANDeviceID hanDeviceID, string transactionID, HANInterfaceID interfaceID, System.DateTime messageConfirmedTime, string errorString, object userState) {
            if ((this.IHDMessageConfirmedNotificationOperationCompleted == null)) {
                this.IHDMessageConfirmedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIHDMessageConfirmedNotificationOperationCompleted);
            }
            this.InvokeAsync("IHDMessageConfirmedNotification", new object[] {
                        inHomeDisplayMessageID,
                        hanDeviceID,
                        transactionID,
                        interfaceID,
                        messageConfirmedTime,
                        errorString}, this.IHDMessageConfirmedNotificationOperationCompleted, userState);
        }
        
        private void OnIHDMessageConfirmedNotificationOperationCompleted(object arg) {
            if ((this.IHDMessageConfirmedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IHDMessageConfirmedNotificationCompleted(this, new IHDMessageConfirmedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InHomeDisplayAddNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InHomeDisplayAddNotification(inHomeDisplay[] addedIHDs, string transactionID) {
            object[] results = this.Invoke("InHomeDisplayAddNotification", new object[] {
                        addedIHDs,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InHomeDisplayAddNotificationAsync(inHomeDisplay[] addedIHDs, string transactionID) {
            this.InHomeDisplayAddNotificationAsync(addedIHDs, transactionID, null);
        }
        
        /// CodeRemarks
        public void InHomeDisplayAddNotificationAsync(inHomeDisplay[] addedIHDs, string transactionID, object userState) {
            if ((this.InHomeDisplayAddNotificationOperationCompleted == null)) {
                this.InHomeDisplayAddNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInHomeDisplayAddNotificationOperationCompleted);
            }
            this.InvokeAsync("InHomeDisplayAddNotification", new object[] {
                        addedIHDs,
                        transactionID}, this.InHomeDisplayAddNotificationOperationCompleted, userState);
        }
        
        private void OnInHomeDisplayAddNotificationOperationCompleted(object arg) {
            if ((this.InHomeDisplayAddNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InHomeDisplayAddNotificationCompleted(this, new InHomeDisplayAddNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InHomeDisplayChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InHomeDisplayChangedNotification(inHomeDisplay[] changedIHDs) {
            object[] results = this.Invoke("InHomeDisplayChangedNotification", new object[] {
                        changedIHDs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InHomeDisplayChangedNotificationAsync(inHomeDisplay[] changedIHDs) {
            this.InHomeDisplayChangedNotificationAsync(changedIHDs, null);
        }
        
        /// CodeRemarks
        public void InHomeDisplayChangedNotificationAsync(inHomeDisplay[] changedIHDs, object userState) {
            if ((this.InHomeDisplayChangedNotificationOperationCompleted == null)) {
                this.InHomeDisplayChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInHomeDisplayChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("InHomeDisplayChangedNotification", new object[] {
                        changedIHDs}, this.InHomeDisplayChangedNotificationOperationCompleted, userState);
        }
        
        private void OnInHomeDisplayChangedNotificationOperationCompleted(object arg) {
            if ((this.InHomeDisplayChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InHomeDisplayChangedNotificationCompleted(this, new InHomeDisplayChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InHomeDisplayExchangeNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InHomeDisplayExchangeNotification(inHomeDisplayExchange[] IHDChangeout) {
            object[] results = this.Invoke("InHomeDisplayExchangeNotification", new object[] {
                        IHDChangeout});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InHomeDisplayExchangeNotificationAsync(inHomeDisplayExchange[] IHDChangeout) {
            this.InHomeDisplayExchangeNotificationAsync(IHDChangeout, null);
        }
        
        /// CodeRemarks
        public void InHomeDisplayExchangeNotificationAsync(inHomeDisplayExchange[] IHDChangeout, object userState) {
            if ((this.InHomeDisplayExchangeNotificationOperationCompleted == null)) {
                this.InHomeDisplayExchangeNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInHomeDisplayExchangeNotificationOperationCompleted);
            }
            this.InvokeAsync("InHomeDisplayExchangeNotification", new object[] {
                        IHDChangeout}, this.InHomeDisplayExchangeNotificationOperationCompleted, userState);
        }
        
        private void OnInHomeDisplayExchangeNotificationOperationCompleted(object arg) {
            if ((this.InHomeDisplayExchangeNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InHomeDisplayExchangeNotificationCompleted(this, new InHomeDisplayExchangeNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InHomeDisplayInstalledNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InHomeDisplayInstalledNotification(inHomeDisplay[] addedIHDs) {
            object[] results = this.Invoke("InHomeDisplayInstalledNotification", new object[] {
                        addedIHDs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InHomeDisplayInstalledNotificationAsync(inHomeDisplay[] addedIHDs) {
            this.InHomeDisplayInstalledNotificationAsync(addedIHDs, null);
        }
        
        /// CodeRemarks
        public void InHomeDisplayInstalledNotificationAsync(inHomeDisplay[] addedIHDs, object userState) {
            if ((this.InHomeDisplayInstalledNotificationOperationCompleted == null)) {
                this.InHomeDisplayInstalledNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInHomeDisplayInstalledNotificationOperationCompleted);
            }
            this.InvokeAsync("InHomeDisplayInstalledNotification", new object[] {
                        addedIHDs}, this.InHomeDisplayInstalledNotificationOperationCompleted, userState);
        }
        
        private void OnInHomeDisplayInstalledNotificationOperationCompleted(object arg) {
            if ((this.InHomeDisplayInstalledNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InHomeDisplayInstalledNotificationCompleted(this, new InHomeDisplayInstalledNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InHomeDisplayRemoveNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InHomeDisplayRemoveNotification(inHomeDisplay[] removedIHDs, string transactionID) {
            object[] results = this.Invoke("InHomeDisplayRemoveNotification", new object[] {
                        removedIHDs,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InHomeDisplayRemoveNotificationAsync(inHomeDisplay[] removedIHDs, string transactionID) {
            this.InHomeDisplayRemoveNotificationAsync(removedIHDs, transactionID, null);
        }
        
        /// CodeRemarks
        public void InHomeDisplayRemoveNotificationAsync(inHomeDisplay[] removedIHDs, string transactionID, object userState) {
            if ((this.InHomeDisplayRemoveNotificationOperationCompleted == null)) {
                this.InHomeDisplayRemoveNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInHomeDisplayRemoveNotificationOperationCompleted);
            }
            this.InvokeAsync("InHomeDisplayRemoveNotification", new object[] {
                        removedIHDs,
                        transactionID}, this.InHomeDisplayRemoveNotificationOperationCompleted, userState);
        }
        
        private void OnInHomeDisplayRemoveNotificationOperationCompleted(object arg) {
            if ((this.InHomeDisplayRemoveNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InHomeDisplayRemoveNotificationCompleted(this, new InHomeDisplayRemoveNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InHomeDisplayRetireNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InHomeDisplayRetireNotification(inHomeDisplay[] retiredIHDs) {
            object[] results = this.Invoke("InHomeDisplayRetireNotification", new object[] {
                        retiredIHDs});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InHomeDisplayRetireNotificationAsync(inHomeDisplay[] retiredIHDs) {
            this.InHomeDisplayRetireNotificationAsync(retiredIHDs, null);
        }
        
        /// CodeRemarks
        public void InHomeDisplayRetireNotificationAsync(inHomeDisplay[] retiredIHDs, object userState) {
            if ((this.InHomeDisplayRetireNotificationOperationCompleted == null)) {
                this.InHomeDisplayRetireNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInHomeDisplayRetireNotificationOperationCompleted);
            }
            this.InvokeAsync("InHomeDisplayRetireNotification", new object[] {
                        retiredIHDs}, this.InHomeDisplayRetireNotificationOperationCompleted, userState);
        }
        
        private void OnInHomeDisplayRetireNotificationOperationCompleted(object arg) {
            if ((this.InHomeDisplayRetireNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InHomeDisplayRetireNotificationCompleted(this, new InHomeDisplayRetireNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateHANPricing", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateHANPricing(priceTierStructure priceTierStructure, temperatureTierStructure temperatureTierStructure, loadCycleTierStructure loadCycleTierStructure, HANInterfaceID hanInterfaceID, string transactionID, string responseURL) {
            object[] results = this.Invoke("InitiateHANPricing", new object[] {
                        priceTierStructure,
                        temperatureTierStructure,
                        loadCycleTierStructure,
                        hanInterfaceID,
                        transactionID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateHANPricingAsync(priceTierStructure priceTierStructure, temperatureTierStructure temperatureTierStructure, loadCycleTierStructure loadCycleTierStructure, HANInterfaceID hanInterfaceID, string transactionID, string responseURL) {
            this.InitiateHANPricingAsync(priceTierStructure, temperatureTierStructure, loadCycleTierStructure, hanInterfaceID, transactionID, responseURL, null);
        }
        
        /// CodeRemarks
        public void InitiateHANPricingAsync(priceTierStructure priceTierStructure, temperatureTierStructure temperatureTierStructure, loadCycleTierStructure loadCycleTierStructure, HANInterfaceID hanInterfaceID, string transactionID, string responseURL, object userState) {
            if ((this.InitiateHANPricingOperationCompleted == null)) {
                this.InitiateHANPricingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateHANPricingOperationCompleted);
            }
            this.InvokeAsync("InitiateHANPricing", new object[] {
                        priceTierStructure,
                        temperatureTierStructure,
                        loadCycleTierStructure,
                        hanInterfaceID,
                        transactionID,
                        responseURL}, this.InitiateHANPricingOperationCompleted, userState);
        }
        
        private void OnInitiateHANPricingOperationCompleted(object arg) {
            if ((this.InitiateHANPricingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateHANPricingCompleted(this, new InitiateHANPricingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/InitiateHANPricingRequest", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] InitiateHANPricingRequest(HANInterfaceID hanInterfaceID, string transactionID, string responseURL) {
            object[] results = this.Invoke("InitiateHANPricingRequest", new object[] {
                        hanInterfaceID,
                        transactionID,
                        responseURL});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void InitiateHANPricingRequestAsync(HANInterfaceID hanInterfaceID, string transactionID, string responseURL) {
            this.InitiateHANPricingRequestAsync(hanInterfaceID, transactionID, responseURL, null);
        }
        
        /// CodeRemarks
        public void InitiateHANPricingRequestAsync(HANInterfaceID hanInterfaceID, string transactionID, string responseURL, object userState) {
            if ((this.InitiateHANPricingRequestOperationCompleted == null)) {
                this.InitiateHANPricingRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateHANPricingRequestOperationCompleted);
            }
            this.InvokeAsync("InitiateHANPricingRequest", new object[] {
                        hanInterfaceID,
                        transactionID,
                        responseURL}, this.InitiateHANPricingRequestOperationCompleted, userState);
        }
        
        private void OnInitiateHANPricingRequestOperationCompleted(object arg) {
            if ((this.InitiateHANPricingRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateHANPricingRequestCompleted(this, new InitiateHANPricingRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/HANPricingNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] HANPricingNotification(priceTierStructure priceTierStructure, HANInterfaceID interfaceID, string transactionID) {
            object[] results = this.Invoke("HANPricingNotification", new object[] {
                        priceTierStructure,
                        interfaceID,
                        transactionID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void HANPricingNotificationAsync(priceTierStructure priceTierStructure, HANInterfaceID interfaceID, string transactionID) {
            this.HANPricingNotificationAsync(priceTierStructure, interfaceID, transactionID, null);
        }
        
        /// CodeRemarks
        public void HANPricingNotificationAsync(priceTierStructure priceTierStructure, HANInterfaceID interfaceID, string transactionID, object userState) {
            if ((this.HANPricingNotificationOperationCompleted == null)) {
                this.HANPricingNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHANPricingNotificationOperationCompleted);
            }
            this.InvokeAsync("HANPricingNotification", new object[] {
                        priceTierStructure,
                        interfaceID,
                        transactionID}, this.HANPricingNotificationOperationCompleted, userState);
        }
        
        private void OnHANPricingNotificationOperationCompleted(object arg) {
            if ((this.HANPricingNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HANPricingNotificationCompleted(this, new HANPricingNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/PingURL", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] PingURL() {
            object[] results = this.Invoke("PingURL", new object[0]);
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void PingURLAsync() {
            this.PingURLAsync(null);
        }
        
        /// CodeRemarks
        public void PingURLAsync(object userState) {
            if ((this.PingURLOperationCompleted == null)) {
                this.PingURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingURLOperationCompleted);
            }
            this.InvokeAsync("PingURL", new object[0], this.PingURLOperationCompleted, userState);
        }
        
        private void OnPingURLOperationCompleted(object arg) {
            if ((this.PingURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PingURLCompleted(this, new PingURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetMethods", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetMethods() {
            object[] results = this.Invoke("GetMethods", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetMethodsAsync() {
            this.GetMethodsAsync(null);
        }
        
        /// CodeRemarks
        public void GetMethodsAsync(object userState) {
            if ((this.GetMethodsOperationCompleted == null)) {
                this.GetMethodsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMethodsOperationCompleted);
            }
            this.InvokeAsync("GetMethods", new object[0], this.GetMethodsOperationCompleted, userState);
        }
        
        private void OnGetMethodsOperationCompleted(object arg) {
            if ((this.GetMethodsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMethodsCompleted(this, new GetMethodsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetDomainNames", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetDomainNames() {
            object[] results = this.Invoke("GetDomainNames", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetDomainNamesAsync() {
            this.GetDomainNamesAsync(null);
        }
        
        /// CodeRemarks
        public void GetDomainNamesAsync(object userState) {
            if ((this.GetDomainNamesOperationCompleted == null)) {
                this.GetDomainNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainNamesOperationCompleted);
            }
            this.InvokeAsync("GetDomainNames", new object[0], this.GetDomainNamesOperationCompleted, userState);
        }
        
        private void OnGetDomainNamesOperationCompleted(object arg) {
            if ((this.GetDomainNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDomainNamesCompleted(this, new GetDomainNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetDomainMembers", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public domainMember[] GetDomainMembers(string domainName) {
            object[] results = this.Invoke("GetDomainMembers", new object[] {
                        domainName});
            return ((domainMember[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetDomainMembersAsync(string domainName) {
            this.GetDomainMembersAsync(domainName, null);
        }
        
        /// CodeRemarks
        public void GetDomainMembersAsync(string domainName, object userState) {
            if ((this.GetDomainMembersOperationCompleted == null)) {
                this.GetDomainMembersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainMembersOperationCompleted);
            }
            this.InvokeAsync("GetDomainMembers", new object[] {
                        domainName}, this.GetDomainMembersOperationCompleted, userState);
        }
        
        private void OnGetDomainMembersOperationCompleted(object arg) {
            if ((this.GetDomainMembersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDomainMembersCompleted(this, new GetDomainMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/RequestRegistrationID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RequestRegistrationID() {
            object[] results = this.Invoke("RequestRegistrationID", new object[0]);
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void RequestRegistrationIDAsync() {
            this.RequestRegistrationIDAsync(null);
        }
        
        /// CodeRemarks
        public void RequestRegistrationIDAsync(object userState) {
            if ((this.RequestRegistrationIDOperationCompleted == null)) {
                this.RequestRegistrationIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestRegistrationIDOperationCompleted);
            }
            this.InvokeAsync("RequestRegistrationID", new object[0], this.RequestRegistrationIDOperationCompleted, userState);
        }
        
        private void OnRequestRegistrationIDOperationCompleted(object arg) {
            if ((this.RequestRegistrationIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestRegistrationIDCompleted(this, new RequestRegistrationIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/RegisterForService", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] RegisterForService(registrationInfo registrationDetails) {
            object[] results = this.Invoke("RegisterForService", new object[] {
                        registrationDetails});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void RegisterForServiceAsync(registrationInfo registrationDetails) {
            this.RegisterForServiceAsync(registrationDetails, null);
        }
        
        /// CodeRemarks
        public void RegisterForServiceAsync(registrationInfo registrationDetails, object userState) {
            if ((this.RegisterForServiceOperationCompleted == null)) {
                this.RegisterForServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterForServiceOperationCompleted);
            }
            this.InvokeAsync("RegisterForService", new object[] {
                        registrationDetails}, this.RegisterForServiceOperationCompleted, userState);
        }
        
        private void OnRegisterForServiceOperationCompleted(object arg) {
            if ((this.RegisterForServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterForServiceCompleted(this, new RegisterForServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/UnregisterForService", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] UnregisterForService(string registrationID) {
            object[] results = this.Invoke("UnregisterForService", new object[] {
                        registrationID});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void UnregisterForServiceAsync(string registrationID) {
            this.UnregisterForServiceAsync(registrationID, null);
        }
        
        /// CodeRemarks
        public void UnregisterForServiceAsync(string registrationID, object userState) {
            if ((this.UnregisterForServiceOperationCompleted == null)) {
                this.UnregisterForServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnregisterForServiceOperationCompleted);
            }
            this.InvokeAsync("UnregisterForService", new object[] {
                        registrationID}, this.UnregisterForServiceOperationCompleted, userState);
        }
        
        private void OnUnregisterForServiceOperationCompleted(object arg) {
            if ((this.UnregisterForServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnregisterForServiceCompleted(this, new UnregisterForServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetRegistrationInfoByID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public registrationInfo GetRegistrationInfoByID(string registrationID) {
            object[] results = this.Invoke("GetRegistrationInfoByID", new object[] {
                        registrationID});
            return ((registrationInfo)(results[0]));
        }
        
        /// CodeRemarks
        public void GetRegistrationInfoByIDAsync(string registrationID) {
            this.GetRegistrationInfoByIDAsync(registrationID, null);
        }
        
        /// CodeRemarks
        public void GetRegistrationInfoByIDAsync(string registrationID, object userState) {
            if ((this.GetRegistrationInfoByIDOperationCompleted == null)) {
                this.GetRegistrationInfoByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRegistrationInfoByIDOperationCompleted);
            }
            this.InvokeAsync("GetRegistrationInfoByID", new object[] {
                        registrationID}, this.GetRegistrationInfoByIDOperationCompleted, userState);
        }
        
        private void OnGetRegistrationInfoByIDOperationCompleted(object arg) {
            if ((this.GetRegistrationInfoByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRegistrationInfoByIDCompleted(this, new GetRegistrationInfoByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetPublishMethods", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetPublishMethods() {
            object[] results = this.Invoke("GetPublishMethods", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetPublishMethodsAsync() {
            this.GetPublishMethodsAsync(null);
        }
        
        /// CodeRemarks
        public void GetPublishMethodsAsync(object userState) {
            if ((this.GetPublishMethodsOperationCompleted == null)) {
                this.GetPublishMethodsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPublishMethodsOperationCompleted);
            }
            this.InvokeAsync("GetPublishMethods", new object[0], this.GetPublishMethodsOperationCompleted, userState);
        }
        
        private void OnGetPublishMethodsOperationCompleted(object arg) {
            if ((this.GetPublishMethodsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPublishMethodsCompleted(this, new GetPublishMethodsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/DomainMembersChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] DomainMembersChangedNotification(domainMember[] changedDomainMembers) {
            object[] results = this.Invoke("DomainMembersChangedNotification", new object[] {
                        changedDomainMembers});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void DomainMembersChangedNotificationAsync(domainMember[] changedDomainMembers) {
            this.DomainMembersChangedNotificationAsync(changedDomainMembers, null);
        }
        
        /// CodeRemarks
        public void DomainMembersChangedNotificationAsync(domainMember[] changedDomainMembers, object userState) {
            if ((this.DomainMembersChangedNotificationOperationCompleted == null)) {
                this.DomainMembersChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDomainMembersChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("DomainMembersChangedNotification", new object[] {
                        changedDomainMembers}, this.DomainMembersChangedNotificationOperationCompleted, userState);
        }
        
        private void OnDomainMembersChangedNotificationOperationCompleted(object arg) {
            if ((this.DomainMembersChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DomainMembersChangedNotificationCompleted(this, new DomainMembersChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/DomainNamesChangedNotification", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public errorObject[] DomainNamesChangedNotification(domainNameChange[] changedDomainNames) {
            object[] results = this.Invoke("DomainNamesChangedNotification", new object[] {
                        changedDomainNames});
            return ((errorObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void DomainNamesChangedNotificationAsync(domainNameChange[] changedDomainNames) {
            this.DomainNamesChangedNotificationAsync(changedDomainNames, null);
        }
        
        /// CodeRemarks
        public void DomainNamesChangedNotificationAsync(domainNameChange[] changedDomainNames, object userState) {
            if ((this.DomainNamesChangedNotificationOperationCompleted == null)) {
                this.DomainNamesChangedNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDomainNamesChangedNotificationOperationCompleted);
            }
            this.InvokeAsync("DomainNamesChangedNotification", new object[] {
                        changedDomainNames}, this.DomainNamesChangedNotificationOperationCompleted, userState);
        }
        
        private void OnDomainNamesChangedNotificationOperationCompleted(object arg) {
            if ((this.DomainNamesChangedNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DomainNamesChangedNotificationCompleted(this, new DomainNamesChangedNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAllMeters", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meters GetAllMeters(string lastReceived) {
            object[] results = this.Invoke("GetAllMeters", new object[] {
                        lastReceived});
            return ((meters)(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllMetersAsync(string lastReceived) {
            this.GetAllMetersAsync(lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetAllMetersAsync(string lastReceived, object userState) {
            if ((this.GetAllMetersOperationCompleted == null)) {
                this.GetAllMetersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllMetersOperationCompleted);
            }
            this.InvokeAsync("GetAllMeters", new object[] {
                        lastReceived}, this.GetAllMetersOperationCompleted, userState);
        }
        
        private void OnGetAllMetersOperationCompleted(object arg) {
            if ((this.GetAllMetersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllMetersCompleted(this, new GetAllMetersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAMRSupportedMeters", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meters GetAMRSupportedMeters(string lastReceived) {
            object[] results = this.Invoke("GetAMRSupportedMeters", new object[] {
                        lastReceived});
            return ((meters)(results[0]));
        }
        
        /// CodeRemarks
        public void GetAMRSupportedMetersAsync(string lastReceived) {
            this.GetAMRSupportedMetersAsync(lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetAMRSupportedMetersAsync(string lastReceived, object userState) {
            if ((this.GetAMRSupportedMetersOperationCompleted == null)) {
                this.GetAMRSupportedMetersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAMRSupportedMetersOperationCompleted);
            }
            this.InvokeAsync("GetAMRSupportedMeters", new object[] {
                        lastReceived}, this.GetAMRSupportedMetersOperationCompleted, userState);
        }
        
        private void OnGetAMRSupportedMetersOperationCompleted(object arg) {
            if ((this.GetAMRSupportedMetersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAMRSupportedMetersCompleted(this, new GetAMRSupportedMetersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetModifiedAMRMeters", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meters GetModifiedAMRMeters(string previousSessionID, string lastReceived) {
            object[] results = this.Invoke("GetModifiedAMRMeters", new object[] {
                        previousSessionID,
                        lastReceived});
            return ((meters)(results[0]));
        }
        
        /// CodeRemarks
        public void GetModifiedAMRMetersAsync(string previousSessionID, string lastReceived) {
            this.GetModifiedAMRMetersAsync(previousSessionID, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetModifiedAMRMetersAsync(string previousSessionID, string lastReceived, object userState) {
            if ((this.GetModifiedAMRMetersOperationCompleted == null)) {
                this.GetModifiedAMRMetersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetModifiedAMRMetersOperationCompleted);
            }
            this.InvokeAsync("GetModifiedAMRMeters", new object[] {
                        previousSessionID,
                        lastReceived}, this.GetModifiedAMRMetersOperationCompleted, userState);
        }
        
        private void OnGetModifiedAMRMetersOperationCompleted(object arg) {
            if ((this.GetModifiedAMRMetersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetModifiedAMRMetersCompleted(this, new GetModifiedAMRMetersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/IsAMRMeter", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsAMRMeter(meterID meterID) {
            object[] results = this.Invoke("IsAMRMeter", new object[] {
                        meterID});
            return ((bool)(results[0]));
        }
        
        /// CodeRemarks
        public void IsAMRMeterAsync(meterID meterID) {
            this.IsAMRMeterAsync(meterID, null);
        }
        
        /// CodeRemarks
        public void IsAMRMeterAsync(meterID meterID, object userState) {
            if ((this.IsAMRMeterOperationCompleted == null)) {
                this.IsAMRMeterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAMRMeterOperationCompleted);
            }
            this.InvokeAsync("IsAMRMeter", new object[] {
                        meterID}, this.IsAMRMeterOperationCompleted, userState);
        }
        
        private void OnIsAMRMeterOperationCompleted(object arg) {
            if ((this.IsAMRMeterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsAMRMeterCompleted(this, new IsAMRMeterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetReadingsByDate", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meterReading[] GetReadingsByDate(System.DateTime startDate, System.DateTime endDate, string lastReceived) {
            object[] results = this.Invoke("GetReadingsByDate", new object[] {
                        startDate,
                        endDate,
                        lastReceived});
            return ((meterReading[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetReadingsByDateAsync(System.DateTime startDate, System.DateTime endDate, string lastReceived) {
            this.GetReadingsByDateAsync(startDate, endDate, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetReadingsByDateAsync(System.DateTime startDate, System.DateTime endDate, string lastReceived, object userState) {
            if ((this.GetReadingsByDateOperationCompleted == null)) {
                this.GetReadingsByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReadingsByDateOperationCompleted);
            }
            this.InvokeAsync("GetReadingsByDate", new object[] {
                        startDate,
                        endDate,
                        lastReceived}, this.GetReadingsByDateOperationCompleted, userState);
        }
        
        private void OnGetReadingsByDateOperationCompleted(object arg) {
            if ((this.GetReadingsByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReadingsByDateCompleted(this, new GetReadingsByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetReadingsByMeterID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meterReading[] GetReadingsByMeterID(meterID meterID, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("GetReadingsByMeterID", new object[] {
                        meterID,
                        startDate,
                        endDate});
            return ((meterReading[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetReadingsByMeterIDAsync(meterID meterID, System.DateTime startDate, System.DateTime endDate) {
            this.GetReadingsByMeterIDAsync(meterID, startDate, endDate, null);
        }
        
        /// CodeRemarks
        public void GetReadingsByMeterIDAsync(meterID meterID, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.GetReadingsByMeterIDOperationCompleted == null)) {
                this.GetReadingsByMeterIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReadingsByMeterIDOperationCompleted);
            }
            this.InvokeAsync("GetReadingsByMeterID", new object[] {
                        meterID,
                        startDate,
                        endDate}, this.GetReadingsByMeterIDOperationCompleted, userState);
        }
        
        private void OnGetReadingsByMeterIDOperationCompleted(object arg) {
            if ((this.GetReadingsByMeterIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReadingsByMeterIDCompleted(this, new GetReadingsByMeterIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetReadingsByMeterIDListAndFieldNameIntervalData", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public intervalData[] GetReadingsByMeterIDListAndFieldNameIntervalData(meterID[] meterIDs, System.DateTime startDate, System.DateTime endDate, string lastReceived, string[] fieldName) {
            object[] results = this.Invoke("GetReadingsByMeterIDListAndFieldNameIntervalData", new object[] {
                        meterIDs,
                        startDate,
                        endDate,
                        lastReceived,
                        fieldName});
            return ((intervalData[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetReadingsByMeterIDListAndFieldNameIntervalDataAsync(meterID[] meterIDs, System.DateTime startDate, System.DateTime endDate, string lastReceived, string[] fieldName) {
            this.GetReadingsByMeterIDListAndFieldNameIntervalDataAsync(meterIDs, startDate, endDate, lastReceived, fieldName, null);
        }
        
        /// CodeRemarks
        public void GetReadingsByMeterIDListAndFieldNameIntervalDataAsync(meterID[] meterIDs, System.DateTime startDate, System.DateTime endDate, string lastReceived, string[] fieldName, object userState) {
            if ((this.GetReadingsByMeterIDListAndFieldNameIntervalDataOperationCompleted == null)) {
                this.GetReadingsByMeterIDListAndFieldNameIntervalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReadingsByMeterIDListAndFieldNameIntervalDataOperationCompleted);
            }
            this.InvokeAsync("GetReadingsByMeterIDListAndFieldNameIntervalData", new object[] {
                        meterIDs,
                        startDate,
                        endDate,
                        lastReceived,
                        fieldName}, this.GetReadingsByMeterIDListAndFieldNameIntervalDataOperationCompleted, userState);
        }
        
        private void OnGetReadingsByMeterIDListAndFieldNameIntervalDataOperationCompleted(object arg) {
            if ((this.GetReadingsByMeterIDListAndFieldNameIntervalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReadingsByMeterIDListAndFieldNameIntervalDataCompleted(this, new GetReadingsByMeterIDListAndFieldNameIntervalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetLatestReadingByMeterID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meterReading GetLatestReadingByMeterID(meterID meterID) {
            object[] results = this.Invoke("GetLatestReadingByMeterID", new object[] {
                        meterID});
            return ((meterReading)(results[0]));
        }
        
        /// CodeRemarks
        public void GetLatestReadingByMeterIDAsync(meterID meterID) {
            this.GetLatestReadingByMeterIDAsync(meterID, null);
        }
        
        /// CodeRemarks
        public void GetLatestReadingByMeterIDAsync(meterID meterID, object userState) {
            if ((this.GetLatestReadingByMeterIDOperationCompleted == null)) {
                this.GetLatestReadingByMeterIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestReadingByMeterIDOperationCompleted);
            }
            this.InvokeAsync("GetLatestReadingByMeterID", new object[] {
                        meterID}, this.GetLatestReadingByMeterIDOperationCompleted, userState);
        }
        
        private void OnGetLatestReadingByMeterIDOperationCompleted(object arg) {
            if ((this.GetLatestReadingByMeterIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestReadingByMeterIDCompleted(this, new GetLatestReadingByMeterIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetReadingsByBillingCycle", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public formattedBlock[] GetReadingsByBillingCycle(string billingCycle, System.DateTime billingDate, int kWhLookBack, int kWLookBack, int kWLookForward, string lastReceived, string formattedBlockTemplateName, string[] fieldName) {
            object[] results = this.Invoke("GetReadingsByBillingCycle", new object[] {
                        billingCycle,
                        billingDate,
                        kWhLookBack,
                        kWLookBack,
                        kWLookForward,
                        lastReceived,
                        formattedBlockTemplateName,
                        fieldName});
            return ((formattedBlock[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetReadingsByBillingCycleAsync(string billingCycle, System.DateTime billingDate, int kWhLookBack, int kWLookBack, int kWLookForward, string lastReceived, string formattedBlockTemplateName, string[] fieldName) {
            this.GetReadingsByBillingCycleAsync(billingCycle, billingDate, kWhLookBack, kWLookBack, kWLookForward, lastReceived, formattedBlockTemplateName, fieldName, null);
        }
        
        /// CodeRemarks
        public void GetReadingsByBillingCycleAsync(string billingCycle, System.DateTime billingDate, int kWhLookBack, int kWLookBack, int kWLookForward, string lastReceived, string formattedBlockTemplateName, string[] fieldName, object userState) {
            if ((this.GetReadingsByBillingCycleOperationCompleted == null)) {
                this.GetReadingsByBillingCycleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReadingsByBillingCycleOperationCompleted);
            }
            this.InvokeAsync("GetReadingsByBillingCycle", new object[] {
                        billingCycle,
                        billingDate,
                        kWhLookBack,
                        kWLookBack,
                        kWLookForward,
                        lastReceived,
                        formattedBlockTemplateName,
                        fieldName}, this.GetReadingsByBillingCycleOperationCompleted, userState);
        }
        
        private void OnGetReadingsByBillingCycleOperationCompleted(object arg) {
            if ((this.GetReadingsByBillingCycleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReadingsByBillingCycleCompleted(this, new GetReadingsByBillingCycleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetReadingByMeterIDFormattedBlock", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public formattedBlock[] GetReadingByMeterIDFormattedBlock(meterID meterID, System.DateTime billingDate, int kWhLookBack, int kWLookBack, int kWLookForward, string lastReceived, string formattedBlockTemplateName, string[] fieldName) {
            object[] results = this.Invoke("GetReadingByMeterIDFormattedBlock", new object[] {
                        meterID,
                        billingDate,
                        kWhLookBack,
                        kWLookBack,
                        kWLookForward,
                        lastReceived,
                        formattedBlockTemplateName,
                        fieldName});
            return ((formattedBlock[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetReadingByMeterIDFormattedBlockAsync(meterID meterID, System.DateTime billingDate, int kWhLookBack, int kWLookBack, int kWLookForward, string lastReceived, string formattedBlockTemplateName, string[] fieldName) {
            this.GetReadingByMeterIDFormattedBlockAsync(meterID, billingDate, kWhLookBack, kWLookBack, kWLookForward, lastReceived, formattedBlockTemplateName, fieldName, null);
        }
        
        /// CodeRemarks
        public void GetReadingByMeterIDFormattedBlockAsync(meterID meterID, System.DateTime billingDate, int kWhLookBack, int kWLookBack, int kWLookForward, string lastReceived, string formattedBlockTemplateName, string[] fieldName, object userState) {
            if ((this.GetReadingByMeterIDFormattedBlockOperationCompleted == null)) {
                this.GetReadingByMeterIDFormattedBlockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReadingByMeterIDFormattedBlockOperationCompleted);
            }
            this.InvokeAsync("GetReadingByMeterIDFormattedBlock", new object[] {
                        meterID,
                        billingDate,
                        kWhLookBack,
                        kWLookBack,
                        kWLookForward,
                        lastReceived,
                        formattedBlockTemplateName,
                        fieldName}, this.GetReadingByMeterIDFormattedBlockOperationCompleted, userState);
        }
        
        private void OnGetReadingByMeterIDFormattedBlockOperationCompleted(object arg) {
            if ((this.GetReadingByMeterIDFormattedBlockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReadingByMeterIDFormattedBlockCompleted(this, new GetReadingByMeterIDFormattedBlockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetReadingsByDateFormattedBlock", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public formattedBlock[] GetReadingsByDateFormattedBlock(System.DateTime billingDate, int kWhLookBack, int kWLookBack, int kWLookForward, string lastReceived, string formattedBlockTemplateName, string[] fieldName) {
            object[] results = this.Invoke("GetReadingsByDateFormattedBlock", new object[] {
                        billingDate,
                        kWhLookBack,
                        kWLookBack,
                        kWLookForward,
                        lastReceived,
                        formattedBlockTemplateName,
                        fieldName});
            return ((formattedBlock[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetReadingsByDateFormattedBlockAsync(System.DateTime billingDate, int kWhLookBack, int kWLookBack, int kWLookForward, string lastReceived, string formattedBlockTemplateName, string[] fieldName) {
            this.GetReadingsByDateFormattedBlockAsync(billingDate, kWhLookBack, kWLookBack, kWLookForward, lastReceived, formattedBlockTemplateName, fieldName, null);
        }
        
        /// CodeRemarks
        public void GetReadingsByDateFormattedBlockAsync(System.DateTime billingDate, int kWhLookBack, int kWLookBack, int kWLookForward, string lastReceived, string formattedBlockTemplateName, string[] fieldName, object userState) {
            if ((this.GetReadingsByDateFormattedBlockOperationCompleted == null)) {
                this.GetReadingsByDateFormattedBlockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReadingsByDateFormattedBlockOperationCompleted);
            }
            this.InvokeAsync("GetReadingsByDateFormattedBlock", new object[] {
                        billingDate,
                        kWhLookBack,
                        kWLookBack,
                        kWLookForward,
                        lastReceived,
                        formattedBlockTemplateName,
                        fieldName}, this.GetReadingsByDateFormattedBlockOperationCompleted, userState);
        }
        
        private void OnGetReadingsByDateFormattedBlockOperationCompleted(object arg) {
            if ((this.GetReadingsByDateFormattedBlockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReadingsByDateFormattedBlockCompleted(this, new GetReadingsByDateFormattedBlockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetHistoryLogByMeterID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public historyLog[] GetHistoryLogByMeterID(meterID meterID, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("GetHistoryLogByMeterID", new object[] {
                        meterID,
                        startDate,
                        endDate});
            return ((historyLog[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetHistoryLogByMeterIDAsync(meterID meterID, System.DateTime startDate, System.DateTime endDate) {
            this.GetHistoryLogByMeterIDAsync(meterID, startDate, endDate, null);
        }
        
        /// CodeRemarks
        public void GetHistoryLogByMeterIDAsync(meterID meterID, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.GetHistoryLogByMeterIDOperationCompleted == null)) {
                this.GetHistoryLogByMeterIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoryLogByMeterIDOperationCompleted);
            }
            this.InvokeAsync("GetHistoryLogByMeterID", new object[] {
                        meterID,
                        startDate,
                        endDate}, this.GetHistoryLogByMeterIDOperationCompleted, userState);
        }
        
        private void OnGetHistoryLogByMeterIDOperationCompleted(object arg) {
            if ((this.GetHistoryLogByMeterIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoryLogByMeterIDCompleted(this, new GetHistoryLogByMeterIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetHistoryLogsByDate", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public historyLog[] GetHistoryLogsByDate(System.DateTime startDate, System.DateTime endDate, string lastReceived) {
            object[] results = this.Invoke("GetHistoryLogsByDate", new object[] {
                        startDate,
                        endDate,
                        lastReceived});
            return ((historyLog[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetHistoryLogsByDateAsync(System.DateTime startDate, System.DateTime endDate, string lastReceived) {
            this.GetHistoryLogsByDateAsync(startDate, endDate, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetHistoryLogsByDateAsync(System.DateTime startDate, System.DateTime endDate, string lastReceived, object userState) {
            if ((this.GetHistoryLogsByDateOperationCompleted == null)) {
                this.GetHistoryLogsByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoryLogsByDateOperationCompleted);
            }
            this.InvokeAsync("GetHistoryLogsByDate", new object[] {
                        startDate,
                        endDate,
                        lastReceived}, this.GetHistoryLogsByDateOperationCompleted, userState);
        }
        
        private void OnGetHistoryLogsByDateOperationCompleted(object arg) {
            if ((this.GetHistoryLogsByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoryLogsByDateCompleted(this, new GetHistoryLogsByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetHistoryLogsByMeterIDAndEventCode", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public historyLog[] GetHistoryLogsByMeterIDAndEventCode(meterID meterID, meterEvent eventCode, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("GetHistoryLogsByMeterIDAndEventCode", new object[] {
                        meterID,
                        eventCode,
                        startDate,
                        endDate});
            return ((historyLog[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetHistoryLogsByMeterIDAndEventCodeAsync(meterID meterID, meterEvent eventCode, System.DateTime startDate, System.DateTime endDate) {
            this.GetHistoryLogsByMeterIDAndEventCodeAsync(meterID, eventCode, startDate, endDate, null);
        }
        
        /// CodeRemarks
        public void GetHistoryLogsByMeterIDAndEventCodeAsync(meterID meterID, meterEvent eventCode, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.GetHistoryLogsByMeterIDAndEventCodeOperationCompleted == null)) {
                this.GetHistoryLogsByMeterIDAndEventCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoryLogsByMeterIDAndEventCodeOperationCompleted);
            }
            this.InvokeAsync("GetHistoryLogsByMeterIDAndEventCode", new object[] {
                        meterID,
                        eventCode,
                        startDate,
                        endDate}, this.GetHistoryLogsByMeterIDAndEventCodeOperationCompleted, userState);
        }
        
        private void OnGetHistoryLogsByMeterIDAndEventCodeOperationCompleted(object arg) {
            if ((this.GetHistoryLogsByMeterIDAndEventCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoryLogsByMeterIDAndEventCodeCompleted(this, new GetHistoryLogsByMeterIDAndEventCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetHistoryLogsByDateAndEventCode", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public historyLog[] GetHistoryLogsByDateAndEventCode(meterEvent eventCode, System.DateTime startDate, System.DateTime endDate, string lastReceived) {
            object[] results = this.Invoke("GetHistoryLogsByDateAndEventCode", new object[] {
                        eventCode,
                        startDate,
                        endDate,
                        lastReceived});
            return ((historyLog[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetHistoryLogsByDateAndEventCodeAsync(meterEvent eventCode, System.DateTime startDate, System.DateTime endDate, string lastReceived) {
            this.GetHistoryLogsByDateAndEventCodeAsync(eventCode, startDate, endDate, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetHistoryLogsByDateAndEventCodeAsync(meterEvent eventCode, System.DateTime startDate, System.DateTime endDate, string lastReceived, object userState) {
            if ((this.GetHistoryLogsByDateAndEventCodeOperationCompleted == null)) {
                this.GetHistoryLogsByDateAndEventCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoryLogsByDateAndEventCodeOperationCompleted);
            }
            this.InvokeAsync("GetHistoryLogsByDateAndEventCode", new object[] {
                        eventCode,
                        startDate,
                        endDate,
                        lastReceived}, this.GetHistoryLogsByDateAndEventCodeOperationCompleted, userState);
        }
        
        private void OnGetHistoryLogsByDateAndEventCodeOperationCompleted(object arg) {
            if ((this.GetHistoryLogsByDateAndEventCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoryLogsByDateAndEventCodeCompleted(this, new GetHistoryLogsByDateAndEventCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetLatestMeterReadingsByMeterGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public formattedBlock GetLatestMeterReadingsByMeterGroup(string meterGroupID, serviceType serviceType, string formattedBlockTemplateName, string[] fieldName, string lastReceived) {
            object[] results = this.Invoke("GetLatestMeterReadingsByMeterGroup", new object[] {
                        meterGroupID,
                        serviceType,
                        formattedBlockTemplateName,
                        fieldName,
                        lastReceived});
            return ((formattedBlock)(results[0]));
        }
        
        /// CodeRemarks
        public void GetLatestMeterReadingsByMeterGroupAsync(string meterGroupID, serviceType serviceType, string formattedBlockTemplateName, string[] fieldName, string lastReceived) {
            this.GetLatestMeterReadingsByMeterGroupAsync(meterGroupID, serviceType, formattedBlockTemplateName, fieldName, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetLatestMeterReadingsByMeterGroupAsync(string meterGroupID, serviceType serviceType, string formattedBlockTemplateName, string[] fieldName, string lastReceived, object userState) {
            if ((this.GetLatestMeterReadingsByMeterGroupOperationCompleted == null)) {
                this.GetLatestMeterReadingsByMeterGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestMeterReadingsByMeterGroupOperationCompleted);
            }
            this.InvokeAsync("GetLatestMeterReadingsByMeterGroup", new object[] {
                        meterGroupID,
                        serviceType,
                        formattedBlockTemplateName,
                        fieldName,
                        lastReceived}, this.GetLatestMeterReadingsByMeterGroupOperationCompleted, userState);
        }
        
        private void OnGetLatestMeterReadingsByMeterGroupOperationCompleted(object arg) {
            if ((this.GetLatestMeterReadingsByMeterGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestMeterReadingsByMeterGroupCompleted(this, new GetLatestMeterReadingsByMeterGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetLatestReadingByMeterIDAndFieldName", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public formattedBlock GetLatestReadingByMeterIDAndFieldName(meterID meterID, string formattedBlockTemplateName, string[] fieldName, string lastReceived) {
            object[] results = this.Invoke("GetLatestReadingByMeterIDAndFieldName", new object[] {
                        meterID,
                        formattedBlockTemplateName,
                        fieldName,
                        lastReceived});
            return ((formattedBlock)(results[0]));
        }
        
        /// CodeRemarks
        public void GetLatestReadingByMeterIDAndFieldNameAsync(meterID meterID, string formattedBlockTemplateName, string[] fieldName, string lastReceived) {
            this.GetLatestReadingByMeterIDAndFieldNameAsync(meterID, formattedBlockTemplateName, fieldName, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetLatestReadingByMeterIDAndFieldNameAsync(meterID meterID, string formattedBlockTemplateName, string[] fieldName, string lastReceived, object userState) {
            if ((this.GetLatestReadingByMeterIDAndFieldNameOperationCompleted == null)) {
                this.GetLatestReadingByMeterIDAndFieldNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestReadingByMeterIDAndFieldNameOperationCompleted);
            }
            this.InvokeAsync("GetLatestReadingByMeterIDAndFieldName", new object[] {
                        meterID,
                        formattedBlockTemplateName,
                        fieldName,
                        lastReceived}, this.GetLatestReadingByMeterIDAndFieldNameOperationCompleted, userState);
        }
        
        private void OnGetLatestReadingByMeterIDAndFieldNameOperationCompleted(object arg) {
            if ((this.GetLatestReadingByMeterIDAndFieldNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestReadingByMeterIDAndFieldNameCompleted(this, new GetLatestReadingByMeterIDAndFieldNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetLatestReadingByFieldName", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public formattedBlock[] GetLatestReadingByFieldName(string formattedBlockTemplateName, string[] fieldName, string lastReceived) {
            object[] results = this.Invoke("GetLatestReadingByFieldName", new object[] {
                        formattedBlockTemplateName,
                        fieldName,
                        lastReceived});
            return ((formattedBlock[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetLatestReadingByFieldNameAsync(string formattedBlockTemplateName, string[] fieldName, string lastReceived) {
            this.GetLatestReadingByFieldNameAsync(formattedBlockTemplateName, fieldName, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetLatestReadingByFieldNameAsync(string formattedBlockTemplateName, string[] fieldName, string lastReceived, object userState) {
            if ((this.GetLatestReadingByFieldNameOperationCompleted == null)) {
                this.GetLatestReadingByFieldNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestReadingByFieldNameOperationCompleted);
            }
            this.InvokeAsync("GetLatestReadingByFieldName", new object[] {
                        formattedBlockTemplateName,
                        fieldName,
                        lastReceived}, this.GetLatestReadingByFieldNameOperationCompleted, userState);
        }
        
        private void OnGetLatestReadingByFieldNameOperationCompleted(object arg) {
            if ((this.GetLatestReadingByFieldNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestReadingByFieldNameCompleted(this, new GetLatestReadingByFieldNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetReadingsByDateAndFieldName", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public formattedBlock[] GetReadingsByDateAndFieldName(System.DateTime startDate, System.DateTime endDate, string lastReceived, string formattedBlockTemplateName, string[] fieldName) {
            object[] results = this.Invoke("GetReadingsByDateAndFieldName", new object[] {
                        startDate,
                        endDate,
                        lastReceived,
                        formattedBlockTemplateName,
                        fieldName});
            return ((formattedBlock[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetReadingsByDateAndFieldNameAsync(System.DateTime startDate, System.DateTime endDate, string lastReceived, string formattedBlockTemplateName, string[] fieldName) {
            this.GetReadingsByDateAndFieldNameAsync(startDate, endDate, lastReceived, formattedBlockTemplateName, fieldName, null);
        }
        
        /// CodeRemarks
        public void GetReadingsByDateAndFieldNameAsync(System.DateTime startDate, System.DateTime endDate, string lastReceived, string formattedBlockTemplateName, string[] fieldName, object userState) {
            if ((this.GetReadingsByDateAndFieldNameOperationCompleted == null)) {
                this.GetReadingsByDateAndFieldNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReadingsByDateAndFieldNameOperationCompleted);
            }
            this.InvokeAsync("GetReadingsByDateAndFieldName", new object[] {
                        startDate,
                        endDate,
                        lastReceived,
                        formattedBlockTemplateName,
                        fieldName}, this.GetReadingsByDateAndFieldNameOperationCompleted, userState);
        }
        
        private void OnGetReadingsByDateAndFieldNameOperationCompleted(object arg) {
            if ((this.GetReadingsByDateAndFieldNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReadingsByDateAndFieldNameCompleted(this, new GetReadingsByDateAndFieldNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetSupportedFieldNames", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetSupportedFieldNames() {
            object[] results = this.Invoke("GetSupportedFieldNames", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetSupportedFieldNamesAsync() {
            this.GetSupportedFieldNamesAsync(null);
        }
        
        /// CodeRemarks
        public void GetSupportedFieldNamesAsync(object userState) {
            if ((this.GetSupportedFieldNamesOperationCompleted == null)) {
                this.GetSupportedFieldNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSupportedFieldNamesOperationCompleted);
            }
            this.InvokeAsync("GetSupportedFieldNames", new object[0], this.GetSupportedFieldNamesOperationCompleted, userState);
        }
        
        private void OnGetSupportedFieldNamesOperationCompleted(object arg) {
            if ((this.GetSupportedFieldNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSupportedFieldNamesCompleted(this, new GetSupportedFieldNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetReadingsByMeterIDAndFieldName", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public formattedBlock[] GetReadingsByMeterIDAndFieldName(meterID meterID, System.DateTime startDate, System.DateTime endDate, string lastReceived, string formattedBlockTemplateName, string[] fieldName) {
            object[] results = this.Invoke("GetReadingsByMeterIDAndFieldName", new object[] {
                        meterID,
                        startDate,
                        endDate,
                        lastReceived,
                        formattedBlockTemplateName,
                        fieldName});
            return ((formattedBlock[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetReadingsByMeterIDAndFieldNameAsync(meterID meterID, System.DateTime startDate, System.DateTime endDate, string lastReceived, string formattedBlockTemplateName, string[] fieldName) {
            this.GetReadingsByMeterIDAndFieldNameAsync(meterID, startDate, endDate, lastReceived, formattedBlockTemplateName, fieldName, null);
        }
        
        /// CodeRemarks
        public void GetReadingsByMeterIDAndFieldNameAsync(meterID meterID, System.DateTime startDate, System.DateTime endDate, string lastReceived, string formattedBlockTemplateName, string[] fieldName, object userState) {
            if ((this.GetReadingsByMeterIDAndFieldNameOperationCompleted == null)) {
                this.GetReadingsByMeterIDAndFieldNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReadingsByMeterIDAndFieldNameOperationCompleted);
            }
            this.InvokeAsync("GetReadingsByMeterIDAndFieldName", new object[] {
                        meterID,
                        startDate,
                        endDate,
                        lastReceived,
                        formattedBlockTemplateName,
                        fieldName}, this.GetReadingsByMeterIDAndFieldNameOperationCompleted, userState);
        }
        
        private void OnGetReadingsByMeterIDAndFieldNameOperationCompleted(object arg) {
            if ((this.GetReadingsByMeterIDAndFieldNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReadingsByMeterIDAndFieldNameCompleted(this, new GetReadingsByMeterIDAndFieldNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetLatestReadings", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meterReading[] GetLatestReadings(string lastReceived) {
            object[] results = this.Invoke("GetLatestReadings", new object[] {
                        lastReceived});
            return ((meterReading[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetLatestReadingsAsync(string lastReceived) {
            this.GetLatestReadingsAsync(lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetLatestReadingsAsync(string lastReceived, object userState) {
            if ((this.GetLatestReadingsOperationCompleted == null)) {
                this.GetLatestReadingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestReadingsOperationCompleted);
            }
            this.InvokeAsync("GetLatestReadings", new object[] {
                        lastReceived}, this.GetLatestReadingsOperationCompleted, userState);
        }
        
        private void OnGetLatestReadingsOperationCompleted(object arg) {
            if ((this.GetLatestReadingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestReadingsCompleted(this, new GetLatestReadingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAllInHomeDisplays", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public inHomeDisplay[] GetAllInHomeDisplays(string lastReceived) {
            object[] results = this.Invoke("GetAllInHomeDisplays", new object[] {
                        lastReceived});
            return ((inHomeDisplay[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllInHomeDisplaysAsync(string lastReceived) {
            this.GetAllInHomeDisplaysAsync(lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetAllInHomeDisplaysAsync(string lastReceived, object userState) {
            if ((this.GetAllInHomeDisplaysOperationCompleted == null)) {
                this.GetAllInHomeDisplaysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllInHomeDisplaysOperationCompleted);
            }
            this.InvokeAsync("GetAllInHomeDisplays", new object[] {
                        lastReceived}, this.GetAllInHomeDisplaysOperationCompleted, userState);
        }
        
        private void OnGetAllInHomeDisplaysOperationCompleted(object arg) {
            if ((this.GetAllInHomeDisplaysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllInHomeDisplaysCompleted(this, new GetAllInHomeDisplaysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetReadingsByUOMAndDate", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meterReading[] GetReadingsByUOMAndDate(uom uomData, System.DateTime startDate, System.DateTime endDate, string lastReceived) {
            object[] results = this.Invoke("GetReadingsByUOMAndDate", new object[] {
                        uomData,
                        startDate,
                        endDate,
                        lastReceived});
            return ((meterReading[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetReadingsByUOMAndDateAsync(uom uomData, System.DateTime startDate, System.DateTime endDate, string lastReceived) {
            this.GetReadingsByUOMAndDateAsync(uomData, startDate, endDate, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetReadingsByUOMAndDateAsync(uom uomData, System.DateTime startDate, System.DateTime endDate, string lastReceived, object userState) {
            if ((this.GetReadingsByUOMAndDateOperationCompleted == null)) {
                this.GetReadingsByUOMAndDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReadingsByUOMAndDateOperationCompleted);
            }
            this.InvokeAsync("GetReadingsByUOMAndDate", new object[] {
                        uomData,
                        startDate,
                        endDate,
                        lastReceived}, this.GetReadingsByUOMAndDateOperationCompleted, userState);
        }
        
        private void OnGetReadingsByUOMAndDateOperationCompleted(object arg) {
            if ((this.GetReadingsByUOMAndDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReadingsByUOMAndDateCompleted(this, new GetReadingsByUOMAndDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAllOutageDetectionDevices", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public outageDetectionDevice[] GetAllOutageDetectionDevices(string lastReceived) {
            object[] results = this.Invoke("GetAllOutageDetectionDevices", new object[] {
                        lastReceived});
            return ((outageDetectionDevice[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllOutageDetectionDevicesAsync(string lastReceived) {
            this.GetAllOutageDetectionDevicesAsync(lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetAllOutageDetectionDevicesAsync(string lastReceived, object userState) {
            if ((this.GetAllOutageDetectionDevicesOperationCompleted == null)) {
                this.GetAllOutageDetectionDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllOutageDetectionDevicesOperationCompleted);
            }
            this.InvokeAsync("GetAllOutageDetectionDevices", new object[] {
                        lastReceived}, this.GetAllOutageDetectionDevicesOperationCompleted, userState);
        }
        
        private void OnGetAllOutageDetectionDevicesOperationCompleted(object arg) {
            if ((this.GetAllOutageDetectionDevicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllOutageDetectionDevicesCompleted(this, new GetAllOutageDetectionDevicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetOutageDetectionDevicesByMeterID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public outageDetectionDevice[] GetOutageDetectionDevicesByMeterID(meterID meterID) {
            object[] results = this.Invoke("GetOutageDetectionDevicesByMeterID", new object[] {
                        meterID});
            return ((outageDetectionDevice[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetOutageDetectionDevicesByMeterIDAsync(meterID meterID) {
            this.GetOutageDetectionDevicesByMeterIDAsync(meterID, null);
        }
        
        /// CodeRemarks
        public void GetOutageDetectionDevicesByMeterIDAsync(meterID meterID, object userState) {
            if ((this.GetOutageDetectionDevicesByMeterIDOperationCompleted == null)) {
                this.GetOutageDetectionDevicesByMeterIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOutageDetectionDevicesByMeterIDOperationCompleted);
            }
            this.InvokeAsync("GetOutageDetectionDevicesByMeterID", new object[] {
                        meterID}, this.GetOutageDetectionDevicesByMeterIDOperationCompleted, userState);
        }
        
        private void OnGetOutageDetectionDevicesByMeterIDOperationCompleted(object arg) {
            if ((this.GetOutageDetectionDevicesByMeterIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOutageDetectionDevicesByMeterIDCompleted(this, new GetOutageDetectionDevicesByMeterIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetOutageDetectionDevicesByStatus", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public outageDetectionDevice[] GetOutageDetectionDevicesByStatus(outageDetectDeviceStatus oDDStatus, string lastReceived) {
            object[] results = this.Invoke("GetOutageDetectionDevicesByStatus", new object[] {
                        oDDStatus,
                        lastReceived});
            return ((outageDetectionDevice[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetOutageDetectionDevicesByStatusAsync(outageDetectDeviceStatus oDDStatus, string lastReceived) {
            this.GetOutageDetectionDevicesByStatusAsync(oDDStatus, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetOutageDetectionDevicesByStatusAsync(outageDetectDeviceStatus oDDStatus, string lastReceived, object userState) {
            if ((this.GetOutageDetectionDevicesByStatusOperationCompleted == null)) {
                this.GetOutageDetectionDevicesByStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOutageDetectionDevicesByStatusOperationCompleted);
            }
            this.InvokeAsync("GetOutageDetectionDevicesByStatus", new object[] {
                        oDDStatus,
                        lastReceived}, this.GetOutageDetectionDevicesByStatusOperationCompleted, userState);
        }
        
        private void OnGetOutageDetectionDevicesByStatusOperationCompleted(object arg) {
            if ((this.GetOutageDetectionDevicesByStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOutageDetectionDevicesByStatusCompleted(this, new GetOutageDetectionDevicesByStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetOutageDetectionDevicesByType", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public outageDetectionDevice[] GetOutageDetectionDevicesByType(outageDetectDeviceType oDDType, string lastReceived) {
            object[] results = this.Invoke("GetOutageDetectionDevicesByType", new object[] {
                        oDDType,
                        lastReceived});
            return ((outageDetectionDevice[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetOutageDetectionDevicesByTypeAsync(outageDetectDeviceType oDDType, string lastReceived) {
            this.GetOutageDetectionDevicesByTypeAsync(oDDType, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetOutageDetectionDevicesByTypeAsync(outageDetectDeviceType oDDType, string lastReceived, object userState) {
            if ((this.GetOutageDetectionDevicesByTypeOperationCompleted == null)) {
                this.GetOutageDetectionDevicesByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOutageDetectionDevicesByTypeOperationCompleted);
            }
            this.InvokeAsync("GetOutageDetectionDevicesByType", new object[] {
                        oDDType,
                        lastReceived}, this.GetOutageDetectionDevicesByTypeOperationCompleted, userState);
        }
        
        private void OnGetOutageDetectionDevicesByTypeOperationCompleted(object arg) {
            if ((this.GetOutageDetectionDevicesByTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOutageDetectionDevicesByTypeCompleted(this, new GetOutageDetectionDevicesByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetOutagedODDevices", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public outageDetectionDevice[] GetOutagedODDevices() {
            object[] results = this.Invoke("GetOutagedODDevices", new object[0]);
            return ((outageDetectionDevice[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetOutagedODDevicesAsync() {
            this.GetOutagedODDevicesAsync(null);
        }
        
        /// CodeRemarks
        public void GetOutagedODDevicesAsync(object userState) {
            if ((this.GetOutagedODDevicesOperationCompleted == null)) {
                this.GetOutagedODDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOutagedODDevicesOperationCompleted);
            }
            this.InvokeAsync("GetOutagedODDevices", new object[0], this.GetOutagedODDevicesOperationCompleted, userState);
        }
        
        private void OnGetOutagedODDevicesOperationCompleted(object arg) {
            if ((this.GetOutagedODDevicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOutagedODDevicesCompleted(this, new GetOutagedODDevicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetCDSupportedMeters", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meters GetCDSupportedMeters(string lastReceived) {
            object[] results = this.Invoke("GetCDSupportedMeters", new object[] {
                        lastReceived});
            return ((meters)(results[0]));
        }
        
        /// CodeRemarks
        public void GetCDSupportedMetersAsync(string lastReceived) {
            this.GetCDSupportedMetersAsync(lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetCDSupportedMetersAsync(string lastReceived, object userState) {
            if ((this.GetCDSupportedMetersOperationCompleted == null)) {
                this.GetCDSupportedMetersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCDSupportedMetersOperationCompleted);
            }
            this.InvokeAsync("GetCDSupportedMeters", new object[] {
                        lastReceived}, this.GetCDSupportedMetersOperationCompleted, userState);
        }
        
        private void OnGetCDSupportedMetersOperationCompleted(object arg) {
            if ((this.GetCDSupportedMetersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCDSupportedMetersCompleted(this, new GetCDSupportedMetersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetModifiedCDMeters", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meters GetModifiedCDMeters(string previousSessionID, string lastReceived) {
            object[] results = this.Invoke("GetModifiedCDMeters", new object[] {
                        previousSessionID,
                        lastReceived});
            return ((meters)(results[0]));
        }
        
        /// CodeRemarks
        public void GetModifiedCDMetersAsync(string previousSessionID, string lastReceived) {
            this.GetModifiedCDMetersAsync(previousSessionID, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetModifiedCDMetersAsync(string previousSessionID, string lastReceived, object userState) {
            if ((this.GetModifiedCDMetersOperationCompleted == null)) {
                this.GetModifiedCDMetersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetModifiedCDMetersOperationCompleted);
            }
            this.InvokeAsync("GetModifiedCDMeters", new object[] {
                        previousSessionID,
                        lastReceived}, this.GetModifiedCDMetersOperationCompleted, userState);
        }
        
        private void OnGetModifiedCDMetersOperationCompleted(object arg) {
            if ((this.GetModifiedCDMetersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetModifiedCDMetersCompleted(this, new GetModifiedCDMetersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetCDMeterState", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CDState GetCDMeterState(meterID meterID) {
            object[] results = this.Invoke("GetCDMeterState", new object[] {
                        meterID});
            return ((CDState)(results[0]));
        }
        
        /// CodeRemarks
        public void GetCDMeterStateAsync(meterID meterID) {
            this.GetCDMeterStateAsync(meterID, null);
        }
        
        /// CodeRemarks
        public void GetCDMeterStateAsync(meterID meterID, object userState) {
            if ((this.GetCDMeterStateOperationCompleted == null)) {
                this.GetCDMeterStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCDMeterStateOperationCompleted);
            }
            this.InvokeAsync("GetCDMeterState", new object[] {
                        meterID}, this.GetCDMeterStateOperationCompleted, userState);
        }
        
        private void OnGetCDMeterStateOperationCompleted(object arg) {
            if ((this.GetCDMeterStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCDMeterStateCompleted(this, new GetCDMeterStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetOutageEventStatus", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public outageEventStatus GetOutageEventStatus(string outageEventID) {
            object[] results = this.Invoke("GetOutageEventStatus", new object[] {
                        outageEventID});
            return ((outageEventStatus)(results[0]));
        }
        
        /// CodeRemarks
        public void GetOutageEventStatusAsync(string outageEventID) {
            this.GetOutageEventStatusAsync(outageEventID, null);
        }
        
        /// CodeRemarks
        public void GetOutageEventStatusAsync(string outageEventID, object userState) {
            if ((this.GetOutageEventStatusOperationCompleted == null)) {
                this.GetOutageEventStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOutageEventStatusOperationCompleted);
            }
            this.InvokeAsync("GetOutageEventStatus", new object[] {
                        outageEventID}, this.GetOutageEventStatusOperationCompleted, userState);
        }
        
        private void OnGetOutageEventStatusOperationCompleted(object arg) {
            if ((this.GetOutageEventStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOutageEventStatusCompleted(this, new GetOutageEventStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetActiveOutages", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetActiveOutages() {
            object[] results = this.Invoke("GetActiveOutages", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetActiveOutagesAsync() {
            this.GetActiveOutagesAsync(null);
        }
        
        /// CodeRemarks
        public void GetActiveOutagesAsync(object userState) {
            if ((this.GetActiveOutagesOperationCompleted == null)) {
                this.GetActiveOutagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActiveOutagesOperationCompleted);
            }
            this.InvokeAsync("GetActiveOutages", new object[0], this.GetActiveOutagesOperationCompleted, userState);
        }
        
        private void OnGetActiveOutagesOperationCompleted(object arg) {
            if ((this.GetActiveOutagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActiveOutagesCompleted(this, new GetActiveOutagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetOutageEventStatusByOutageLocation", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public outageEventStatus GetOutageEventStatusByOutageLocation(outageLocation location) {
            object[] results = this.Invoke("GetOutageEventStatusByOutageLocation", new object[] {
                        location});
            return ((outageEventStatus)(results[0]));
        }
        
        /// CodeRemarks
        public void GetOutageEventStatusByOutageLocationAsync(outageLocation location) {
            this.GetOutageEventStatusByOutageLocationAsync(location, null);
        }
        
        /// CodeRemarks
        public void GetOutageEventStatusByOutageLocationAsync(outageLocation location, object userState) {
            if ((this.GetOutageEventStatusByOutageLocationOperationCompleted == null)) {
                this.GetOutageEventStatusByOutageLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOutageEventStatusByOutageLocationOperationCompleted);
            }
            this.InvokeAsync("GetOutageEventStatusByOutageLocation", new object[] {
                        location}, this.GetOutageEventStatusByOutageLocationOperationCompleted, userState);
        }
        
        private void OnGetOutageEventStatusByOutageLocationOperationCompleted(object arg) {
            if ((this.GetOutageEventStatusByOutageLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOutageEventStatusByOutageLocationCompleted(this, new GetOutageEventStatusByOutageLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAllElectricMeters", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public electricMeter[] GetAllElectricMeters(string lastReceived) {
            object[] results = this.Invoke("GetAllElectricMeters", new object[] {
                        lastReceived});
            return ((electricMeter[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllElectricMetersAsync(string lastReceived) {
            this.GetAllElectricMetersAsync(lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetAllElectricMetersAsync(string lastReceived, object userState) {
            if ((this.GetAllElectricMetersOperationCompleted == null)) {
                this.GetAllElectricMetersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllElectricMetersOperationCompleted);
            }
            this.InvokeAsync("GetAllElectricMeters", new object[] {
                        lastReceived}, this.GetAllElectricMetersOperationCompleted, userState);
        }
        
        private void OnGetAllElectricMetersOperationCompleted(object arg) {
            if ((this.GetAllElectricMetersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllElectricMetersCompleted(this, new GetAllElectricMetersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAllGasMeters", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public gasMeter[] GetAllGasMeters(string lastReceived) {
            object[] results = this.Invoke("GetAllGasMeters", new object[] {
                        lastReceived});
            return ((gasMeter[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllGasMetersAsync(string lastReceived) {
            this.GetAllGasMetersAsync(lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetAllGasMetersAsync(string lastReceived, object userState) {
            if ((this.GetAllGasMetersOperationCompleted == null)) {
                this.GetAllGasMetersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllGasMetersOperationCompleted);
            }
            this.InvokeAsync("GetAllGasMeters", new object[] {
                        lastReceived}, this.GetAllGasMetersOperationCompleted, userState);
        }
        
        private void OnGetAllGasMetersOperationCompleted(object arg) {
            if ((this.GetAllGasMetersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllGasMetersCompleted(this, new GetAllGasMetersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAllWaterMeters", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public waterMeter[] GetAllWaterMeters(string lastReceived) {
            object[] results = this.Invoke("GetAllWaterMeters", new object[] {
                        lastReceived});
            return ((waterMeter[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllWaterMetersAsync(string lastReceived) {
            this.GetAllWaterMetersAsync(lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetAllWaterMetersAsync(string lastReceived, object userState) {
            if ((this.GetAllWaterMetersOperationCompleted == null)) {
                this.GetAllWaterMetersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllWaterMetersOperationCompleted);
            }
            this.InvokeAsync("GetAllWaterMeters", new object[] {
                        lastReceived}, this.GetAllWaterMetersOperationCompleted, userState);
        }
        
        private void OnGetAllWaterMetersOperationCompleted(object arg) {
            if ((this.GetAllWaterMetersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllWaterMetersCompleted(this, new GetAllWaterMetersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAllPropaneMeters", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public propaneMeter[] GetAllPropaneMeters(string lastReceived) {
            object[] results = this.Invoke("GetAllPropaneMeters", new object[] {
                        lastReceived});
            return ((propaneMeter[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllPropaneMetersAsync(string lastReceived) {
            this.GetAllPropaneMetersAsync(lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetAllPropaneMetersAsync(string lastReceived, object userState) {
            if ((this.GetAllPropaneMetersOperationCompleted == null)) {
                this.GetAllPropaneMetersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllPropaneMetersOperationCompleted);
            }
            this.InvokeAsync("GetAllPropaneMeters", new object[] {
                        lastReceived}, this.GetAllPropaneMetersOperationCompleted, userState);
        }
        
        private void OnGetAllPropaneMetersOperationCompleted(object arg) {
            if ((this.GetAllPropaneMetersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllPropaneMetersCompleted(this, new GetAllPropaneMetersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetElectricMetersByAccountNumber", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public electricMeter[] GetElectricMetersByAccountNumber(string accountNumber, string lastReceived) {
            object[] results = this.Invoke("GetElectricMetersByAccountNumber", new object[] {
                        accountNumber,
                        lastReceived});
            return ((electricMeter[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetElectricMetersByAccountNumberAsync(string accountNumber, string lastReceived) {
            this.GetElectricMetersByAccountNumberAsync(accountNumber, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetElectricMetersByAccountNumberAsync(string accountNumber, string lastReceived, object userState) {
            if ((this.GetElectricMetersByAccountNumberOperationCompleted == null)) {
                this.GetElectricMetersByAccountNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetElectricMetersByAccountNumberOperationCompleted);
            }
            this.InvokeAsync("GetElectricMetersByAccountNumber", new object[] {
                        accountNumber,
                        lastReceived}, this.GetElectricMetersByAccountNumberOperationCompleted, userState);
        }
        
        private void OnGetElectricMetersByAccountNumberOperationCompleted(object arg) {
            if ((this.GetElectricMetersByAccountNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetElectricMetersByAccountNumberCompleted(this, new GetElectricMetersByAccountNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetGasMetersByAccountNumber", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public gasMeter[] GetGasMetersByAccountNumber(string accountNumber, string lastReceived) {
            object[] results = this.Invoke("GetGasMetersByAccountNumber", new object[] {
                        accountNumber,
                        lastReceived});
            return ((gasMeter[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetGasMetersByAccountNumberAsync(string accountNumber, string lastReceived) {
            this.GetGasMetersByAccountNumberAsync(accountNumber, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetGasMetersByAccountNumberAsync(string accountNumber, string lastReceived, object userState) {
            if ((this.GetGasMetersByAccountNumberOperationCompleted == null)) {
                this.GetGasMetersByAccountNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGasMetersByAccountNumberOperationCompleted);
            }
            this.InvokeAsync("GetGasMetersByAccountNumber", new object[] {
                        accountNumber,
                        lastReceived}, this.GetGasMetersByAccountNumberOperationCompleted, userState);
        }
        
        private void OnGetGasMetersByAccountNumberOperationCompleted(object arg) {
            if ((this.GetGasMetersByAccountNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGasMetersByAccountNumberCompleted(this, new GetGasMetersByAccountNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetWaterMetersByAccountNumber", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public waterMeter[] GetWaterMetersByAccountNumber(string accountNumber, string lastReceived) {
            object[] results = this.Invoke("GetWaterMetersByAccountNumber", new object[] {
                        accountNumber,
                        lastReceived});
            return ((waterMeter[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetWaterMetersByAccountNumberAsync(string accountNumber, string lastReceived) {
            this.GetWaterMetersByAccountNumberAsync(accountNumber, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetWaterMetersByAccountNumberAsync(string accountNumber, string lastReceived, object userState) {
            if ((this.GetWaterMetersByAccountNumberOperationCompleted == null)) {
                this.GetWaterMetersByAccountNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWaterMetersByAccountNumberOperationCompleted);
            }
            this.InvokeAsync("GetWaterMetersByAccountNumber", new object[] {
                        accountNumber,
                        lastReceived}, this.GetWaterMetersByAccountNumberOperationCompleted, userState);
        }
        
        private void OnGetWaterMetersByAccountNumberOperationCompleted(object arg) {
            if ((this.GetWaterMetersByAccountNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWaterMetersByAccountNumberCompleted(this, new GetWaterMetersByAccountNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetPropaneMetersByAccountNumber", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public propaneMeter[] GetPropaneMetersByAccountNumber(string accountNumber, string lastReceived) {
            object[] results = this.Invoke("GetPropaneMetersByAccountNumber", new object[] {
                        accountNumber,
                        lastReceived});
            return ((propaneMeter[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetPropaneMetersByAccountNumberAsync(string accountNumber, string lastReceived) {
            this.GetPropaneMetersByAccountNumberAsync(accountNumber, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetPropaneMetersByAccountNumberAsync(string accountNumber, string lastReceived, object userState) {
            if ((this.GetPropaneMetersByAccountNumberOperationCompleted == null)) {
                this.GetPropaneMetersByAccountNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropaneMetersByAccountNumberOperationCompleted);
            }
            this.InvokeAsync("GetPropaneMetersByAccountNumber", new object[] {
                        accountNumber,
                        lastReceived}, this.GetPropaneMetersByAccountNumberOperationCompleted, userState);
        }
        
        private void OnGetPropaneMetersByAccountNumberOperationCompleted(object arg) {
            if ((this.GetPropaneMetersByAccountNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPropaneMetersByAccountNumberCompleted(this, new GetPropaneMetersByAccountNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAllCustomersByServiceType", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public customer[] GetAllCustomersByServiceType(serviceType serviceType, string lastReceived) {
            object[] results = this.Invoke("GetAllCustomersByServiceType", new object[] {
                        serviceType,
                        lastReceived});
            return ((customer[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllCustomersByServiceTypeAsync(serviceType serviceType, string lastReceived) {
            this.GetAllCustomersByServiceTypeAsync(serviceType, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetAllCustomersByServiceTypeAsync(serviceType serviceType, string lastReceived, object userState) {
            if ((this.GetAllCustomersByServiceTypeOperationCompleted == null)) {
                this.GetAllCustomersByServiceTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllCustomersByServiceTypeOperationCompleted);
            }
            this.InvokeAsync("GetAllCustomersByServiceType", new object[] {
                        serviceType,
                        lastReceived}, this.GetAllCustomersByServiceTypeOperationCompleted, userState);
        }
        
        private void OnGetAllCustomersByServiceTypeOperationCompleted(object arg) {
            if ((this.GetAllCustomersByServiceTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllCustomersByServiceTypeCompleted(this, new GetAllCustomersByServiceTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAllMetersByServiceType", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meters GetAllMetersByServiceType(serviceType serviceType, string lastReceived) {
            object[] results = this.Invoke("GetAllMetersByServiceType", new object[] {
                        serviceType,
                        lastReceived});
            return ((meters)(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllMetersByServiceTypeAsync(serviceType serviceType, string lastReceived) {
            this.GetAllMetersByServiceTypeAsync(serviceType, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetAllMetersByServiceTypeAsync(serviceType serviceType, string lastReceived, object userState) {
            if ((this.GetAllMetersByServiceTypeOperationCompleted == null)) {
                this.GetAllMetersByServiceTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllMetersByServiceTypeOperationCompleted);
            }
            this.InvokeAsync("GetAllMetersByServiceType", new object[] {
                        serviceType,
                        lastReceived}, this.GetAllMetersByServiceTypeOperationCompleted, userState);
        }
        
        private void OnGetAllMetersByServiceTypeOperationCompleted(object arg) {
            if ((this.GetAllMetersByServiceTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllMetersByServiceTypeCompleted(this, new GetAllMetersByServiceTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAllServiceLocationsByServiceType", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public serviceLocation[] GetAllServiceLocationsByServiceType(serviceType serviceType, string lastReceived) {
            object[] results = this.Invoke("GetAllServiceLocationsByServiceType", new object[] {
                        serviceType,
                        lastReceived});
            return ((serviceLocation[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllServiceLocationsByServiceTypeAsync(serviceType serviceType, string lastReceived) {
            this.GetAllServiceLocationsByServiceTypeAsync(serviceType, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetAllServiceLocationsByServiceTypeAsync(serviceType serviceType, string lastReceived, object userState) {
            if ((this.GetAllServiceLocationsByServiceTypeOperationCompleted == null)) {
                this.GetAllServiceLocationsByServiceTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllServiceLocationsByServiceTypeOperationCompleted);
            }
            this.InvokeAsync("GetAllServiceLocationsByServiceType", new object[] {
                        serviceType,
                        lastReceived}, this.GetAllServiceLocationsByServiceTypeOperationCompleted, userState);
        }
        
        private void OnGetAllServiceLocationsByServiceTypeOperationCompleted(object arg) {
            if ((this.GetAllServiceLocationsByServiceTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllServiceLocationsByServiceTypeCompleted(this, new GetAllServiceLocationsByServiceTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetMetersByAccountNumberAndServiceType", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meters GetMetersByAccountNumberAndServiceType(string accountNumber, serviceType serviceType, string lastReceived) {
            object[] results = this.Invoke("GetMetersByAccountNumberAndServiceType", new object[] {
                        accountNumber,
                        serviceType,
                        lastReceived});
            return ((meters)(results[0]));
        }
        
        /// CodeRemarks
        public void GetMetersByAccountNumberAndServiceTypeAsync(string accountNumber, serviceType serviceType, string lastReceived) {
            this.GetMetersByAccountNumberAndServiceTypeAsync(accountNumber, serviceType, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetMetersByAccountNumberAndServiceTypeAsync(string accountNumber, serviceType serviceType, string lastReceived, object userState) {
            if ((this.GetMetersByAccountNumberAndServiceTypeOperationCompleted == null)) {
                this.GetMetersByAccountNumberAndServiceTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMetersByAccountNumberAndServiceTypeOperationCompleted);
            }
            this.InvokeAsync("GetMetersByAccountNumberAndServiceType", new object[] {
                        accountNumber,
                        serviceType,
                        lastReceived}, this.GetMetersByAccountNumberAndServiceTypeOperationCompleted, userState);
        }
        
        private void OnGetMetersByAccountNumberAndServiceTypeOperationCompleted(object arg) {
            if ((this.GetMetersByAccountNumberAndServiceTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMetersByAccountNumberAndServiceTypeCompleted(this, new GetMetersByAccountNumberAndServiceTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAllCustomers", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public customer[] GetAllCustomers(string lastReceived) {
            object[] results = this.Invoke("GetAllCustomers", new object[] {
                        lastReceived});
            return ((customer[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllCustomersAsync(string lastReceived) {
            this.GetAllCustomersAsync(lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetAllCustomersAsync(string lastReceived, object userState) {
            if ((this.GetAllCustomersOperationCompleted == null)) {
                this.GetAllCustomersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllCustomersOperationCompleted);
            }
            this.InvokeAsync("GetAllCustomers", new object[] {
                        lastReceived}, this.GetAllCustomersOperationCompleted, userState);
        }
        
        private void OnGetAllCustomersOperationCompleted(object arg) {
            if ((this.GetAllCustomersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllCustomersCompleted(this, new GetAllCustomersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetModifiedCustomers", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public customer[] GetModifiedCustomers(string previousSessionID, string lastReceived) {
            object[] results = this.Invoke("GetModifiedCustomers", new object[] {
                        previousSessionID,
                        lastReceived});
            return ((customer[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetModifiedCustomersAsync(string previousSessionID, string lastReceived) {
            this.GetModifiedCustomersAsync(previousSessionID, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetModifiedCustomersAsync(string previousSessionID, string lastReceived, object userState) {
            if ((this.GetModifiedCustomersOperationCompleted == null)) {
                this.GetModifiedCustomersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetModifiedCustomersOperationCompleted);
            }
            this.InvokeAsync("GetModifiedCustomers", new object[] {
                        previousSessionID,
                        lastReceived}, this.GetModifiedCustomersOperationCompleted, userState);
        }
        
        private void OnGetModifiedCustomersOperationCompleted(object arg) {
            if ((this.GetModifiedCustomersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetModifiedCustomersCompleted(this, new GetModifiedCustomersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetModifiedServiceLocations", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public serviceLocation[] GetModifiedServiceLocations(string previousSessionID, string lastReceived, serviceType serviceType) {
            object[] results = this.Invoke("GetModifiedServiceLocations", new object[] {
                        previousSessionID,
                        lastReceived,
                        serviceType});
            return ((serviceLocation[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetModifiedServiceLocationsAsync(string previousSessionID, string lastReceived, serviceType serviceType) {
            this.GetModifiedServiceLocationsAsync(previousSessionID, lastReceived, serviceType, null);
        }
        
        /// CodeRemarks
        public void GetModifiedServiceLocationsAsync(string previousSessionID, string lastReceived, serviceType serviceType, object userState) {
            if ((this.GetModifiedServiceLocationsOperationCompleted == null)) {
                this.GetModifiedServiceLocationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetModifiedServiceLocationsOperationCompleted);
            }
            this.InvokeAsync("GetModifiedServiceLocations", new object[] {
                        previousSessionID,
                        lastReceived,
                        serviceType}, this.GetModifiedServiceLocationsOperationCompleted, userState);
        }
        
        private void OnGetModifiedServiceLocationsOperationCompleted(object arg) {
            if ((this.GetModifiedServiceLocationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetModifiedServiceLocationsCompleted(this, new GetModifiedServiceLocationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetCustomerByCustomerID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public customer GetCustomerByCustomerID(string customerId) {
            object[] results = this.Invoke("GetCustomerByCustomerID", new object[] {
                        customerId});
            return ((customer)(results[0]));
        }
        
        /// CodeRemarks
        public void GetCustomerByCustomerIDAsync(string customerId) {
            this.GetCustomerByCustomerIDAsync(customerId, null);
        }
        
        /// CodeRemarks
        public void GetCustomerByCustomerIDAsync(string customerId, object userState) {
            if ((this.GetCustomerByCustomerIDOperationCompleted == null)) {
                this.GetCustomerByCustomerIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerByCustomerIDOperationCompleted);
            }
            this.InvokeAsync("GetCustomerByCustomerID", new object[] {
                        customerId}, this.GetCustomerByCustomerIDOperationCompleted, userState);
        }
        
        private void OnGetCustomerByCustomerIDOperationCompleted(object arg) {
            if ((this.GetCustomerByCustomerIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerByCustomerIDCompleted(this, new GetCustomerByCustomerIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetCustomerByMeterID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public customer GetCustomerByMeterID(meterID meterID) {
            object[] results = this.Invoke("GetCustomerByMeterID", new object[] {
                        meterID});
            return ((customer)(results[0]));
        }
        
        /// CodeRemarks
        public void GetCustomerByMeterIDAsync(meterID meterID) {
            this.GetCustomerByMeterIDAsync(meterID, null);
        }
        
        /// CodeRemarks
        public void GetCustomerByMeterIDAsync(meterID meterID, object userState) {
            if ((this.GetCustomerByMeterIDOperationCompleted == null)) {
                this.GetCustomerByMeterIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerByMeterIDOperationCompleted);
            }
            this.InvokeAsync("GetCustomerByMeterID", new object[] {
                        meterID}, this.GetCustomerByMeterIDOperationCompleted, userState);
        }
        
        private void OnGetCustomerByMeterIDOperationCompleted(object arg) {
            if ((this.GetCustomerByMeterIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerByMeterIDCompleted(this, new GetCustomerByMeterIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetCustomerByName", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public customer[] GetCustomerByName(string firstName, string lastName) {
            object[] results = this.Invoke("GetCustomerByName", new object[] {
                        firstName,
                        lastName});
            return ((customer[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetCustomerByNameAsync(string firstName, string lastName) {
            this.GetCustomerByNameAsync(firstName, lastName, null);
        }
        
        /// CodeRemarks
        public void GetCustomerByNameAsync(string firstName, string lastName, object userState) {
            if ((this.GetCustomerByNameOperationCompleted == null)) {
                this.GetCustomerByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerByNameOperationCompleted);
            }
            this.InvokeAsync("GetCustomerByName", new object[] {
                        firstName,
                        lastName}, this.GetCustomerByNameOperationCompleted, userState);
        }
        
        private void OnGetCustomerByNameOperationCompleted(object arg) {
            if ((this.GetCustomerByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerByNameCompleted(this, new GetCustomerByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetCustomerByDBAName", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public customer GetCustomerByDBAName(string dBAName) {
            object[] results = this.Invoke("GetCustomerByDBAName", new object[] {
                        dBAName});
            return ((customer)(results[0]));
        }
        
        /// CodeRemarks
        public void GetCustomerByDBANameAsync(string dBAName) {
            this.GetCustomerByDBANameAsync(dBAName, null);
        }
        
        /// CodeRemarks
        public void GetCustomerByDBANameAsync(string dBAName, object userState) {
            if ((this.GetCustomerByDBANameOperationCompleted == null)) {
                this.GetCustomerByDBANameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerByDBANameOperationCompleted);
            }
            this.InvokeAsync("GetCustomerByDBAName", new object[] {
                        dBAName}, this.GetCustomerByDBANameOperationCompleted, userState);
        }
        
        private void OnGetCustomerByDBANameOperationCompleted(object arg) {
            if ((this.GetCustomerByDBANameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerByDBANameCompleted(this, new GetCustomerByDBANameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetDeviceTreeConnectivity", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public circuitElement[] GetDeviceTreeConnectivity(string name, string noun) {
            object[] results = this.Invoke("GetDeviceTreeConnectivity", new object[] {
                        name,
                        noun});
            return ((circuitElement[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetDeviceTreeConnectivityAsync(string name, string noun) {
            this.GetDeviceTreeConnectivityAsync(name, noun, null);
        }
        
        /// CodeRemarks
        public void GetDeviceTreeConnectivityAsync(string name, string noun, object userState) {
            if ((this.GetDeviceTreeConnectivityOperationCompleted == null)) {
                this.GetDeviceTreeConnectivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeviceTreeConnectivityOperationCompleted);
            }
            this.InvokeAsync("GetDeviceTreeConnectivity", new object[] {
                        name,
                        noun}, this.GetDeviceTreeConnectivityOperationCompleted, userState);
        }
        
        private void OnGetDeviceTreeConnectivityOperationCompleted(object arg) {
            if ((this.GetDeviceTreeConnectivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeviceTreeConnectivityCompleted(this, new GetDeviceTreeConnectivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetMeterConnectivityBySubstation", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meterConnectivity[] GetMeterConnectivityBySubstation(string substationName) {
            object[] results = this.Invoke("GetMeterConnectivityBySubstation", new object[] {
                        substationName});
            return ((meterConnectivity[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetMeterConnectivityBySubstationAsync(string substationName) {
            this.GetMeterConnectivityBySubstationAsync(substationName, null);
        }
        
        /// CodeRemarks
        public void GetMeterConnectivityBySubstationAsync(string substationName, object userState) {
            if ((this.GetMeterConnectivityBySubstationOperationCompleted == null)) {
                this.GetMeterConnectivityBySubstationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMeterConnectivityBySubstationOperationCompleted);
            }
            this.InvokeAsync("GetMeterConnectivityBySubstation", new object[] {
                        substationName}, this.GetMeterConnectivityBySubstationOperationCompleted, userState);
        }
        
        private void OnGetMeterConnectivityBySubstationOperationCompleted(object arg) {
            if ((this.GetMeterConnectivityBySubstationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMeterConnectivityBySubstationCompleted(this, new GetMeterConnectivityBySubstationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetEndDeviceShipmentByShipmentID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public endDeviceShipment GetEndDeviceShipmentByShipmentID(string shipmentID) {
            object[] results = this.Invoke("GetEndDeviceShipmentByShipmentID", new object[] {
                        shipmentID});
            return ((endDeviceShipment)(results[0]));
        }
        
        /// CodeRemarks
        public void GetEndDeviceShipmentByShipmentIDAsync(string shipmentID) {
            this.GetEndDeviceShipmentByShipmentIDAsync(shipmentID, null);
        }
        
        /// CodeRemarks
        public void GetEndDeviceShipmentByShipmentIDAsync(string shipmentID, object userState) {
            if ((this.GetEndDeviceShipmentByShipmentIDOperationCompleted == null)) {
                this.GetEndDeviceShipmentByShipmentIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEndDeviceShipmentByShipmentIDOperationCompleted);
            }
            this.InvokeAsync("GetEndDeviceShipmentByShipmentID", new object[] {
                        shipmentID}, this.GetEndDeviceShipmentByShipmentIDOperationCompleted, userState);
        }
        
        private void OnGetEndDeviceShipmentByShipmentIDOperationCompleted(object arg) {
            if ((this.GetEndDeviceShipmentByShipmentIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEndDeviceShipmentByShipmentIDCompleted(this, new GetEndDeviceShipmentByShipmentIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetEndDeviceShipmentsByDateRange", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public endDeviceShipment[] GetEndDeviceShipmentsByDateRange(System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("GetEndDeviceShipmentsByDateRange", new object[] {
                        startDate,
                        endDate});
            return ((endDeviceShipment[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetEndDeviceShipmentsByDateRangeAsync(System.DateTime startDate, System.DateTime endDate) {
            this.GetEndDeviceShipmentsByDateRangeAsync(startDate, endDate, null);
        }
        
        /// CodeRemarks
        public void GetEndDeviceShipmentsByDateRangeAsync(System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.GetEndDeviceShipmentsByDateRangeOperationCompleted == null)) {
                this.GetEndDeviceShipmentsByDateRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEndDeviceShipmentsByDateRangeOperationCompleted);
            }
            this.InvokeAsync("GetEndDeviceShipmentsByDateRange", new object[] {
                        startDate,
                        endDate}, this.GetEndDeviceShipmentsByDateRangeOperationCompleted, userState);
        }
        
        private void OnGetEndDeviceShipmentsByDateRangeOperationCompleted(object arg) {
            if ((this.GetEndDeviceShipmentsByDateRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEndDeviceShipmentsByDateRangeCompleted(this, new GetEndDeviceShipmentsByDateRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetEndDeviceShipmentByMeterID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public endDeviceShipment GetEndDeviceShipmentByMeterID(meterID meterID) {
            object[] results = this.Invoke("GetEndDeviceShipmentByMeterID", new object[] {
                        meterID});
            return ((endDeviceShipment)(results[0]));
        }
        
        /// CodeRemarks
        public void GetEndDeviceShipmentByMeterIDAsync(meterID meterID) {
            this.GetEndDeviceShipmentByMeterIDAsync(meterID, null);
        }
        
        /// CodeRemarks
        public void GetEndDeviceShipmentByMeterIDAsync(meterID meterID, object userState) {
            if ((this.GetEndDeviceShipmentByMeterIDOperationCompleted == null)) {
                this.GetEndDeviceShipmentByMeterIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEndDeviceShipmentByMeterIDOperationCompleted);
            }
            this.InvokeAsync("GetEndDeviceShipmentByMeterID", new object[] {
                        meterID}, this.GetEndDeviceShipmentByMeterIDOperationCompleted, userState);
        }
        
        private void OnGetEndDeviceShipmentByMeterIDOperationCompleted(object arg) {
            if ((this.GetEndDeviceShipmentByMeterIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEndDeviceShipmentByMeterIDCompleted(this, new GetEndDeviceShipmentByMeterIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetEndDeviceShipmentByTransponderID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public endDeviceShipment GetEndDeviceShipmentByTransponderID(string transponderID) {
            object[] results = this.Invoke("GetEndDeviceShipmentByTransponderID", new object[] {
                        transponderID});
            return ((endDeviceShipment)(results[0]));
        }
        
        /// CodeRemarks
        public void GetEndDeviceShipmentByTransponderIDAsync(string transponderID) {
            this.GetEndDeviceShipmentByTransponderIDAsync(transponderID, null);
        }
        
        /// CodeRemarks
        public void GetEndDeviceShipmentByTransponderIDAsync(string transponderID, object userState) {
            if ((this.GetEndDeviceShipmentByTransponderIDOperationCompleted == null)) {
                this.GetEndDeviceShipmentByTransponderIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEndDeviceShipmentByTransponderIDOperationCompleted);
            }
            this.InvokeAsync("GetEndDeviceShipmentByTransponderID", new object[] {
                        transponderID}, this.GetEndDeviceShipmentByTransponderIDOperationCompleted, userState);
        }
        
        private void OnGetEndDeviceShipmentByTransponderIDOperationCompleted(object arg) {
            if ((this.GetEndDeviceShipmentByTransponderIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEndDeviceShipmentByTransponderIDCompleted(this, new GetEndDeviceShipmentByTransponderIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetLPDataByMeterID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public profileObject[] GetLPDataByMeterID(meterID meterID) {
            object[] results = this.Invoke("GetLPDataByMeterID", new object[] {
                        meterID});
            return ((profileObject[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetLPDataByMeterIDAsync(meterID meterID) {
            this.GetLPDataByMeterIDAsync(meterID, null);
        }
        
        /// CodeRemarks
        public void GetLPDataByMeterIDAsync(meterID meterID, object userState) {
            if ((this.GetLPDataByMeterIDOperationCompleted == null)) {
                this.GetLPDataByMeterIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLPDataByMeterIDOperationCompleted);
            }
            this.InvokeAsync("GetLPDataByMeterID", new object[] {
                        meterID}, this.GetLPDataByMeterIDOperationCompleted, userState);
        }
        
        private void OnGetLPDataByMeterIDOperationCompleted(object arg) {
            if ((this.GetLPDataByMeterIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLPDataByMeterIDCompleted(this, new GetLPDataByMeterIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetMeterByMeterID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meters GetMeterByMeterID(meterID meterID) {
            object[] results = this.Invoke("GetMeterByMeterID", new object[] {
                        meterID});
            return ((meters)(results[0]));
        }
        
        /// CodeRemarks
        public void GetMeterByMeterIDAsync(meterID meterID) {
            this.GetMeterByMeterIDAsync(meterID, null);
        }
        
        /// CodeRemarks
        public void GetMeterByMeterIDAsync(meterID meterID, object userState) {
            if ((this.GetMeterByMeterIDOperationCompleted == null)) {
                this.GetMeterByMeterIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMeterByMeterIDOperationCompleted);
            }
            this.InvokeAsync("GetMeterByMeterID", new object[] {
                        meterID}, this.GetMeterByMeterIDOperationCompleted, userState);
        }
        
        private void OnGetMeterByMeterIDOperationCompleted(object arg) {
            if ((this.GetMeterByMeterIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMeterByMeterIDCompleted(this, new GetMeterByMeterIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetMeterByServiceLocationID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meters GetMeterByServiceLocationID(string serviceLocationID, serviceType serviceType) {
            object[] results = this.Invoke("GetMeterByServiceLocationID", new object[] {
                        serviceLocationID,
                        serviceType});
            return ((meters)(results[0]));
        }
        
        /// CodeRemarks
        public void GetMeterByServiceLocationIDAsync(string serviceLocationID, serviceType serviceType) {
            this.GetMeterByServiceLocationIDAsync(serviceLocationID, serviceType, null);
        }
        
        /// CodeRemarks
        public void GetMeterByServiceLocationIDAsync(string serviceLocationID, serviceType serviceType, object userState) {
            if ((this.GetMeterByServiceLocationIDOperationCompleted == null)) {
                this.GetMeterByServiceLocationIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMeterByServiceLocationIDOperationCompleted);
            }
            this.InvokeAsync("GetMeterByServiceLocationID", new object[] {
                        serviceLocationID,
                        serviceType}, this.GetMeterByServiceLocationIDOperationCompleted, userState);
        }
        
        private void OnGetMeterByServiceLocationIDOperationCompleted(object arg) {
            if ((this.GetMeterByServiceLocationIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMeterByServiceLocationIDCompleted(this, new GetMeterByServiceLocationIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAllMetersByAccountNumber", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meters GetAllMetersByAccountNumber(string accountNumber, string lastReceived) {
            object[] results = this.Invoke("GetAllMetersByAccountNumber", new object[] {
                        accountNumber,
                        lastReceived});
            return ((meters)(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllMetersByAccountNumberAsync(string accountNumber, string lastReceived) {
            this.GetAllMetersByAccountNumberAsync(accountNumber, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetAllMetersByAccountNumberAsync(string accountNumber, string lastReceived, object userState) {
            if ((this.GetAllMetersByAccountNumberOperationCompleted == null)) {
                this.GetAllMetersByAccountNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllMetersByAccountNumberOperationCompleted);
            }
            this.InvokeAsync("GetAllMetersByAccountNumber", new object[] {
                        accountNumber,
                        lastReceived}, this.GetAllMetersByAccountNumberOperationCompleted, userState);
        }
        
        private void OnGetAllMetersByAccountNumberOperationCompleted(object arg) {
            if ((this.GetAllMetersByAccountNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllMetersByAccountNumberCompleted(this, new GetAllMetersByAccountNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetMeterByCustomerID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meters GetMeterByCustomerID(string customerID) {
            object[] results = this.Invoke("GetMeterByCustomerID", new object[] {
                        customerID});
            return ((meters)(results[0]));
        }
        
        /// CodeRemarks
        public void GetMeterByCustomerIDAsync(string customerID) {
            this.GetMeterByCustomerIDAsync(customerID, null);
        }
        
        /// CodeRemarks
        public void GetMeterByCustomerIDAsync(string customerID, object userState) {
            if ((this.GetMeterByCustomerIDOperationCompleted == null)) {
                this.GetMeterByCustomerIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMeterByCustomerIDOperationCompleted);
            }
            this.InvokeAsync("GetMeterByCustomerID", new object[] {
                        customerID}, this.GetMeterByCustomerIDOperationCompleted, userState);
        }
        
        private void OnGetMeterByCustomerIDOperationCompleted(object arg) {
            if ((this.GetMeterByCustomerIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMeterByCustomerIDCompleted(this, new GetMeterByCustomerIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetMetersByAMRType", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meters GetMetersByAMRType(string AMRVendor, string AMRDeviceType, string lastReceived) {
            object[] results = this.Invoke("GetMetersByAMRType", new object[] {
                        AMRVendor,
                        AMRDeviceType,
                        lastReceived});
            return ((meters)(results[0]));
        }
        
        /// CodeRemarks
        public void GetMetersByAMRTypeAsync(string AMRVendor, string AMRDeviceType, string lastReceived) {
            this.GetMetersByAMRTypeAsync(AMRVendor, AMRDeviceType, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetMetersByAMRTypeAsync(string AMRVendor, string AMRDeviceType, string lastReceived, object userState) {
            if ((this.GetMetersByAMRTypeOperationCompleted == null)) {
                this.GetMetersByAMRTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMetersByAMRTypeOperationCompleted);
            }
            this.InvokeAsync("GetMetersByAMRType", new object[] {
                        AMRVendor,
                        AMRDeviceType,
                        lastReceived}, this.GetMetersByAMRTypeOperationCompleted, userState);
        }
        
        private void OnGetMetersByAMRTypeOperationCompleted(object arg) {
            if ((this.GetMetersByAMRTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMetersByAMRTypeCompleted(this, new GetMetersByAMRTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetMeterGroupNames", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetMeterGroupNames() {
            object[] results = this.Invoke("GetMeterGroupNames", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetMeterGroupNamesAsync() {
            this.GetMeterGroupNamesAsync(null);
        }
        
        /// CodeRemarks
        public void GetMeterGroupNamesAsync(object userState) {
            if ((this.GetMeterGroupNamesOperationCompleted == null)) {
                this.GetMeterGroupNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMeterGroupNamesOperationCompleted);
            }
            this.InvokeAsync("GetMeterGroupNames", new object[0], this.GetMeterGroupNamesOperationCompleted, userState);
        }
        
        private void OnGetMeterGroupNamesOperationCompleted(object arg) {
            if ((this.GetMeterGroupNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMeterGroupNamesCompleted(this, new GetMeterGroupNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetMeterGroupNamesByMeterID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetMeterGroupNamesByMeterID(meterID meterID) {
            object[] results = this.Invoke("GetMeterGroupNamesByMeterID", new object[] {
                        meterID});
            return ((string[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetMeterGroupNamesByMeterIDAsync(meterID meterID) {
            this.GetMeterGroupNamesByMeterIDAsync(meterID, null);
        }
        
        /// CodeRemarks
        public void GetMeterGroupNamesByMeterIDAsync(meterID meterID, object userState) {
            if ((this.GetMeterGroupNamesByMeterIDOperationCompleted == null)) {
                this.GetMeterGroupNamesByMeterIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMeterGroupNamesByMeterIDOperationCompleted);
            }
            this.InvokeAsync("GetMeterGroupNamesByMeterID", new object[] {
                        meterID}, this.GetMeterGroupNamesByMeterIDOperationCompleted, userState);
        }
        
        private void OnGetMeterGroupNamesByMeterIDOperationCompleted(object arg) {
            if ((this.GetMeterGroupNamesByMeterIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMeterGroupNamesByMeterIDCompleted(this, new GetMeterGroupNamesByMeterIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetMeterGroupMembers", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meterGroups GetMeterGroupMembers(string meterGroupName) {
            object[] results = this.Invoke("GetMeterGroupMembers", new object[] {
                        meterGroupName});
            return ((meterGroups)(results[0]));
        }
        
        /// CodeRemarks
        public void GetMeterGroupMembersAsync(string meterGroupName) {
            this.GetMeterGroupMembersAsync(meterGroupName, null);
        }
        
        /// CodeRemarks
        public void GetMeterGroupMembersAsync(string meterGroupName, object userState) {
            if ((this.GetMeterGroupMembersOperationCompleted == null)) {
                this.GetMeterGroupMembersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMeterGroupMembersOperationCompleted);
            }
            this.InvokeAsync("GetMeterGroupMembers", new object[] {
                        meterGroupName}, this.GetMeterGroupMembersOperationCompleted, userState);
        }
        
        private void OnGetMeterGroupMembersOperationCompleted(object arg) {
            if ((this.GetMeterGroupMembersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMeterGroupMembersCompleted(this, new GetMeterGroupMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetModifiedMeters", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meters GetModifiedMeters(string previousSessionID, string lastReceived, serviceType serviceType) {
            object[] results = this.Invoke("GetModifiedMeters", new object[] {
                        previousSessionID,
                        lastReceived,
                        serviceType});
            return ((meters)(results[0]));
        }
        
        /// CodeRemarks
        public void GetModifiedMetersAsync(string previousSessionID, string lastReceived, serviceType serviceType) {
            this.GetModifiedMetersAsync(previousSessionID, lastReceived, serviceType, null);
        }
        
        /// CodeRemarks
        public void GetModifiedMetersAsync(string previousSessionID, string lastReceived, serviceType serviceType, object userState) {
            if ((this.GetModifiedMetersOperationCompleted == null)) {
                this.GetModifiedMetersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetModifiedMetersOperationCompleted);
            }
            this.InvokeAsync("GetModifiedMeters", new object[] {
                        previousSessionID,
                        lastReceived,
                        serviceType}, this.GetModifiedMetersOperationCompleted, userState);
        }
        
        private void OnGetModifiedMetersOperationCompleted(object arg) {
            if ((this.GetModifiedMetersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetModifiedMetersCompleted(this, new GetModifiedMetersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetServiceLocationByServiceStatus", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public serviceLocation[] GetServiceLocationByServiceStatus(string servStatus, string lastReceived, serviceType serviceType) {
            object[] results = this.Invoke("GetServiceLocationByServiceStatus", new object[] {
                        servStatus,
                        lastReceived,
                        serviceType});
            return ((serviceLocation[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetServiceLocationByServiceStatusAsync(string servStatus, string lastReceived, serviceType serviceType) {
            this.GetServiceLocationByServiceStatusAsync(servStatus, lastReceived, serviceType, null);
        }
        
        /// CodeRemarks
        public void GetServiceLocationByServiceStatusAsync(string servStatus, string lastReceived, serviceType serviceType, object userState) {
            if ((this.GetServiceLocationByServiceStatusOperationCompleted == null)) {
                this.GetServiceLocationByServiceStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceLocationByServiceStatusOperationCompleted);
            }
            this.InvokeAsync("GetServiceLocationByServiceStatus", new object[] {
                        servStatus,
                        lastReceived,
                        serviceType}, this.GetServiceLocationByServiceStatusOperationCompleted, userState);
        }
        
        private void OnGetServiceLocationByServiceStatusOperationCompleted(object arg) {
            if ((this.GetServiceLocationByServiceStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceLocationByServiceStatusCompleted(this, new GetServiceLocationByServiceStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetServiceLocationByServiceLocationID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public serviceLocation[] GetServiceLocationByServiceLocationID(string serviceLocationId, serviceType serviceType) {
            object[] results = this.Invoke("GetServiceLocationByServiceLocationID", new object[] {
                        serviceLocationId,
                        serviceType});
            return ((serviceLocation[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetServiceLocationByServiceLocationIDAsync(string serviceLocationId, serviceType serviceType) {
            this.GetServiceLocationByServiceLocationIDAsync(serviceLocationId, serviceType, null);
        }
        
        /// CodeRemarks
        public void GetServiceLocationByServiceLocationIDAsync(string serviceLocationId, serviceType serviceType, object userState) {
            if ((this.GetServiceLocationByServiceLocationIDOperationCompleted == null)) {
                this.GetServiceLocationByServiceLocationIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceLocationByServiceLocationIDOperationCompleted);
            }
            this.InvokeAsync("GetServiceLocationByServiceLocationID", new object[] {
                        serviceLocationId,
                        serviceType}, this.GetServiceLocationByServiceLocationIDOperationCompleted, userState);
        }
        
        private void OnGetServiceLocationByServiceLocationIDOperationCompleted(object arg) {
            if ((this.GetServiceLocationByServiceLocationIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceLocationByServiceLocationIDCompleted(this, new GetServiceLocationByServiceLocationIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetServiceLocationByCustomerID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public serviceLocation[] GetServiceLocationByCustomerID(string customerId) {
            object[] results = this.Invoke("GetServiceLocationByCustomerID", new object[] {
                        customerId});
            return ((serviceLocation[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetServiceLocationByCustomerIDAsync(string customerId) {
            this.GetServiceLocationByCustomerIDAsync(customerId, null);
        }
        
        /// CodeRemarks
        public void GetServiceLocationByCustomerIDAsync(string customerId, object userState) {
            if ((this.GetServiceLocationByCustomerIDOperationCompleted == null)) {
                this.GetServiceLocationByCustomerIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceLocationByCustomerIDOperationCompleted);
            }
            this.InvokeAsync("GetServiceLocationByCustomerID", new object[] {
                        customerId}, this.GetServiceLocationByCustomerIDOperationCompleted, userState);
        }
        
        private void OnGetServiceLocationByCustomerIDOperationCompleted(object arg) {
            if ((this.GetServiceLocationByCustomerIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceLocationByCustomerIDCompleted(this, new GetServiceLocationByCustomerIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetServiceLocationByMeterID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public serviceLocation[] GetServiceLocationByMeterID(meterID meterID) {
            object[] results = this.Invoke("GetServiceLocationByMeterID", new object[] {
                        meterID});
            return ((serviceLocation[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetServiceLocationByMeterIDAsync(meterID meterID) {
            this.GetServiceLocationByMeterIDAsync(meterID, null);
        }
        
        /// CodeRemarks
        public void GetServiceLocationByMeterIDAsync(meterID meterID, object userState) {
            if ((this.GetServiceLocationByMeterIDOperationCompleted == null)) {
                this.GetServiceLocationByMeterIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceLocationByMeterIDOperationCompleted);
            }
            this.InvokeAsync("GetServiceLocationByMeterID", new object[] {
                        meterID}, this.GetServiceLocationByMeterIDOperationCompleted, userState);
        }
        
        private void OnGetServiceLocationByMeterIDOperationCompleted(object arg) {
            if ((this.GetServiceLocationByMeterIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceLocationByMeterIDCompleted(this, new GetServiceLocationByMeterIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetServiceLocationByAccountNumber", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public serviceLocation[] GetServiceLocationByAccountNumber(string accountNumber, serviceType serviceType) {
            object[] results = this.Invoke("GetServiceLocationByAccountNumber", new object[] {
                        accountNumber,
                        serviceType});
            return ((serviceLocation[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetServiceLocationByAccountNumberAsync(string accountNumber, serviceType serviceType) {
            this.GetServiceLocationByAccountNumberAsync(accountNumber, serviceType, null);
        }
        
        /// CodeRemarks
        public void GetServiceLocationByAccountNumberAsync(string accountNumber, serviceType serviceType, object userState) {
            if ((this.GetServiceLocationByAccountNumberOperationCompleted == null)) {
                this.GetServiceLocationByAccountNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceLocationByAccountNumberOperationCompleted);
            }
            this.InvokeAsync("GetServiceLocationByAccountNumber", new object[] {
                        accountNumber,
                        serviceType}, this.GetServiceLocationByAccountNumberOperationCompleted, userState);
        }
        
        private void OnGetServiceLocationByAccountNumberOperationCompleted(object arg) {
            if ((this.GetServiceLocationByAccountNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceLocationByAccountNumberCompleted(this, new GetServiceLocationByAccountNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetServiceLocationByGridLocation", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public serviceLocation[] GetServiceLocationByGridLocation(string gridLocation, serviceType serviceType) {
            object[] results = this.Invoke("GetServiceLocationByGridLocation", new object[] {
                        gridLocation,
                        serviceType});
            return ((serviceLocation[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetServiceLocationByGridLocationAsync(string gridLocation, serviceType serviceType) {
            this.GetServiceLocationByGridLocationAsync(gridLocation, serviceType, null);
        }
        
        /// CodeRemarks
        public void GetServiceLocationByGridLocationAsync(string gridLocation, serviceType serviceType, object userState) {
            if ((this.GetServiceLocationByGridLocationOperationCompleted == null)) {
                this.GetServiceLocationByGridLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceLocationByGridLocationOperationCompleted);
            }
            this.InvokeAsync("GetServiceLocationByGridLocation", new object[] {
                        gridLocation,
                        serviceType}, this.GetServiceLocationByGridLocationOperationCompleted, userState);
        }
        
        private void OnGetServiceLocationByGridLocationOperationCompleted(object arg) {
            if ((this.GetServiceLocationByGridLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceLocationByGridLocationCompleted(this, new GetServiceLocationByGridLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetServiceLocationByPhaseCode", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public serviceLocation[] GetServiceLocationByPhaseCode(phaseCode phaseCode, string lastReceived) {
            object[] results = this.Invoke("GetServiceLocationByPhaseCode", new object[] {
                        phaseCode,
                        lastReceived});
            return ((serviceLocation[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetServiceLocationByPhaseCodeAsync(phaseCode phaseCode, string lastReceived) {
            this.GetServiceLocationByPhaseCodeAsync(phaseCode, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetServiceLocationByPhaseCodeAsync(phaseCode phaseCode, string lastReceived, object userState) {
            if ((this.GetServiceLocationByPhaseCodeOperationCompleted == null)) {
                this.GetServiceLocationByPhaseCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceLocationByPhaseCodeOperationCompleted);
            }
            this.InvokeAsync("GetServiceLocationByPhaseCode", new object[] {
                        phaseCode,
                        lastReceived}, this.GetServiceLocationByPhaseCodeOperationCompleted, userState);
        }
        
        private void OnGetServiceLocationByPhaseCodeOperationCompleted(object arg) {
            if ((this.GetServiceLocationByPhaseCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceLocationByPhaseCodeCompleted(this, new GetServiceLocationByPhaseCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetServiceLocationByLoadGroup", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public serviceLocation[] GetServiceLocationByLoadGroup(string loadGroup, string lastReceived) {
            object[] results = this.Invoke("GetServiceLocationByLoadGroup", new object[] {
                        loadGroup,
                        lastReceived});
            return ((serviceLocation[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetServiceLocationByLoadGroupAsync(string loadGroup, string lastReceived) {
            this.GetServiceLocationByLoadGroupAsync(loadGroup, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetServiceLocationByLoadGroupAsync(string loadGroup, string lastReceived, object userState) {
            if ((this.GetServiceLocationByLoadGroupOperationCompleted == null)) {
                this.GetServiceLocationByLoadGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceLocationByLoadGroupOperationCompleted);
            }
            this.InvokeAsync("GetServiceLocationByLoadGroup", new object[] {
                        loadGroup,
                        lastReceived}, this.GetServiceLocationByLoadGroupOperationCompleted, userState);
        }
        
        private void OnGetServiceLocationByLoadGroupOperationCompleted(object arg) {
            if ((this.GetServiceLocationByLoadGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceLocationByLoadGroupCompleted(this, new GetServiceLocationByLoadGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetServiceLocationByServiceType", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public serviceLocation[] GetServiceLocationByServiceType(serviceType serviceType, string lastReceived) {
            object[] results = this.Invoke("GetServiceLocationByServiceType", new object[] {
                        serviceType,
                        lastReceived});
            return ((serviceLocation[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetServiceLocationByServiceTypeAsync(serviceType serviceType, string lastReceived) {
            this.GetServiceLocationByServiceTypeAsync(serviceType, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetServiceLocationByServiceTypeAsync(serviceType serviceType, string lastReceived, object userState) {
            if ((this.GetServiceLocationByServiceTypeOperationCompleted == null)) {
                this.GetServiceLocationByServiceTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceLocationByServiceTypeOperationCompleted);
            }
            this.InvokeAsync("GetServiceLocationByServiceType", new object[] {
                        serviceType,
                        lastReceived}, this.GetServiceLocationByServiceTypeOperationCompleted, userState);
        }
        
        private void OnGetServiceLocationByServiceTypeOperationCompleted(object arg) {
            if ((this.GetServiceLocationByServiceTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceLocationByServiceTypeCompleted(this, new GetServiceLocationByServiceTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetServiceLocationByShutOffDate", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public serviceLocation[] GetServiceLocationByShutOffDate(System.DateTime shutOffDate, serviceType serviceType) {
            object[] results = this.Invoke("GetServiceLocationByShutOffDate", new object[] {
                        shutOffDate,
                        serviceType});
            return ((serviceLocation[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetServiceLocationByShutOffDateAsync(System.DateTime shutOffDate, serviceType serviceType) {
            this.GetServiceLocationByShutOffDateAsync(shutOffDate, serviceType, null);
        }
        
        /// CodeRemarks
        public void GetServiceLocationByShutOffDateAsync(System.DateTime shutOffDate, serviceType serviceType, object userState) {
            if ((this.GetServiceLocationByShutOffDateOperationCompleted == null)) {
                this.GetServiceLocationByShutOffDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceLocationByShutOffDateOperationCompleted);
            }
            this.InvokeAsync("GetServiceLocationByShutOffDate", new object[] {
                        shutOffDate,
                        serviceType}, this.GetServiceLocationByShutOffDateOperationCompleted, userState);
        }
        
        private void OnGetServiceLocationByShutOffDateOperationCompleted(object arg) {
            if ((this.GetServiceLocationByShutOffDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceLocationByShutOffDateCompleted(this, new GetServiceLocationByShutOffDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetMetersByEALocation", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meters GetMetersByEALocation(string eaLoc) {
            object[] results = this.Invoke("GetMetersByEALocation", new object[] {
                        eaLoc});
            return ((meters)(results[0]));
        }
        
        /// CodeRemarks
        public void GetMetersByEALocationAsync(string eaLoc) {
            this.GetMetersByEALocationAsync(eaLoc, null);
        }
        
        /// CodeRemarks
        public void GetMetersByEALocationAsync(string eaLoc, object userState) {
            if ((this.GetMetersByEALocationOperationCompleted == null)) {
                this.GetMetersByEALocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMetersByEALocationOperationCompleted);
            }
            this.InvokeAsync("GetMetersByEALocation", new object[] {
                        eaLoc}, this.GetMetersByEALocationOperationCompleted, userState);
        }
        
        private void OnGetMetersByEALocationOperationCompleted(object arg) {
            if ((this.GetMetersByEALocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMetersByEALocationCompleted(this, new GetMetersByEALocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetMetersByFacilityID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meters GetMetersByFacilityID(string facilityID, serviceType serviceType) {
            object[] results = this.Invoke("GetMetersByFacilityID", new object[] {
                        facilityID,
                        serviceType});
            return ((meters)(results[0]));
        }
        
        /// CodeRemarks
        public void GetMetersByFacilityIDAsync(string facilityID, serviceType serviceType) {
            this.GetMetersByFacilityIDAsync(facilityID, serviceType, null);
        }
        
        /// CodeRemarks
        public void GetMetersByFacilityIDAsync(string facilityID, serviceType serviceType, object userState) {
            if ((this.GetMetersByFacilityIDOperationCompleted == null)) {
                this.GetMetersByFacilityIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMetersByFacilityIDOperationCompleted);
            }
            this.InvokeAsync("GetMetersByFacilityID", new object[] {
                        facilityID,
                        serviceType}, this.GetMetersByFacilityIDOperationCompleted, userState);
        }
        
        private void OnGetMetersByFacilityIDOperationCompleted(object arg) {
            if ((this.GetMetersByFacilityIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMetersByFacilityIDCompleted(this, new GetMetersByFacilityIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetMetersBySiteID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meters GetMetersBySiteID(string siteID, serviceType serviceType) {
            object[] results = this.Invoke("GetMetersBySiteID", new object[] {
                        siteID,
                        serviceType});
            return ((meters)(results[0]));
        }
        
        /// CodeRemarks
        public void GetMetersBySiteIDAsync(string siteID, serviceType serviceType) {
            this.GetMetersBySiteIDAsync(siteID, serviceType, null);
        }
        
        /// CodeRemarks
        public void GetMetersBySiteIDAsync(string siteID, serviceType serviceType, object userState) {
            if ((this.GetMetersBySiteIDOperationCompleted == null)) {
                this.GetMetersBySiteIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMetersBySiteIDOperationCompleted);
            }
            this.InvokeAsync("GetMetersBySiteID", new object[] {
                        siteID,
                        serviceType}, this.GetMetersBySiteIDOperationCompleted, userState);
        }
        
        private void OnGetMetersBySiteIDOperationCompleted(object arg) {
            if ((this.GetMetersBySiteIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMetersBySiteIDCompleted(this, new GetMetersBySiteIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetMetersByCustomerName", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meters GetMetersByCustomerName(string firstName, string lastName) {
            object[] results = this.Invoke("GetMetersByCustomerName", new object[] {
                        firstName,
                        lastName});
            return ((meters)(results[0]));
        }
        
        /// CodeRemarks
        public void GetMetersByCustomerNameAsync(string firstName, string lastName) {
            this.GetMetersByCustomerNameAsync(firstName, lastName, null);
        }
        
        /// CodeRemarks
        public void GetMetersByCustomerNameAsync(string firstName, string lastName, object userState) {
            if ((this.GetMetersByCustomerNameOperationCompleted == null)) {
                this.GetMetersByCustomerNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMetersByCustomerNameOperationCompleted);
            }
            this.InvokeAsync("GetMetersByCustomerName", new object[] {
                        firstName,
                        lastName}, this.GetMetersByCustomerNameOperationCompleted, userState);
        }
        
        private void OnGetMetersByCustomerNameOperationCompleted(object arg) {
            if ((this.GetMetersByCustomerNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMetersByCustomerNameCompleted(this, new GetMetersByCustomerNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetMetersByHomePhone", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meters GetMetersByHomePhone(telephoneNumber phone) {
            object[] results = this.Invoke("GetMetersByHomePhone", new object[] {
                        phone});
            return ((meters)(results[0]));
        }
        
        /// CodeRemarks
        public void GetMetersByHomePhoneAsync(telephoneNumber phone) {
            this.GetMetersByHomePhoneAsync(phone, null);
        }
        
        /// CodeRemarks
        public void GetMetersByHomePhoneAsync(telephoneNumber phone, object userState) {
            if ((this.GetMetersByHomePhoneOperationCompleted == null)) {
                this.GetMetersByHomePhoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMetersByHomePhoneOperationCompleted);
            }
            this.InvokeAsync("GetMetersByHomePhone", new object[] {
                        phone}, this.GetMetersByHomePhoneOperationCompleted, userState);
        }
        
        private void OnGetMetersByHomePhoneOperationCompleted(object arg) {
            if ((this.GetMetersByHomePhoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMetersByHomePhoneCompleted(this, new GetMetersByHomePhoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetMetersBySearchString", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meters GetMetersBySearchString(string searchString) {
            object[] results = this.Invoke("GetMetersBySearchString", new object[] {
                        searchString});
            return ((meters)(results[0]));
        }
        
        /// CodeRemarks
        public void GetMetersBySearchStringAsync(string searchString) {
            this.GetMetersBySearchStringAsync(searchString, null);
        }
        
        /// CodeRemarks
        public void GetMetersBySearchStringAsync(string searchString, object userState) {
            if ((this.GetMetersBySearchStringOperationCompleted == null)) {
                this.GetMetersBySearchStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMetersBySearchStringOperationCompleted);
            }
            this.InvokeAsync("GetMetersBySearchString", new object[] {
                        searchString}, this.GetMetersBySearchStringOperationCompleted, userState);
        }
        
        private void OnGetMetersBySearchStringOperationCompleted(object arg) {
            if ((this.GetMetersBySearchStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMetersBySearchStringCompleted(this, new GetMetersBySearchStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetLPReadingsByMeterIDFormattedBlock", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public formattedBlock[] GetLPReadingsByMeterIDFormattedBlock(meterID meterID, System.DateTime profileStartDate, System.DateTime profileEndDate, string lastReceived) {
            object[] results = this.Invoke("GetLPReadingsByMeterIDFormattedBlock", new object[] {
                        meterID,
                        profileStartDate,
                        profileEndDate,
                        lastReceived});
            return ((formattedBlock[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetLPReadingsByMeterIDFormattedBlockAsync(meterID meterID, System.DateTime profileStartDate, System.DateTime profileEndDate, string lastReceived) {
            this.GetLPReadingsByMeterIDFormattedBlockAsync(meterID, profileStartDate, profileEndDate, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetLPReadingsByMeterIDFormattedBlockAsync(meterID meterID, System.DateTime profileStartDate, System.DateTime profileEndDate, string lastReceived, object userState) {
            if ((this.GetLPReadingsByMeterIDFormattedBlockOperationCompleted == null)) {
                this.GetLPReadingsByMeterIDFormattedBlockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLPReadingsByMeterIDFormattedBlockOperationCompleted);
            }
            this.InvokeAsync("GetLPReadingsByMeterIDFormattedBlock", new object[] {
                        meterID,
                        profileStartDate,
                        profileEndDate,
                        lastReceived}, this.GetLPReadingsByMeterIDFormattedBlockOperationCompleted, userState);
        }
        
        private void OnGetLPReadingsByMeterIDFormattedBlockOperationCompleted(object arg) {
            if ((this.GetLPReadingsByMeterIDFormattedBlockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLPReadingsByMeterIDFormattedBlockCompleted(this, new GetLPReadingsByMeterIDFormattedBlockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetLPReadingsByDateFormattedBlock", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public formattedBlock[] GetLPReadingsByDateFormattedBlock(System.DateTime profileDate, string lastReceived) {
            object[] results = this.Invoke("GetLPReadingsByDateFormattedBlock", new object[] {
                        profileDate,
                        lastReceived});
            return ((formattedBlock[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetLPReadingsByDateFormattedBlockAsync(System.DateTime profileDate, string lastReceived) {
            this.GetLPReadingsByDateFormattedBlockAsync(profileDate, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetLPReadingsByDateFormattedBlockAsync(System.DateTime profileDate, string lastReceived, object userState) {
            if ((this.GetLPReadingsByDateFormattedBlockOperationCompleted == null)) {
                this.GetLPReadingsByDateFormattedBlockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLPReadingsByDateFormattedBlockOperationCompleted);
            }
            this.InvokeAsync("GetLPReadingsByDateFormattedBlock", new object[] {
                        profileDate,
                        lastReceived}, this.GetLPReadingsByDateFormattedBlockOperationCompleted, userState);
        }
        
        private void OnGetLPReadingsByDateFormattedBlockOperationCompleted(object arg) {
            if ((this.GetLPReadingsByDateFormattedBlockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLPReadingsByDateFormattedBlockCompleted(this, new GetLPReadingsByDateFormattedBlockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetLPReadingsByBillingCycle", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public formattedBlock[] GetLPReadingsByBillingCycle(string billingCycle, System.DateTime profileDate, string lastReceived) {
            object[] results = this.Invoke("GetLPReadingsByBillingCycle", new object[] {
                        billingCycle,
                        profileDate,
                        lastReceived});
            return ((formattedBlock[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetLPReadingsByBillingCycleAsync(string billingCycle, System.DateTime profileDate, string lastReceived) {
            this.GetLPReadingsByBillingCycleAsync(billingCycle, profileDate, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetLPReadingsByBillingCycleAsync(string billingCycle, System.DateTime profileDate, string lastReceived, object userState) {
            if ((this.GetLPReadingsByBillingCycleOperationCompleted == null)) {
                this.GetLPReadingsByBillingCycleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLPReadingsByBillingCycleOperationCompleted);
            }
            this.InvokeAsync("GetLPReadingsByBillingCycle", new object[] {
                        billingCycle,
                        profileDate,
                        lastReceived}, this.GetLPReadingsByBillingCycleOperationCompleted, userState);
        }
        
        private void OnGetLPReadingsByBillingCycleOperationCompleted(object arg) {
            if ((this.GetLPReadingsByBillingCycleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLPReadingsByBillingCycleCompleted(this, new GetLPReadingsByBillingCycleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAllAccounts", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public account[] GetAllAccounts(string lastReceived) {
            object[] results = this.Invoke("GetAllAccounts", new object[] {
                        lastReceived});
            return ((account[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllAccountsAsync(string lastReceived) {
            this.GetAllAccountsAsync(lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetAllAccountsAsync(string lastReceived, object userState) {
            if ((this.GetAllAccountsOperationCompleted == null)) {
                this.GetAllAccountsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllAccountsOperationCompleted);
            }
            this.InvokeAsync("GetAllAccounts", new object[] {
                        lastReceived}, this.GetAllAccountsOperationCompleted, userState);
        }
        
        private void OnGetAllAccountsOperationCompleted(object arg) {
            if ((this.GetAllAccountsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllAccountsCompleted(this, new GetAllAccountsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAccountsByCustomerID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public account[] GetAccountsByCustomerID(string customerID) {
            object[] results = this.Invoke("GetAccountsByCustomerID", new object[] {
                        customerID});
            return ((account[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetAccountsByCustomerIDAsync(string customerID) {
            this.GetAccountsByCustomerIDAsync(customerID, null);
        }
        
        /// CodeRemarks
        public void GetAccountsByCustomerIDAsync(string customerID, object userState) {
            if ((this.GetAccountsByCustomerIDOperationCompleted == null)) {
                this.GetAccountsByCustomerIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountsByCustomerIDOperationCompleted);
            }
            this.InvokeAsync("GetAccountsByCustomerID", new object[] {
                        customerID}, this.GetAccountsByCustomerIDOperationCompleted, userState);
        }
        
        private void OnGetAccountsByCustomerIDOperationCompleted(object arg) {
            if ((this.GetAccountsByCustomerIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountsByCustomerIDCompleted(this, new GetAccountsByCustomerIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAccountByMeterID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public account GetAccountByMeterID(meterID meterID) {
            object[] results = this.Invoke("GetAccountByMeterID", new object[] {
                        meterID});
            return ((account)(results[0]));
        }
        
        /// CodeRemarks
        public void GetAccountByMeterIDAsync(meterID meterID) {
            this.GetAccountByMeterIDAsync(meterID, null);
        }
        
        /// CodeRemarks
        public void GetAccountByMeterIDAsync(meterID meterID, object userState) {
            if ((this.GetAccountByMeterIDOperationCompleted == null)) {
                this.GetAccountByMeterIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountByMeterIDOperationCompleted);
            }
            this.InvokeAsync("GetAccountByMeterID", new object[] {
                        meterID}, this.GetAccountByMeterIDOperationCompleted, userState);
        }
        
        private void OnGetAccountByMeterIDOperationCompleted(object arg) {
            if ((this.GetAccountByMeterIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountByMeterIDCompleted(this, new GetAccountByMeterIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAccountByServiceLocationIDAndServiceType", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public account GetAccountByServiceLocationIDAndServiceType(string serviceLocationID, serviceType serviceType) {
            object[] results = this.Invoke("GetAccountByServiceLocationIDAndServiceType", new object[] {
                        serviceLocationID,
                        serviceType});
            return ((account)(results[0]));
        }
        
        /// CodeRemarks
        public void GetAccountByServiceLocationIDAndServiceTypeAsync(string serviceLocationID, serviceType serviceType) {
            this.GetAccountByServiceLocationIDAndServiceTypeAsync(serviceLocationID, serviceType, null);
        }
        
        /// CodeRemarks
        public void GetAccountByServiceLocationIDAndServiceTypeAsync(string serviceLocationID, serviceType serviceType, object userState) {
            if ((this.GetAccountByServiceLocationIDAndServiceTypeOperationCompleted == null)) {
                this.GetAccountByServiceLocationIDAndServiceTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountByServiceLocationIDAndServiceTypeOperationCompleted);
            }
            this.InvokeAsync("GetAccountByServiceLocationIDAndServiceType", new object[] {
                        serviceLocationID,
                        serviceType}, this.GetAccountByServiceLocationIDAndServiceTypeOperationCompleted, userState);
        }
        
        private void OnGetAccountByServiceLocationIDAndServiceTypeOperationCompleted(object arg) {
            if ((this.GetAccountByServiceLocationIDAndServiceTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountByServiceLocationIDAndServiceTypeCompleted(this, new GetAccountByServiceLocationIDAndServiceTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetConfigurationGroupNames", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetConfigurationGroupNames() {
            object[] results = this.Invoke("GetConfigurationGroupNames", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetConfigurationGroupNamesAsync() {
            this.GetConfigurationGroupNamesAsync(null);
        }
        
        /// CodeRemarks
        public void GetConfigurationGroupNamesAsync(object userState) {
            if ((this.GetConfigurationGroupNamesOperationCompleted == null)) {
                this.GetConfigurationGroupNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConfigurationGroupNamesOperationCompleted);
            }
            this.InvokeAsync("GetConfigurationGroupNames", new object[0], this.GetConfigurationGroupNamesOperationCompleted, userState);
        }
        
        private void OnGetConfigurationGroupNamesOperationCompleted(object arg) {
            if ((this.GetConfigurationGroupNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetConfigurationGroupNamesCompleted(this, new GetConfigurationGroupNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetConfigurationGroupNamesByMeterID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetConfigurationGroupNamesByMeterID(meterID meterID) {
            object[] results = this.Invoke("GetConfigurationGroupNamesByMeterID", new object[] {
                        meterID});
            return ((string[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetConfigurationGroupNamesByMeterIDAsync(meterID meterID) {
            this.GetConfigurationGroupNamesByMeterIDAsync(meterID, null);
        }
        
        /// CodeRemarks
        public void GetConfigurationGroupNamesByMeterIDAsync(meterID meterID, object userState) {
            if ((this.GetConfigurationGroupNamesByMeterIDOperationCompleted == null)) {
                this.GetConfigurationGroupNamesByMeterIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConfigurationGroupNamesByMeterIDOperationCompleted);
            }
            this.InvokeAsync("GetConfigurationGroupNamesByMeterID", new object[] {
                        meterID}, this.GetConfigurationGroupNamesByMeterIDOperationCompleted, userState);
        }
        
        private void OnGetConfigurationGroupNamesByMeterIDOperationCompleted(object arg) {
            if ((this.GetConfigurationGroupNamesByMeterIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetConfigurationGroupNamesByMeterIDCompleted(this, new GetConfigurationGroupNamesByMeterIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetConfigurationGroupMembers", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public configurationGroup GetConfigurationGroupMembers(string meterGroupName) {
            object[] results = this.Invoke("GetConfigurationGroupMembers", new object[] {
                        meterGroupName});
            return ((configurationGroup)(results[0]));
        }
        
        /// CodeRemarks
        public void GetConfigurationGroupMembersAsync(string meterGroupName) {
            this.GetConfigurationGroupMembersAsync(meterGroupName, null);
        }
        
        /// CodeRemarks
        public void GetConfigurationGroupMembersAsync(string meterGroupName, object userState) {
            if ((this.GetConfigurationGroupMembersOperationCompleted == null)) {
                this.GetConfigurationGroupMembersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConfigurationGroupMembersOperationCompleted);
            }
            this.InvokeAsync("GetConfigurationGroupMembers", new object[] {
                        meterGroupName}, this.GetConfigurationGroupMembersOperationCompleted, userState);
        }
        
        private void OnGetConfigurationGroupMembersOperationCompleted(object arg) {
            if ((this.GetConfigurationGroupMembersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetConfigurationGroupMembersCompleted(this, new GetConfigurationGroupMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetSchedules", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public schedule[] GetSchedules(string lastReceived) {
            object[] results = this.Invoke("GetSchedules", new object[] {
                        lastReceived});
            return ((schedule[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetSchedulesAsync(string lastReceived) {
            this.GetSchedulesAsync(lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetSchedulesAsync(string lastReceived, object userState) {
            if ((this.GetSchedulesOperationCompleted == null)) {
                this.GetSchedulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchedulesOperationCompleted);
            }
            this.InvokeAsync("GetSchedules", new object[] {
                        lastReceived}, this.GetSchedulesOperationCompleted, userState);
        }
        
        private void OnGetSchedulesOperationCompleted(object arg) {
            if ((this.GetSchedulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSchedulesCompleted(this, new GetSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetScheduleByID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public schedule GetScheduleByID(string scheduleID) {
            object[] results = this.Invoke("GetScheduleByID", new object[] {
                        scheduleID});
            return ((schedule)(results[0]));
        }
        
        /// CodeRemarks
        public void GetScheduleByIDAsync(string scheduleID) {
            this.GetScheduleByIDAsync(scheduleID, null);
        }
        
        /// CodeRemarks
        public void GetScheduleByIDAsync(string scheduleID, object userState) {
            if ((this.GetScheduleByIDOperationCompleted == null)) {
                this.GetScheduleByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScheduleByIDOperationCompleted);
            }
            this.InvokeAsync("GetScheduleByID", new object[] {
                        scheduleID}, this.GetScheduleByIDOperationCompleted, userState);
        }
        
        private void OnGetScheduleByIDOperationCompleted(object arg) {
            if ((this.GetScheduleByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScheduleByIDCompleted(this, new GetScheduleByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetReadingSchedules", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public readingSchedule[] GetReadingSchedules(string lastReceived) {
            object[] results = this.Invoke("GetReadingSchedules", new object[] {
                        lastReceived});
            return ((readingSchedule[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetReadingSchedulesAsync(string lastReceived) {
            this.GetReadingSchedulesAsync(lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetReadingSchedulesAsync(string lastReceived, object userState) {
            if ((this.GetReadingSchedulesOperationCompleted == null)) {
                this.GetReadingSchedulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReadingSchedulesOperationCompleted);
            }
            this.InvokeAsync("GetReadingSchedules", new object[] {
                        lastReceived}, this.GetReadingSchedulesOperationCompleted, userState);
        }
        
        private void OnGetReadingSchedulesOperationCompleted(object arg) {
            if ((this.GetReadingSchedulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReadingSchedulesCompleted(this, new GetReadingSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetReadingScheduleByID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public readingSchedule GetReadingScheduleByID(string readingScheduleID) {
            object[] results = this.Invoke("GetReadingScheduleByID", new object[] {
                        readingScheduleID});
            return ((readingSchedule)(results[0]));
        }
        
        /// CodeRemarks
        public void GetReadingScheduleByIDAsync(string readingScheduleID) {
            this.GetReadingScheduleByIDAsync(readingScheduleID, null);
        }
        
        /// CodeRemarks
        public void GetReadingScheduleByIDAsync(string readingScheduleID, object userState) {
            if ((this.GetReadingScheduleByIDOperationCompleted == null)) {
                this.GetReadingScheduleByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReadingScheduleByIDOperationCompleted);
            }
            this.InvokeAsync("GetReadingScheduleByID", new object[] {
                        readingScheduleID}, this.GetReadingScheduleByIDOperationCompleted, userState);
        }
        
        private void OnGetReadingScheduleByIDOperationCompleted(object arg) {
            if ((this.GetReadingScheduleByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReadingScheduleByIDCompleted(this, new GetReadingScheduleByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetLatestReadingsByMeterIDList", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public formattedBlock[] GetLatestReadingsByMeterIDList(meterID[] meterIDs, System.DateTime startDate, System.DateTime endDate, string lastReceived, string formattedBlockTemplateName, string[] fieldName) {
            object[] results = this.Invoke("GetLatestReadingsByMeterIDList", new object[] {
                        meterIDs,
                        startDate,
                        endDate,
                        lastReceived,
                        formattedBlockTemplateName,
                        fieldName});
            return ((formattedBlock[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetLatestReadingsByMeterIDListAsync(meterID[] meterIDs, System.DateTime startDate, System.DateTime endDate, string lastReceived, string formattedBlockTemplateName, string[] fieldName) {
            this.GetLatestReadingsByMeterIDListAsync(meterIDs, startDate, endDate, lastReceived, formattedBlockTemplateName, fieldName, null);
        }
        
        /// CodeRemarks
        public void GetLatestReadingsByMeterIDListAsync(meterID[] meterIDs, System.DateTime startDate, System.DateTime endDate, string lastReceived, string formattedBlockTemplateName, string[] fieldName, object userState) {
            if ((this.GetLatestReadingsByMeterIDListOperationCompleted == null)) {
                this.GetLatestReadingsByMeterIDListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestReadingsByMeterIDListOperationCompleted);
            }
            this.InvokeAsync("GetLatestReadingsByMeterIDList", new object[] {
                        meterIDs,
                        startDate,
                        endDate,
                        lastReceived,
                        formattedBlockTemplateName,
                        fieldName}, this.GetLatestReadingsByMeterIDListOperationCompleted, userState);
        }
        
        private void OnGetLatestReadingsByMeterIDListOperationCompleted(object arg) {
            if ((this.GetLatestReadingsByMeterIDListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestReadingsByMeterIDListCompleted(this, new GetLatestReadingsByMeterIDListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetMeterBaseByObjectID", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public meterBase GetMeterBaseByObjectID(string meterBaseID) {
            object[] results = this.Invoke("GetMeterBaseByObjectID", new object[] {
                        meterBaseID});
            return ((meterBase)(results[0]));
        }
        
        /// CodeRemarks
        public void GetMeterBaseByObjectIDAsync(string meterBaseID) {
            this.GetMeterBaseByObjectIDAsync(meterBaseID, null);
        }
        
        /// CodeRemarks
        public void GetMeterBaseByObjectIDAsync(string meterBaseID, object userState) {
            if ((this.GetMeterBaseByObjectIDOperationCompleted == null)) {
                this.GetMeterBaseByObjectIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMeterBaseByObjectIDOperationCompleted);
            }
            this.InvokeAsync("GetMeterBaseByObjectID", new object[] {
                        meterBaseID}, this.GetMeterBaseByObjectIDOperationCompleted, userState);
        }
        
        private void OnGetMeterBaseByObjectIDOperationCompleted(object arg) {
            if ((this.GetMeterBaseByObjectIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMeterBaseByObjectIDCompleted(this, new GetMeterBaseByObjectIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetFormattedBlockTemplates", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public formattedBlockTemplate[] GetFormattedBlockTemplates(string lastReceived) {
            object[] results = this.Invoke("GetFormattedBlockTemplates", new object[] {
                        lastReceived});
            return ((formattedBlockTemplate[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetFormattedBlockTemplatesAsync(string lastReceived) {
            this.GetFormattedBlockTemplatesAsync(lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetFormattedBlockTemplatesAsync(string lastReceived, object userState) {
            if ((this.GetFormattedBlockTemplatesOperationCompleted == null)) {
                this.GetFormattedBlockTemplatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFormattedBlockTemplatesOperationCompleted);
            }
            this.InvokeAsync("GetFormattedBlockTemplates", new object[] {
                        lastReceived}, this.GetFormattedBlockTemplatesOperationCompleted, userState);
        }
        
        private void OnGetFormattedBlockTemplatesOperationCompleted(object arg) {
            if ((this.GetFormattedBlockTemplatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFormattedBlockTemplatesCompleted(this, new GetFormattedBlockTemplatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetLatestReadingsByMeterListFormattedBlock", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public formattedBlock[] GetLatestReadingsByMeterListFormattedBlock(meterID[] meterIDs, System.DateTime startDate, System.DateTime endDate, string formattedBlockTemplateName, string[] fieldName, string lastReceived) {
            object[] results = this.Invoke("GetLatestReadingsByMeterListFormattedBlock", new object[] {
                        meterIDs,
                        startDate,
                        endDate,
                        formattedBlockTemplateName,
                        fieldName,
                        lastReceived});
            return ((formattedBlock[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetLatestReadingsByMeterListFormattedBlockAsync(meterID[] meterIDs, System.DateTime startDate, System.DateTime endDate, string formattedBlockTemplateName, string[] fieldName, string lastReceived) {
            this.GetLatestReadingsByMeterListFormattedBlockAsync(meterIDs, startDate, endDate, formattedBlockTemplateName, fieldName, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetLatestReadingsByMeterListFormattedBlockAsync(meterID[] meterIDs, System.DateTime startDate, System.DateTime endDate, string formattedBlockTemplateName, string[] fieldName, string lastReceived, object userState) {
            if ((this.GetLatestReadingsByMeterListFormattedBlockOperationCompleted == null)) {
                this.GetLatestReadingsByMeterListFormattedBlockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestReadingsByMeterListFormattedBlockOperationCompleted);
            }
            this.InvokeAsync("GetLatestReadingsByMeterListFormattedBlock", new object[] {
                        meterIDs,
                        startDate,
                        endDate,
                        formattedBlockTemplateName,
                        fieldName,
                        lastReceived}, this.GetLatestReadingsByMeterListFormattedBlockOperationCompleted, userState);
        }
        
        private void OnGetLatestReadingsByMeterListFormattedBlockOperationCompleted(object arg) {
            if ((this.GetLatestReadingsByMeterListFormattedBlockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestReadingsByMeterListFormattedBlockCompleted(this, new GetLatestReadingsByMeterListFormattedBlockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetAllConnectDisconnectEventsByReasonCode", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public connectDisconnectEvent[] GetAllConnectDisconnectEventsByReasonCode(string reasonCode, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("GetAllConnectDisconnectEventsByReasonCode", new object[] {
                        reasonCode,
                        startDate,
                        endDate});
            return ((connectDisconnectEvent[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllConnectDisconnectEventsByReasonCodeAsync(string reasonCode, System.DateTime startDate, System.DateTime endDate) {
            this.GetAllConnectDisconnectEventsByReasonCodeAsync(reasonCode, startDate, endDate, null);
        }
        
        /// CodeRemarks
        public void GetAllConnectDisconnectEventsByReasonCodeAsync(string reasonCode, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.GetAllConnectDisconnectEventsByReasonCodeOperationCompleted == null)) {
                this.GetAllConnectDisconnectEventsByReasonCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllConnectDisconnectEventsByReasonCodeOperationCompleted);
            }
            this.InvokeAsync("GetAllConnectDisconnectEventsByReasonCode", new object[] {
                        reasonCode,
                        startDate,
                        endDate}, this.GetAllConnectDisconnectEventsByReasonCodeOperationCompleted, userState);
        }
        
        private void OnGetAllConnectDisconnectEventsByReasonCodeOperationCompleted(object arg) {
            if ((this.GetAllConnectDisconnectEventsByReasonCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllConnectDisconnectEventsByReasonCodeCompleted(this, new GetAllConnectDisconnectEventsByReasonCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetSupportedReadingStatusCodes", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public readingStatusCodeEntry[] GetSupportedReadingStatusCodes() {
            object[] results = this.Invoke("GetSupportedReadingStatusCodes", new object[0]);
            return ((readingStatusCodeEntry[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetSupportedReadingStatusCodesAsync() {
            this.GetSupportedReadingStatusCodesAsync(null);
        }
        
        /// CodeRemarks
        public void GetSupportedReadingStatusCodesAsync(object userState) {
            if ((this.GetSupportedReadingStatusCodesOperationCompleted == null)) {
                this.GetSupportedReadingStatusCodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSupportedReadingStatusCodesOperationCompleted);
            }
            this.InvokeAsync("GetSupportedReadingStatusCodes", new object[0], this.GetSupportedReadingStatusCodesOperationCompleted, userState);
        }
        
        private void OnGetSupportedReadingStatusCodesOperationCompleted(object arg) {
            if ((this.GetSupportedReadingStatusCodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSupportedReadingStatusCodesCompleted(this, new GetSupportedReadingStatusCodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetLPReadingsByMeterIDIntervalData", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public intervalData[] GetLPReadingsByMeterIDIntervalData(meterID meterID, System.DateTime profileStartDate, System.DateTime profileEndDate, string lastReceived) {
            object[] results = this.Invoke("GetLPReadingsByMeterIDIntervalData", new object[] {
                        meterID,
                        profileStartDate,
                        profileEndDate,
                        lastReceived});
            return ((intervalData[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetLPReadingsByMeterIDIntervalDataAsync(meterID meterID, System.DateTime profileStartDate, System.DateTime profileEndDate, string lastReceived) {
            this.GetLPReadingsByMeterIDIntervalDataAsync(meterID, profileStartDate, profileEndDate, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetLPReadingsByMeterIDIntervalDataAsync(meterID meterID, System.DateTime profileStartDate, System.DateTime profileEndDate, string lastReceived, object userState) {
            if ((this.GetLPReadingsByMeterIDIntervalDataOperationCompleted == null)) {
                this.GetLPReadingsByMeterIDIntervalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLPReadingsByMeterIDIntervalDataOperationCompleted);
            }
            this.InvokeAsync("GetLPReadingsByMeterIDIntervalData", new object[] {
                        meterID,
                        profileStartDate,
                        profileEndDate,
                        lastReceived}, this.GetLPReadingsByMeterIDIntervalDataOperationCompleted, userState);
        }
        
        private void OnGetLPReadingsByMeterIDIntervalDataOperationCompleted(object arg) {
            if ((this.GetLPReadingsByMeterIDIntervalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLPReadingsByMeterIDIntervalDataCompleted(this, new GetLPReadingsByMeterIDIntervalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetLPReadingsByDateIntervalData", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public intervalData[] GetLPReadingsByDateIntervalData(System.DateTime profileDate, string lastReceived) {
            object[] results = this.Invoke("GetLPReadingsByDateIntervalData", new object[] {
                        profileDate,
                        lastReceived});
            return ((intervalData[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetLPReadingsByDateIntervalDataAsync(System.DateTime profileDate, string lastReceived) {
            this.GetLPReadingsByDateIntervalDataAsync(profileDate, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetLPReadingsByDateIntervalDataAsync(System.DateTime profileDate, string lastReceived, object userState) {
            if ((this.GetLPReadingsByDateIntervalDataOperationCompleted == null)) {
                this.GetLPReadingsByDateIntervalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLPReadingsByDateIntervalDataOperationCompleted);
            }
            this.InvokeAsync("GetLPReadingsByDateIntervalData", new object[] {
                        profileDate,
                        lastReceived}, this.GetLPReadingsByDateIntervalDataOperationCompleted, userState);
        }
        
        private void OnGetLPReadingsByDateIntervalDataOperationCompleted(object arg) {
            if ((this.GetLPReadingsByDateIntervalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLPReadingsByDateIntervalDataCompleted(this, new GetLPReadingsByDateIntervalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetLPReadingsByBillingCycleIntervalData", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public intervalData[] GetLPReadingsByBillingCycleIntervalData(string billingCycle, System.DateTime profileDate, string lastReceived) {
            object[] results = this.Invoke("GetLPReadingsByBillingCycleIntervalData", new object[] {
                        billingCycle,
                        profileDate,
                        lastReceived});
            return ((intervalData[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetLPReadingsByBillingCycleIntervalDataAsync(string billingCycle, System.DateTime profileDate, string lastReceived) {
            this.GetLPReadingsByBillingCycleIntervalDataAsync(billingCycle, profileDate, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetLPReadingsByBillingCycleIntervalDataAsync(string billingCycle, System.DateTime profileDate, string lastReceived, object userState) {
            if ((this.GetLPReadingsByBillingCycleIntervalDataOperationCompleted == null)) {
                this.GetLPReadingsByBillingCycleIntervalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLPReadingsByBillingCycleIntervalDataOperationCompleted);
            }
            this.InvokeAsync("GetLPReadingsByBillingCycleIntervalData", new object[] {
                        billingCycle,
                        profileDate,
                        lastReceived}, this.GetLPReadingsByBillingCycleIntervalDataOperationCompleted, userState);
        }
        
        private void OnGetLPReadingsByBillingCycleIntervalDataOperationCompleted(object arg) {
            if ((this.GetLPReadingsByBillingCycleIntervalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLPReadingsByBillingCycleIntervalDataCompleted(this, new GetLPReadingsByBillingCycleIntervalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetReadingsByBillingCycleIntervalData", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public intervalData[] GetReadingsByBillingCycleIntervalData(string billingCycle, System.DateTime billingDate, int kWhLookBack, int kWLookBack, int kWLookForward, string lastReceived, string[] fieldName) {
            object[] results = this.Invoke("GetReadingsByBillingCycleIntervalData", new object[] {
                        billingCycle,
                        billingDate,
                        kWhLookBack,
                        kWLookBack,
                        kWLookForward,
                        lastReceived,
                        fieldName});
            return ((intervalData[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetReadingsByBillingCycleIntervalDataAsync(string billingCycle, System.DateTime billingDate, int kWhLookBack, int kWLookBack, int kWLookForward, string lastReceived, string[] fieldName) {
            this.GetReadingsByBillingCycleIntervalDataAsync(billingCycle, billingDate, kWhLookBack, kWLookBack, kWLookForward, lastReceived, fieldName, null);
        }
        
        /// CodeRemarks
        public void GetReadingsByBillingCycleIntervalDataAsync(string billingCycle, System.DateTime billingDate, int kWhLookBack, int kWLookBack, int kWLookForward, string lastReceived, string[] fieldName, object userState) {
            if ((this.GetReadingsByBillingCycleIntervalDataOperationCompleted == null)) {
                this.GetReadingsByBillingCycleIntervalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReadingsByBillingCycleIntervalDataOperationCompleted);
            }
            this.InvokeAsync("GetReadingsByBillingCycleIntervalData", new object[] {
                        billingCycle,
                        billingDate,
                        kWhLookBack,
                        kWLookBack,
                        kWLookForward,
                        lastReceived,
                        fieldName}, this.GetReadingsByBillingCycleIntervalDataOperationCompleted, userState);
        }
        
        private void OnGetReadingsByBillingCycleIntervalDataOperationCompleted(object arg) {
            if ((this.GetReadingsByBillingCycleIntervalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReadingsByBillingCycleIntervalDataCompleted(this, new GetReadingsByBillingCycleIntervalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetReadingByMeterIDIntervalData", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public intervalData[] GetReadingByMeterIDIntervalData(meterID meterID, System.DateTime billingDate, int kWhLookBack, int kWLookBack, int kWLookForward, string lastReceived, string[] fieldName) {
            object[] results = this.Invoke("GetReadingByMeterIDIntervalData", new object[] {
                        meterID,
                        billingDate,
                        kWhLookBack,
                        kWLookBack,
                        kWLookForward,
                        lastReceived,
                        fieldName});
            return ((intervalData[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetReadingByMeterIDIntervalDataAsync(meterID meterID, System.DateTime billingDate, int kWhLookBack, int kWLookBack, int kWLookForward, string lastReceived, string[] fieldName) {
            this.GetReadingByMeterIDIntervalDataAsync(meterID, billingDate, kWhLookBack, kWLookBack, kWLookForward, lastReceived, fieldName, null);
        }
        
        /// CodeRemarks
        public void GetReadingByMeterIDIntervalDataAsync(meterID meterID, System.DateTime billingDate, int kWhLookBack, int kWLookBack, int kWLookForward, string lastReceived, string[] fieldName, object userState) {
            if ((this.GetReadingByMeterIDIntervalDataOperationCompleted == null)) {
                this.GetReadingByMeterIDIntervalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReadingByMeterIDIntervalDataOperationCompleted);
            }
            this.InvokeAsync("GetReadingByMeterIDIntervalData", new object[] {
                        meterID,
                        billingDate,
                        kWhLookBack,
                        kWLookBack,
                        kWLookForward,
                        lastReceived,
                        fieldName}, this.GetReadingByMeterIDIntervalDataOperationCompleted, userState);
        }
        
        private void OnGetReadingByMeterIDIntervalDataOperationCompleted(object arg) {
            if ((this.GetReadingByMeterIDIntervalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReadingByMeterIDIntervalDataCompleted(this, new GetReadingByMeterIDIntervalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetReadingsByDateIntervalData", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public intervalData[] GetReadingsByDateIntervalData(System.DateTime billingDate, int kWhLookBack, int kWLookBack, int kWLookForward, string lastReceived, string[] fieldName) {
            object[] results = this.Invoke("GetReadingsByDateIntervalData", new object[] {
                        billingDate,
                        kWhLookBack,
                        kWLookBack,
                        kWLookForward,
                        lastReceived,
                        fieldName});
            return ((intervalData[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetReadingsByDateIntervalDataAsync(System.DateTime billingDate, int kWhLookBack, int kWLookBack, int kWLookForward, string lastReceived, string[] fieldName) {
            this.GetReadingsByDateIntervalDataAsync(billingDate, kWhLookBack, kWLookBack, kWLookForward, lastReceived, fieldName, null);
        }
        
        /// CodeRemarks
        public void GetReadingsByDateIntervalDataAsync(System.DateTime billingDate, int kWhLookBack, int kWLookBack, int kWLookForward, string lastReceived, string[] fieldName, object userState) {
            if ((this.GetReadingsByDateIntervalDataOperationCompleted == null)) {
                this.GetReadingsByDateIntervalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReadingsByDateIntervalDataOperationCompleted);
            }
            this.InvokeAsync("GetReadingsByDateIntervalData", new object[] {
                        billingDate,
                        kWhLookBack,
                        kWLookBack,
                        kWLookForward,
                        lastReceived,
                        fieldName}, this.GetReadingsByDateIntervalDataOperationCompleted, userState);
        }
        
        private void OnGetReadingsByDateIntervalDataOperationCompleted(object arg) {
            if ((this.GetReadingsByDateIntervalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReadingsByDateIntervalDataCompleted(this, new GetReadingsByDateIntervalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetLatestMeterReadingsByMeterGroupIntervalData", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public intervalData GetLatestMeterReadingsByMeterGroupIntervalData(string meterGroupID, serviceType serviceType, string[] fieldName, string lastReceived) {
            object[] results = this.Invoke("GetLatestMeterReadingsByMeterGroupIntervalData", new object[] {
                        meterGroupID,
                        serviceType,
                        fieldName,
                        lastReceived});
            return ((intervalData)(results[0]));
        }
        
        /// CodeRemarks
        public void GetLatestMeterReadingsByMeterGroupIntervalDataAsync(string meterGroupID, serviceType serviceType, string[] fieldName, string lastReceived) {
            this.GetLatestMeterReadingsByMeterGroupIntervalDataAsync(meterGroupID, serviceType, fieldName, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetLatestMeterReadingsByMeterGroupIntervalDataAsync(string meterGroupID, serviceType serviceType, string[] fieldName, string lastReceived, object userState) {
            if ((this.GetLatestMeterReadingsByMeterGroupIntervalDataOperationCompleted == null)) {
                this.GetLatestMeterReadingsByMeterGroupIntervalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestMeterReadingsByMeterGroupIntervalDataOperationCompleted);
            }
            this.InvokeAsync("GetLatestMeterReadingsByMeterGroupIntervalData", new object[] {
                        meterGroupID,
                        serviceType,
                        fieldName,
                        lastReceived}, this.GetLatestMeterReadingsByMeterGroupIntervalDataOperationCompleted, userState);
        }
        
        private void OnGetLatestMeterReadingsByMeterGroupIntervalDataOperationCompleted(object arg) {
            if ((this.GetLatestMeterReadingsByMeterGroupIntervalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestMeterReadingsByMeterGroupIntervalDataCompleted(this, new GetLatestMeterReadingsByMeterGroupIntervalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetLatestReadingByMeterIDAndFieldNameIntervalData", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public intervalData GetLatestReadingByMeterIDAndFieldNameIntervalData(meterID meterID, string[] fieldName, string lastReceived) {
            object[] results = this.Invoke("GetLatestReadingByMeterIDAndFieldNameIntervalData", new object[] {
                        meterID,
                        fieldName,
                        lastReceived});
            return ((intervalData)(results[0]));
        }
        
        /// CodeRemarks
        public void GetLatestReadingByMeterIDAndFieldNameIntervalDataAsync(meterID meterID, string[] fieldName, string lastReceived) {
            this.GetLatestReadingByMeterIDAndFieldNameIntervalDataAsync(meterID, fieldName, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetLatestReadingByMeterIDAndFieldNameIntervalDataAsync(meterID meterID, string[] fieldName, string lastReceived, object userState) {
            if ((this.GetLatestReadingByMeterIDAndFieldNameIntervalDataOperationCompleted == null)) {
                this.GetLatestReadingByMeterIDAndFieldNameIntervalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestReadingByMeterIDAndFieldNameIntervalDataOperationCompleted);
            }
            this.InvokeAsync("GetLatestReadingByMeterIDAndFieldNameIntervalData", new object[] {
                        meterID,
                        fieldName,
                        lastReceived}, this.GetLatestReadingByMeterIDAndFieldNameIntervalDataOperationCompleted, userState);
        }
        
        private void OnGetLatestReadingByMeterIDAndFieldNameIntervalDataOperationCompleted(object arg) {
            if ((this.GetLatestReadingByMeterIDAndFieldNameIntervalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestReadingByMeterIDAndFieldNameIntervalDataCompleted(this, new GetLatestReadingByMeterIDAndFieldNameIntervalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetLatestReadingByFieldNameIntervalData", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public intervalData[] GetLatestReadingByFieldNameIntervalData(string[] fieldName, string lastReceived) {
            object[] results = this.Invoke("GetLatestReadingByFieldNameIntervalData", new object[] {
                        fieldName,
                        lastReceived});
            return ((intervalData[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetLatestReadingByFieldNameIntervalDataAsync(string[] fieldName, string lastReceived) {
            this.GetLatestReadingByFieldNameIntervalDataAsync(fieldName, lastReceived, null);
        }
        
        /// CodeRemarks
        public void GetLatestReadingByFieldNameIntervalDataAsync(string[] fieldName, string lastReceived, object userState) {
            if ((this.GetLatestReadingByFieldNameIntervalDataOperationCompleted == null)) {
                this.GetLatestReadingByFieldNameIntervalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestReadingByFieldNameIntervalDataOperationCompleted);
            }
            this.InvokeAsync("GetLatestReadingByFieldNameIntervalData", new object[] {
                        fieldName,
                        lastReceived}, this.GetLatestReadingByFieldNameIntervalDataOperationCompleted, userState);
        }
        
        private void OnGetLatestReadingByFieldNameIntervalDataOperationCompleted(object arg) {
            if ((this.GetLatestReadingByFieldNameIntervalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestReadingByFieldNameIntervalDataCompleted(this, new GetLatestReadingByFieldNameIntervalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapHeaderAttribute("MultiSpeakMsgHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.multispeak.org/Version_4.1_Release/GetReadingsByDateAndFieldNameIntervalData", RequestNamespace="http://www.multispeak.org/Version_4.1_Release", ResponseNamespace="http://www.multispeak.org/Version_4.1_Release", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public intervalData[] GetReadingsByDateAndFieldNameIntervalData(System.DateTime startDate, System.DateTime endDate, string lastReceived, string[] fieldName) {
            object[] results = this.Invoke("GetReadingsByDateAndFieldNameIntervalData", new object[] {
                        startDate,
                        endDate,
                        lastReceived,
                        fieldName});
            return ((intervalData[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetReadingsByDateAndFieldNameIntervalDataAsync(System.DateTime startDate, System.DateTime endDate, string lastReceived, string[] fieldName) {
            this.GetReadingsByDateAndFieldNameIntervalDataAsync(startDate, endDate, lastReceived, fieldName, null);
        }
        
        /// CodeRemarks
        public void GetReadingsByDateAndFieldNameIntervalDataAsync(System.DateTime startDate, System.DateTime endDate, string lastReceived, string[] fieldName, object userState) {
            if ((this.GetReadingsByDateAndFieldNameIntervalDataOperationCompleted == null)) {
                this.GetReadingsByDateAndFieldNameIntervalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReadingsByDateAndFieldNameIntervalDataOperationCompleted);
            }
            this.InvokeAsync("GetReadingsByDateAndFieldNameIntervalData", new object[] {
                        startDate,
                        endDate,
                        lastReceived,
                        fieldName}, this.GetReadingsByDateAndFieldNameIntervalDataOperationCompleted, userState);
        }
        
        private void OnGetReadingsByDateAndFieldNameIntervalDataOperationCompleted(object arg) {
            if ((this.GetReadingsByDateAndFieldNameIntervalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReadingsByDateAndFieldNameIntervalDataCompleted(this, new GetReadingsByDateAndFieldNameIntervalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release", IsNullable=false)]
    public partial class MultiSpeakMsgHeader : System.Web.Services.Protocols.SoapHeader {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string MajorVersion;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string MinorVersion;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Build;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Branch;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public BuildDescriptor BuildString;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string UserID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Pwd;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string AppName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string AppVersion;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Company;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public DefaultCurrencyCode DefaultCurrencyCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultCurrencyCodeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(MessageHeaderCSUnits.feet)]
        public MessageHeaderCSUnits CSUnits;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CoordinateSystemName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CoordinateSystemAuthority;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CoordinateSystemAuthorityCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Datum;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string SessionID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string PreviousSessionID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ObjectsRemaining;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string LastSent;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string RegistrationID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string MessageID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.DateTime TimeStamp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeStampSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public MessageContext Context;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ContextSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string AuditID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string AuditPassword;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr;
        
        public MultiSpeakMsgHeader() {
            this.CSUnits = MessageHeaderCSUnits.feet;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum BuildDescriptor {
        
        /// <remarks/>
        PR,
        
        /// <remarks/>
        RC,
        
        /// <remarks/>
        Branch,
        
        /// <remarks/>
        Release,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum DefaultCurrencyCode {
        
        /// <remarks/>
        USD,
        
        /// <remarks/>
        EUR,
        
        /// <remarks/>
        AED,
        
        /// <remarks/>
        AFN,
        
        /// <remarks/>
        ALL,
        
        /// <remarks/>
        AMD,
        
        /// <remarks/>
        ANG,
        
        /// <remarks/>
        AOA,
        
        /// <remarks/>
        ARS,
        
        /// <remarks/>
        AUD,
        
        /// <remarks/>
        AWG,
        
        /// <remarks/>
        AZN,
        
        /// <remarks/>
        BAM,
        
        /// <remarks/>
        BBD,
        
        /// <remarks/>
        BDT,
        
        /// <remarks/>
        BGN,
        
        /// <remarks/>
        BHD,
        
        /// <remarks/>
        BIF,
        
        /// <remarks/>
        BMD,
        
        /// <remarks/>
        BND,
        
        /// <remarks/>
        BOB,
        
        /// <remarks/>
        BOV,
        
        /// <remarks/>
        BRL,
        
        /// <remarks/>
        BSD,
        
        /// <remarks/>
        BTN,
        
        /// <remarks/>
        BWP,
        
        /// <remarks/>
        BYR,
        
        /// <remarks/>
        BZD,
        
        /// <remarks/>
        CAD,
        
        /// <remarks/>
        CDF,
        
        /// <remarks/>
        CHE,
        
        /// <remarks/>
        CHF,
        
        /// <remarks/>
        CHW,
        
        /// <remarks/>
        CLF,
        
        /// <remarks/>
        CLP,
        
        /// <remarks/>
        CNY,
        
        /// <remarks/>
        COP,
        
        /// <remarks/>
        COU,
        
        /// <remarks/>
        CRC,
        
        /// <remarks/>
        CUP,
        
        /// <remarks/>
        CVE,
        
        /// <remarks/>
        CZK,
        
        /// <remarks/>
        DJF,
        
        /// <remarks/>
        DKK,
        
        /// <remarks/>
        DOP,
        
        /// <remarks/>
        DZD,
        
        /// <remarks/>
        EEK,
        
        /// <remarks/>
        EGP,
        
        /// <remarks/>
        ERN,
        
        /// <remarks/>
        ETB,
        
        /// <remarks/>
        FJD,
        
        /// <remarks/>
        FKP,
        
        /// <remarks/>
        GBP,
        
        /// <remarks/>
        GEL,
        
        /// <remarks/>
        GHS,
        
        /// <remarks/>
        GIP,
        
        /// <remarks/>
        GMD,
        
        /// <remarks/>
        GNF,
        
        /// <remarks/>
        GTQ,
        
        /// <remarks/>
        GYD,
        
        /// <remarks/>
        HKD,
        
        /// <remarks/>
        HNL,
        
        /// <remarks/>
        HRK,
        
        /// <remarks/>
        HTG,
        
        /// <remarks/>
        HUF,
        
        /// <remarks/>
        IDR,
        
        /// <remarks/>
        ILS,
        
        /// <remarks/>
        INR,
        
        /// <remarks/>
        IQD,
        
        /// <remarks/>
        IRR,
        
        /// <remarks/>
        ISK,
        
        /// <remarks/>
        JMD,
        
        /// <remarks/>
        JOD,
        
        /// <remarks/>
        JPY,
        
        /// <remarks/>
        KES,
        
        /// <remarks/>
        KGS,
        
        /// <remarks/>
        KHR,
        
        /// <remarks/>
        KMF,
        
        /// <remarks/>
        KPW,
        
        /// <remarks/>
        KRW,
        
        /// <remarks/>
        KWD,
        
        /// <remarks/>
        KYD,
        
        /// <remarks/>
        KZT,
        
        /// <remarks/>
        LAK,
        
        /// <remarks/>
        LBP,
        
        /// <remarks/>
        LKR,
        
        /// <remarks/>
        LRD,
        
        /// <remarks/>
        LSL,
        
        /// <remarks/>
        LTL,
        
        /// <remarks/>
        LVL,
        
        /// <remarks/>
        LYD,
        
        /// <remarks/>
        MAD,
        
        /// <remarks/>
        MDL,
        
        /// <remarks/>
        MGA,
        
        /// <remarks/>
        MKD,
        
        /// <remarks/>
        MMK,
        
        /// <remarks/>
        MNT,
        
        /// <remarks/>
        MOP,
        
        /// <remarks/>
        MRO,
        
        /// <remarks/>
        MUR,
        
        /// <remarks/>
        MVR,
        
        /// <remarks/>
        MWK,
        
        /// <remarks/>
        MXN,
        
        /// <remarks/>
        MXV,
        
        /// <remarks/>
        MYR,
        
        /// <remarks/>
        MZN,
        
        /// <remarks/>
        NAD,
        
        /// <remarks/>
        NGN,
        
        /// <remarks/>
        NIO,
        
        /// <remarks/>
        NOK,
        
        /// <remarks/>
        NPR,
        
        /// <remarks/>
        NZD,
        
        /// <remarks/>
        OMR,
        
        /// <remarks/>
        PAB,
        
        /// <remarks/>
        PEN,
        
        /// <remarks/>
        PGK,
        
        /// <remarks/>
        PHP,
        
        /// <remarks/>
        PKR,
        
        /// <remarks/>
        PLN,
        
        /// <remarks/>
        PYG,
        
        /// <remarks/>
        QAR,
        
        /// <remarks/>
        RON,
        
        /// <remarks/>
        RSD,
        
        /// <remarks/>
        RUB,
        
        /// <remarks/>
        RWF,
        
        /// <remarks/>
        SAR,
        
        /// <remarks/>
        SBD,
        
        /// <remarks/>
        SCR,
        
        /// <remarks/>
        SDG,
        
        /// <remarks/>
        SEK,
        
        /// <remarks/>
        SGD,
        
        /// <remarks/>
        SHP,
        
        /// <remarks/>
        SKK,
        
        /// <remarks/>
        SLL,
        
        /// <remarks/>
        SOS,
        
        /// <remarks/>
        SRD,
        
        /// <remarks/>
        STD,
        
        /// <remarks/>
        SYP,
        
        /// <remarks/>
        SZL,
        
        /// <remarks/>
        THB,
        
        /// <remarks/>
        TJS,
        
        /// <remarks/>
        TMM,
        
        /// <remarks/>
        TND,
        
        /// <remarks/>
        TOP,
        
        /// <remarks/>
        TRY,
        
        /// <remarks/>
        TTD,
        
        /// <remarks/>
        TWD,
        
        /// <remarks/>
        TZS,
        
        /// <remarks/>
        UAH,
        
        /// <remarks/>
        UGX,
        
        /// <remarks/>
        USN,
        
        /// <remarks/>
        USS,
        
        /// <remarks/>
        UYU,
        
        /// <remarks/>
        UZS,
        
        /// <remarks/>
        VEF,
        
        /// <remarks/>
        VND,
        
        /// <remarks/>
        VUV,
        
        /// <remarks/>
        WST,
        
        /// <remarks/>
        XAF,
        
        /// <remarks/>
        XAG,
        
        /// <remarks/>
        XAU,
        
        /// <remarks/>
        XBA,
        
        /// <remarks/>
        XBB,
        
        /// <remarks/>
        XBC,
        
        /// <remarks/>
        XBD,
        
        /// <remarks/>
        XCD,
        
        /// <remarks/>
        XDR,
        
        /// <remarks/>
        XFU,
        
        /// <remarks/>
        XOF,
        
        /// <remarks/>
        XPD,
        
        /// <remarks/>
        XPF,
        
        /// <remarks/>
        XPT,
        
        /// <remarks/>
        XTS,
        
        /// <remarks/>
        XXX,
        
        /// <remarks/>
        YER,
        
        /// <remarks/>
        ZAR,
        
        /// <remarks/>
        ZMK,
        
        /// <remarks/>
        ZWD,
        
        /// <remarks/>
        ADF,
        
        /// <remarks/>
        ADP,
        
        /// <remarks/>
        ATS,
        
        /// <remarks/>
        BEF,
        
        /// <remarks/>
        CYP,
        
        /// <remarks/>
        DEM,
        
        /// <remarks/>
        ESP,
        
        /// <remarks/>
        FIM,
        
        /// <remarks/>
        FRF,
        
        /// <remarks/>
        GRD,
        
        /// <remarks/>
        IEP,
        
        /// <remarks/>
        ITL,
        
        /// <remarks/>
        LUF,
        
        /// <remarks/>
        MCF,
        
        /// <remarks/>
        MTL,
        
        /// <remarks/>
        NLG,
        
        /// <remarks/>
        PTE,
        
        /// <remarks/>
        SIT,
        
        /// <remarks/>
        SML,
        
        /// <remarks/>
        VAL,
        
        /// <remarks/>
        XEU,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum MessageHeaderCSUnits {
        
        /// <remarks/>
        feet,
        
        /// <remarks/>
        meters,
        
        /// <remarks/>
        USSurveyFeet,
        
        /// <remarks/>
        other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum MessageContext {
        
        /// <remarks/>
        Production,
        
        /// <remarks/>
        Testing,
        
        /// <remarks/>
        Development,
        
        /// <remarks/>
        Study,
        
        /// <remarks/>
        Training,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class readingStatusCodeEntry {
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public readingStatusCode readingStatusCode;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class readingStatusCode {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string originatingSystemID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string codeCategory;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string codeIndex;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class domainNameChange {
        
        /// <remarks/>
        public string domainName;
        
        /// <remarks/>
        public string oldDomainName;
        
        /// <remarks/>
        public domainNameAction action;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum domainNameAction {
        
        /// <remarks/>
        Add,
        
        /// <remarks/>
        Delete,
        
        /// <remarks/>
        Modify,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class registrationInfo {
        
        /// <remarks/>
        public string registrationID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")]
        public string responseURL;
        
        /// <remarks/>
        public string responseUserID;
        
        /// <remarks/>
        public string responsePwd;
        
        /// <remarks/>
        public string MSFunction;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("methodName", IsNullable=false)]
        public string[] methodsList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class domainMember {
        
        /// <remarks/>
        public string code;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public domainMemberAction action;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool actionSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum domainMemberAction {
        
        /// <remarks/>
        Add,
        
        /// <remarks/>
        Delete,
        
        /// <remarks/>
        Modify,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class loadCycleTier {
        
        /// <remarks/>
        public string rateIdentifier;
        
        /// <remarks/>
        public float cycleRate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool cycleRateSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class loadCycleTierStructure {
        
        /// <remarks/>
        public HANDeviceID loadManagementDeviceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("cycleTier", IsNullable=false)]
        public loadCycleTier[] cycleTiers;
        
        /// <remarks/>
        public duration cyclePeriod;
        
        /// <remarks/>
        public bool randomizeStart;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool randomizeStartSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class HANDeviceID {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string deviceName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string objectID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string utility;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string deviceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class duration {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public timeUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum timeUnits {
        
        /// <remarks/>
        Milliseconds,
        
        /// <remarks/>
        Seconds,
        
        /// <remarks/>
        Minutes,
        
        /// <remarks/>
        Hours,
        
        /// <remarks/>
        Days,
        
        /// <remarks/>
        Weeks,
        
        /// <remarks/>
        Months,
        
        /// <remarks/>
        Years,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class temperatureTier {
        
        /// <remarks/>
        public string rateIdentifier;
        
        /// <remarks/>
        public temperature heatingOffset;
        
        /// <remarks/>
        public temperature coolingOffset;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class temperature {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public temperatureUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum temperatureUnits {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degrees C")]
        degreesC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degrees K")]
        degreesK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degrees F")]
        degreesF,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class temperatureTierStructure {
        
        /// <remarks/>
        public HANDeviceID thermostatID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public temperatureTier[] temperatureTiers;
        
        /// <remarks/>
        public bool fanOn;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool fanOnSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class priceBin {
        
        /// <remarks/>
        public string binIdentifier;
        
        /// <remarks/>
        public string rateIdentifier;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class priceTier {
        
        /// <remarks/>
        public string rateIdentifier;
        
        /// <remarks/>
        public string rateLabel;
        
        /// <remarks/>
        public money price;
        
        /// <remarks/>
        public uom units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string register;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class money {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public currencyCode currencyCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool currencyCodeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum currencyCode {
        
        /// <remarks/>
        USD,
        
        /// <remarks/>
        EUR,
        
        /// <remarks/>
        ADF,
        
        /// <remarks/>
        ADP,
        
        /// <remarks/>
        AED,
        
        /// <remarks/>
        AFN,
        
        /// <remarks/>
        ALL,
        
        /// <remarks/>
        AMD,
        
        /// <remarks/>
        ANG,
        
        /// <remarks/>
        AOA,
        
        /// <remarks/>
        ARS,
        
        /// <remarks/>
        ATS,
        
        /// <remarks/>
        AUD,
        
        /// <remarks/>
        AWG,
        
        /// <remarks/>
        AZN,
        
        /// <remarks/>
        BAM,
        
        /// <remarks/>
        BBD,
        
        /// <remarks/>
        BDT,
        
        /// <remarks/>
        BEF,
        
        /// <remarks/>
        BGN,
        
        /// <remarks/>
        BHD,
        
        /// <remarks/>
        BIF,
        
        /// <remarks/>
        BMD,
        
        /// <remarks/>
        BND,
        
        /// <remarks/>
        BOB,
        
        /// <remarks/>
        BOV,
        
        /// <remarks/>
        BRL,
        
        /// <remarks/>
        BSD,
        
        /// <remarks/>
        BTN,
        
        /// <remarks/>
        BWP,
        
        /// <remarks/>
        BYR,
        
        /// <remarks/>
        BZD,
        
        /// <remarks/>
        CAD,
        
        /// <remarks/>
        CDF,
        
        /// <remarks/>
        CHE,
        
        /// <remarks/>
        CHF,
        
        /// <remarks/>
        CHW,
        
        /// <remarks/>
        CLF,
        
        /// <remarks/>
        CLP,
        
        /// <remarks/>
        CNY,
        
        /// <remarks/>
        COP,
        
        /// <remarks/>
        COU,
        
        /// <remarks/>
        CRC,
        
        /// <remarks/>
        CUP,
        
        /// <remarks/>
        CVE,
        
        /// <remarks/>
        CYP,
        
        /// <remarks/>
        CZK,
        
        /// <remarks/>
        DEM,
        
        /// <remarks/>
        DJF,
        
        /// <remarks/>
        DKK,
        
        /// <remarks/>
        DOP,
        
        /// <remarks/>
        DZD,
        
        /// <remarks/>
        EEK,
        
        /// <remarks/>
        EGP,
        
        /// <remarks/>
        ERN,
        
        /// <remarks/>
        ESP,
        
        /// <remarks/>
        ETB,
        
        /// <remarks/>
        FIM,
        
        /// <remarks/>
        FJD,
        
        /// <remarks/>
        FKP,
        
        /// <remarks/>
        FRF,
        
        /// <remarks/>
        GBP,
        
        /// <remarks/>
        GEL,
        
        /// <remarks/>
        GHS,
        
        /// <remarks/>
        GIP,
        
        /// <remarks/>
        GMD,
        
        /// <remarks/>
        GNF,
        
        /// <remarks/>
        GRD,
        
        /// <remarks/>
        GTQ,
        
        /// <remarks/>
        GYD,
        
        /// <remarks/>
        HKD,
        
        /// <remarks/>
        HNL,
        
        /// <remarks/>
        HRK,
        
        /// <remarks/>
        HTG,
        
        /// <remarks/>
        HUF,
        
        /// <remarks/>
        IDR,
        
        /// <remarks/>
        IEP,
        
        /// <remarks/>
        ILS,
        
        /// <remarks/>
        INR,
        
        /// <remarks/>
        IQD,
        
        /// <remarks/>
        IRR,
        
        /// <remarks/>
        ISK,
        
        /// <remarks/>
        ITL,
        
        /// <remarks/>
        JMD,
        
        /// <remarks/>
        JOD,
        
        /// <remarks/>
        JPY,
        
        /// <remarks/>
        KES,
        
        /// <remarks/>
        KGS,
        
        /// <remarks/>
        KHR,
        
        /// <remarks/>
        KMF,
        
        /// <remarks/>
        KPW,
        
        /// <remarks/>
        KRW,
        
        /// <remarks/>
        KWD,
        
        /// <remarks/>
        KYD,
        
        /// <remarks/>
        KZT,
        
        /// <remarks/>
        LAK,
        
        /// <remarks/>
        LBP,
        
        /// <remarks/>
        LKR,
        
        /// <remarks/>
        LRD,
        
        /// <remarks/>
        LSL,
        
        /// <remarks/>
        LTL,
        
        /// <remarks/>
        LUF,
        
        /// <remarks/>
        LVL,
        
        /// <remarks/>
        LYD,
        
        /// <remarks/>
        MAD,
        
        /// <remarks/>
        MCF,
        
        /// <remarks/>
        MDL,
        
        /// <remarks/>
        MGA,
        
        /// <remarks/>
        MKD,
        
        /// <remarks/>
        MMK,
        
        /// <remarks/>
        MNT,
        
        /// <remarks/>
        MOP,
        
        /// <remarks/>
        MRO,
        
        /// <remarks/>
        MTL,
        
        /// <remarks/>
        MUR,
        
        /// <remarks/>
        MVR,
        
        /// <remarks/>
        MWK,
        
        /// <remarks/>
        MXN,
        
        /// <remarks/>
        MXV,
        
        /// <remarks/>
        MYR,
        
        /// <remarks/>
        MZN,
        
        /// <remarks/>
        NAD,
        
        /// <remarks/>
        NGN,
        
        /// <remarks/>
        NIO,
        
        /// <remarks/>
        NLG,
        
        /// <remarks/>
        NOK,
        
        /// <remarks/>
        NPR,
        
        /// <remarks/>
        NZD,
        
        /// <remarks/>
        OMR,
        
        /// <remarks/>
        PAB,
        
        /// <remarks/>
        PEN,
        
        /// <remarks/>
        PGK,
        
        /// <remarks/>
        PHP,
        
        /// <remarks/>
        PKR,
        
        /// <remarks/>
        PLN,
        
        /// <remarks/>
        PTE,
        
        /// <remarks/>
        PYG,
        
        /// <remarks/>
        QAR,
        
        /// <remarks/>
        RON,
        
        /// <remarks/>
        RSD,
        
        /// <remarks/>
        RUB,
        
        /// <remarks/>
        RWF,
        
        /// <remarks/>
        SAR,
        
        /// <remarks/>
        SBD,
        
        /// <remarks/>
        SCR,
        
        /// <remarks/>
        SDG,
        
        /// <remarks/>
        SEK,
        
        /// <remarks/>
        SGD,
        
        /// <remarks/>
        SHP,
        
        /// <remarks/>
        SIT,
        
        /// <remarks/>
        SKK,
        
        /// <remarks/>
        SLL,
        
        /// <remarks/>
        SML,
        
        /// <remarks/>
        SOS,
        
        /// <remarks/>
        SRD,
        
        /// <remarks/>
        STD,
        
        /// <remarks/>
        SYP,
        
        /// <remarks/>
        SZL,
        
        /// <remarks/>
        THB,
        
        /// <remarks/>
        TJS,
        
        /// <remarks/>
        TMM,
        
        /// <remarks/>
        TND,
        
        /// <remarks/>
        TOP,
        
        /// <remarks/>
        TRY,
        
        /// <remarks/>
        TTD,
        
        /// <remarks/>
        TWD,
        
        /// <remarks/>
        TZS,
        
        /// <remarks/>
        UAH,
        
        /// <remarks/>
        UGX,
        
        /// <remarks/>
        USN,
        
        /// <remarks/>
        USS,
        
        /// <remarks/>
        UYU,
        
        /// <remarks/>
        UZS,
        
        /// <remarks/>
        VAL,
        
        /// <remarks/>
        VEF,
        
        /// <remarks/>
        VND,
        
        /// <remarks/>
        VUV,
        
        /// <remarks/>
        WST,
        
        /// <remarks/>
        XAF,
        
        /// <remarks/>
        XAG,
        
        /// <remarks/>
        XAU,
        
        /// <remarks/>
        XBA,
        
        /// <remarks/>
        XBB,
        
        /// <remarks/>
        XBC,
        
        /// <remarks/>
        XBD,
        
        /// <remarks/>
        XCD,
        
        /// <remarks/>
        XDR,
        
        /// <remarks/>
        XEU,
        
        /// <remarks/>
        XFU,
        
        /// <remarks/>
        XOF,
        
        /// <remarks/>
        XPD,
        
        /// <remarks/>
        XPF,
        
        /// <remarks/>
        XPT,
        
        /// <remarks/>
        XTS,
        
        /// <remarks/>
        XXX,
        
        /// <remarks/>
        YER,
        
        /// <remarks/>
        ZAR,
        
        /// <remarks/>
        ZMK,
        
        /// <remarks/>
        ZWD,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum uom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Acre ft")]
        Acreft,
        
        /// <remarks/>
        Amps,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Amps RMS")]
        AmpsRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Amps squared RMS")]
        AmpssquaredRMS,
        
        /// <remarks/>
        atmospheres,
        
        /// <remarks/>
        Bar,
        
        /// <remarks/>
        ccf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ccf per Hr")]
        ccfperHr,
        
        /// <remarks/>
        cm,
        
        /// <remarks/>
        Corrosion,
        
        /// <remarks/>
        Counter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic feet")]
        cubicfeet,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic feet corrected")]
        cubicfeetcorrected,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic feet per Hr")]
        cubicfeetperHr,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic feet per Hr corrected")]
        cubicfeetperHrcorrected,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic feet per Hr uncorrected")]
        cubicfeetperHruncorrected,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic feet uncorrected")]
        cubicfeetuncorrected,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic meter")]
        cubicmeter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic meter per Hr")]
        cubicmeterperHr,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic meters corrected")]
        cubicmeterscorrected,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic meters per Hr corrected")]
        cubicmetersperHrcorrected,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic meters per Hr uncorrected")]
        cubicmetersperHruncorrected,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic meters uncorrected")]
        cubicmetersuncorrected,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Current phase angle")]
        Currentphaseangle,
        
        /// <remarks/>
        Date,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Date time")]
        Datetime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deg C")]
        degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deg F")]
        degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deg K")]
        degK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Differential pascal")]
        Differentialpascal,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Differential pound per square inch")]
        Differentialpoundpersquareinch,
        
        /// <remarks/>
        dm,
        
        /// <remarks/>
        Dollar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("feet per second")]
        feetpersecond,
        
        /// <remarks/>
        Frequency,
        
        /// <remarks/>
        ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft of water")]
        ftofwater,
        
        /// <remarks/>
        GQ,
        
        /// <remarks/>
        GQh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Gram square cm")]
        Gramsquarecm,
        
        /// <remarks/>
        GVA,
        
        /// <remarks/>
        GVAh,
        
        /// <remarks/>
        GVAR,
        
        /// <remarks/>
        GVARh,
        
        /// <remarks/>
        GW,
        
        /// <remarks/>
        GWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("IMP gl")]
        IMPgl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("IMP gl per Hr")]
        IMPglperHr,
        
        /// <remarks/>
        inches,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Inches H2O column")]
        InchesH2Ocolumn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Inches HG column")]
        InchesHGcolumn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inches of water")]
        inchesofwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Interval timer")]
        Intervaltimer,
        
        /// <remarks/>
        Ionization,
        
        /// <remarks/>
        Joules,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Joules per Hr")]
        JoulesperHr,
        
        /// <remarks/>
        kAmps,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kAmps RMS")]
        kAmpsRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kAmps squared RMS")]
        kAmpssquaredRMS,
        
        /// <remarks/>
        kJoules,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJoules per Hr")]
        kJoulesperHr,
        
        /// <remarks/>
        km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km per hour")]
        kmperhour,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km per second")]
        kmpersecond,
        
        /// <remarks/>
        kQ,
        
        /// <remarks/>
        kQh,
        
        /// <remarks/>
        kV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kV RMS")]
        kVRMS,
        
        /// <remarks/>
        kVA,
        
        /// <remarks/>
        kVAh,
        
        /// <remarks/>
        kVAR,
        
        /// <remarks/>
        kVARh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kVsquared RMS")]
        kVsquaredRMS,
        
        /// <remarks/>
        kW,
        
        /// <remarks/>
        kWh,
        
        /// <remarks/>
        liters,
        
        /// <remarks/>
        m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m per second")]
        mpersecond,
        
        /// <remarks/>
        mAmps,
        
        /// <remarks/>
        Mamps,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mAmps RMS")]
        mAmpsRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mamps RMS")]
        MampsRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mamps squared RMS")]
        MampssquaredRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mAmps squared RMS")]
        mAmpssquaredRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Meter HG column")]
        MeterHGcolumn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("micro m")]
        microm,
        
        /// <remarks/>
        microAmps,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("microAmps RMS")]
        microAmpsRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("microAmps squared RMS")]
        microAmpssquaredRMS,
        
        /// <remarks/>
        microJoules,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("microJoules per Hr")]
        microJoulesperHr,
        
        /// <remarks/>
        microQ,
        
        /// <remarks/>
        microQh,
        
        /// <remarks/>
        microV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("microV RMS")]
        microVRMS,
        
        /// <remarks/>
        microVA,
        
        /// <remarks/>
        microVAh,
        
        /// <remarks/>
        microVAR,
        
        /// <remarks/>
        microVARh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("microVsquared RMS")]
        microVsquaredRMS,
        
        /// <remarks/>
        microW,
        
        /// <remarks/>
        microWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Minutes on battery")]
        Minutesonbattery,
        
        /// <remarks/>
        mJoules,
        
        /// <remarks/>
        MJoules,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJoules per Hr")]
        MJoulesperHr,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mJoules per Hr")]
        mJoulesperHr,
        
        /// <remarks/>
        mm,
        
        /// <remarks/>
        mph,
        
        /// <remarks/>
        MQ,
        
        /// <remarks/>
        mQ,
        
        /// <remarks/>
        MQh,
        
        /// <remarks/>
        mQh,
        
        /// <remarks/>
        MV,
        
        /// <remarks/>
        mV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MV RMS")]
        MVRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mV RMS")]
        mVRMS,
        
        /// <remarks/>
        mVA,
        
        /// <remarks/>
        MVA,
        
        /// <remarks/>
        MVAh,
        
        /// <remarks/>
        mVAh,
        
        /// <remarks/>
        MVAR,
        
        /// <remarks/>
        mVAR,
        
        /// <remarks/>
        mVARh,
        
        /// <remarks/>
        MVARh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mVsquared RMS")]
        mVsquaredRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MVsquared RMS")]
        MVsquaredRMS,
        
        /// <remarks/>
        MW,
        
        /// <remarks/>
        mW,
        
        /// <remarks/>
        mWh,
        
        /// <remarks/>
        MWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of amps T.H.D. excess")]
        NbrofampsTHDexcess,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of demand resets")]
        Nbrofdemandresets,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of encoder tamper")]
        Nbrofencodertamper,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of excursion high")]
        Nbrofexcursionhigh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of excursion low")]
        Nbrofexcursionlow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of inversion")]
        Nbrofinversion,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of physical tamper")]
        Nbrofphysicaltamper,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of power loss")]
        Nbrofpowerloss,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of power outage")]
        Nbrofpoweroutage,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of pulse")]
        Nbrofpulse,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of removal")]
        Nbrofremoval,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of reprogramming")]
        Nbrofreprogramming,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of reverse rotation")]
        Nbrofreverserotation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of sag")]
        Nbrofsag,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of swells")]
        Nbrofswells,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of times programmed")]
        Nbroftimesprogrammed,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of V T.H.D. excess")]
        NbrofVTHDexcess,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of voltage unbalance")]
        Nbrofvoltageunbalance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of watchdog")]
        Nbrofwatchdog,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Normal voltage period")]
        Normalvoltageperiod,
        
        /// <remarks/>
        percent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("percent relative humidity")]
        percentrelativehumidity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("PH factor")]
        PHfactor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pounds per square foot")]
        poundspersquarefoot,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Power factor")]
        Powerfactor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("PPM chlorine")]
        PPMchlorine,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("PPM lead")]
        PPMlead,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("PPM odorant")]
        PPModorant,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("PPM SO2")]
        PPMSO2,
        
        /// <remarks/>
        Q,
        
        /// <remarks/>
        Qh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Sense input")]
        Senseinput,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Static pascal")]
        Staticpascal,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Static pound per square inch")]
        Staticpoundpersquareinch,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("T.H.D. Current")]
        THDCurrent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("T.H.D. Voltage")]
        THDVoltage,
        
        /// <remarks/>
        Therm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Therm per Hr")]
        ThermperHr,
        
        /// <remarks/>
        Time,
        
        /// <remarks/>
        turbidity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("US gl")]
        USgl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("US gl per Hr")]
        USglperHr,
        
        /// <remarks/>
        V,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("V RMS")]
        VRMS,
        
        /// <remarks/>
        VA,
        
        /// <remarks/>
        VAh,
        
        /// <remarks/>
        VAR,
        
        /// <remarks/>
        VARh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Voltage phase angle")]
        Voltagephaseangle,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Vsquared RMS")]
        VsquaredRMS,
        
        /// <remarks/>
        W,
        
        /// <remarks/>
        Wh,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class priceTierStructure {
        
        /// <remarks/>
        public System.DateTime startTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public priceTier[] priceTiers;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public priceBin[] priceBins;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class criticalPeakPriceEventStatus {
        
        /// <remarks/>
        public string eventID;
        
        /// <remarks/>
        public HANDeviceID deviceID;
        
        /// <remarks/>
        public string eventStatus;
        
        /// <remarks/>
        public System.DateTime eventTime;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class criticalPeakPriceEvent {
        
        /// <remarks/>
        public string eventID;
        
        /// <remarks/>
        public System.DateTime eventStartTime;
        
        /// <remarks/>
        public duration eventDuration;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class ch {
        
        /// <remarks/>
        public int idx;
        
        /// <remarks/>
        public string d;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class dB {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ch[] chs;
        
        /// <remarks/>
        public string cS;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class endReading {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string channelIndex;
        
        /// <remarks/>
        public float reading;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool readingSpecified;
        
        /// <remarks/>
        public System.DateTime readingDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool readingDateSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class intervalBlock {
        
        /// <remarks/>
        public string profileID;
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public endReading[] endReadingList;
        
        /// <remarks/>
        public System.DateTime logTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool logTimeSpecified;
        
        /// <remarks/>
        public System.DateTime intervalStart;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool intervalStartSpecified;
        
        /// <remarks/>
        public dB dB;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class meterID {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string meterNo;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public serviceType serviceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool serviceTypeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string objectID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string utility;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum serviceType {
        
        /// <remarks/>
        Electric,
        
        /// <remarks/>
        Gas,
        
        /// <remarks/>
        Water,
        
        /// <remarks/>
        Propane,
        
        /// <remarks/>
        Refuse,
        
        /// <remarks/>
        Sewer,
        
        /// <remarks/>
        Telecom,
        
        /// <remarks/>
        TV,
        
        /// <remarks/>
        Cable,
        
        /// <remarks/>
        Heating,
        
        /// <remarks/>
        Steam,
        
        /// <remarks/>
        Transportation,
        
        /// <remarks/>
        All,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class intervalChannel {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string index;
        
        /// <remarks/>
        public string fieldName;
        
        /// <remarks/>
        public string fieldDescription;
        
        /// <remarks/>
        public uom units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class intervalProfile {
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public duration intervalLength;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("channel", IsNullable=false)]
        public intervalChannel[] channels;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string profileID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class intervalData {
        
        /// <remarks/>
        public string statusDelimiter;
        
        /// <remarks/>
        public string intervalDelimiter;
        
        /// <remarks/>
        public string comment;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("profile", IsNullable=false)]
        public intervalProfile[] profiles;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("block", IsNullable=false)]
        public intervalBlock[] blocks;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(sampleRate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(expirationTime))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class time {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public timeUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class sampleRate : time {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class expirationTime : time {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class configurationStatusItem {
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public string configurationStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("errorString", IsNullable=false)]
        public string[] errorStringList;
        
        /// <remarks/>
        public System.DateTime timeStamp;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class meterConfigurationStatus {
        
        /// <remarks/>
        public extensions extensions;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public extensionsItem[] extensionsList;
        
        /// <remarks/>
        public string configurationGroupID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public configurationStatusItem[] configurationStatusList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class extensions {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class extensionsItem {
        
        /// <remarks/>
        public string extName;
        
        /// <remarks/>
        public extValue extValue;
        
        /// <remarks/>
        public extType extType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool extTypeSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class extValue {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uom units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum extType {
        
        /// <remarks/>
        anySimpleType,
        
        /// <remarks/>
        anyType,
        
        /// <remarks/>
        anyURI,
        
        /// <remarks/>
        base64Binary,
        
        /// <remarks/>
        boolean,
        
        /// <remarks/>
        @byte,
        
        /// <remarks/>
        date,
        
        /// <remarks/>
        dateTime,
        
        /// <remarks/>
        @decimal,
        
        /// <remarks/>
        @double,
        
        /// <remarks/>
        duration,
        
        /// <remarks/>
        ENTITIES,
        
        /// <remarks/>
        ENTITY,
        
        /// <remarks/>
        @float,
        
        /// <remarks/>
        gDay,
        
        /// <remarks/>
        gMonth,
        
        /// <remarks/>
        gMonthDay,
        
        /// <remarks/>
        gYear,
        
        /// <remarks/>
        gYearMonth,
        
        /// <remarks/>
        hexBinary,
        
        /// <remarks/>
        ID,
        
        /// <remarks/>
        IDREF,
        
        /// <remarks/>
        IDREFS,
        
        /// <remarks/>
        @int,
        
        /// <remarks/>
        integer,
        
        /// <remarks/>
        language,
        
        /// <remarks/>
        @long,
        
        /// <remarks/>
        Name,
        
        /// <remarks/>
        NCName,
        
        /// <remarks/>
        negativeInteger,
        
        /// <remarks/>
        NMTOKEN,
        
        /// <remarks/>
        NMTOKENS,
        
        /// <remarks/>
        nonNegativeInteger,
        
        /// <remarks/>
        nonPositiveInteger,
        
        /// <remarks/>
        normalizedString,
        
        /// <remarks/>
        NOTATION,
        
        /// <remarks/>
        positiveInteger,
        
        /// <remarks/>
        QName,
        
        /// <remarks/>
        @short,
        
        /// <remarks/>
        @string,
        
        /// <remarks/>
        time,
        
        /// <remarks/>
        token,
        
        /// <remarks/>
        unsignedByte,
        
        /// <remarks/>
        unsignedInt,
        
        /// <remarks/>
        unsignedLong,
        
        /// <remarks/>
        unsignedShort,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class remainingBalance {
        
        /// <remarks/>
        public money priorityBalance;
        
        /// <remarks/>
        public money sharedArrears;
        
        /// <remarks/>
        public money balance;
        
        /// <remarks/>
        public meterReading finalRead;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class meterReading : mspObject {
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public string deviceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public readingValue[] readingValues;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class readingValue {
        
        /// <remarks/>
        public extensions extensions;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public extensionsItem[] extensionsList;
        
        /// <remarks/>
        public uom units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        public string value;
        
        /// <remarks/>
        public string ratePeriod;
        
        /// <remarks/>
        public string readingType;
        
        /// <remarks/>
        public string fieldName;
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public measurementPeriod measurementPeriod;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool measurementPeriodSpecified;
        
        /// <remarks/>
        public System.DateTime timeStamp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timeStampSpecified;
        
        /// <remarks/>
        public readingStatusCode readingStatusCode;
        
        /// <remarks/>
        public readingTypeCode readingTypeCode;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum measurementPeriod {
        
        /// <remarks/>
        Current,
        
        /// <remarks/>
        Previous,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Previous Season")]
        PreviousSeason,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class readingTypeCode {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string timeAttribute;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string dataQualifier;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string accumulationBehavior;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string flowDirection;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string UOMCategory;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string measurementCategory;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string phaseIndex;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string unitsMultiplier;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string displayableUOM;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(outageReasonContainer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DRProgramEnrollment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DRProgram))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(demandResponseEventStatus))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(demandResponseEvent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(demandResponseParameters))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HANCommission))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(thermostatConfiguration))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(thermostatCurrentConfiguration))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(workTicket))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(workOrderSelection))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ZigBeePublishPrice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ZigBeeLoadControlEvent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ZigBeeDisplayMessage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ZigBeeCancelMessage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ZigBeeCancelLoadControlEvent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(usage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(substationLoadControlStatus))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(powerFactorManagementEvent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(meters))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(meterEventList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(endDeviceShipment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(maintenanceDataSet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(scadaAnalog))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(measurement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(accumulatedValue))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(inHomeDisplayGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(meterConnectivity))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(observationDefinition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(timesheet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(employeeTimeRecord))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(customerCall))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(switchingOrder))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(materialManagementAssembly))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(laborCategory))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(materialItem))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(historyLog))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(profileObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspAlarm))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(blinkAlarm))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(voltageAlarm))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(readingObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(demandResponseEventDeprecated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(loadManagementEvent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(customersAttachedToDevice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(customersAffectedByOutage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(chargeableDeviceList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(chargeableDevice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(callBackList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(outageDetectionEvent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(inspection))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(meterExchanges))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(electricMeterExchange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(waterMeterExchange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(gasMeterExchange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(propaneMeterExchange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(otherMeterExchange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ppmTransaction))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ppmBalanceAdjustment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(rate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ppmLocation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(connectDisconnectList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(connectDisconnectEvent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CDStateChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CDState))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(billingDetail))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(billingData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(billingAccountLoad))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(billedUsage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(workStatus))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(workRequest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(unassignment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(groupAssignment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(equipment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(capability))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(vehicle))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(crew))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(resource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(assignment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(project))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(scadaStatus))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(scadaPoints))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(schedule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(readingSchedule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(readingType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(meterGroups))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(meterGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(configurationGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AVLPosition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(formattedBlockTemplate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(meterReadingC1219))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(thresholdNotificationItem))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(thresholdMonitoringItem))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eventMonitoringItem))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tender))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(payableItem))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(circuitElement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(outageDurationEvent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(outageLocation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(outageDetectionLog))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(loggedOutageDetectionEvent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ppmMeterExchange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AVLLog))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AVLState))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspElectricalDefinition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(recloserEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(concentricNeutralCableEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tapeShieldCableEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(lineConstructionEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(synchronousMachineEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(inductionMachineEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ZsmImpedanceEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(loadMixEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(conductorEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(switchEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(sectionalizerEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(regulatorEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(fuseEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(lineEnvironmentalAttributes))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(materialAttributes))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(serviceDropEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(secondaryConductorEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ROWAttributes))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(transformerEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(breakerEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HANDeviceGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspDeviceExchange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(meterBaseExchange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LMDeviceExchange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(inHomeDisplayExchange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CDDeviceExchange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspResultsBase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(shortCircuitAnalysisResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(loadFlowResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(crewActionEvent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(outageEventStatus))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(outageReasonCodeList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(message))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(assessment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(maintenanceOrder))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(meterReading))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(account))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspPerson))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(worker))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(customer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(backgroundGraphics))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(content))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(attachment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(surgeArrestor))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(feederObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(substation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(powerMonitor))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspPolygonObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(genericPolygonFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(parcel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspLineObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(genericLineFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(spanGuy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspConnectivityLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspElectricLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ugPrimaryLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ohTransmissionLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ohSecondaryLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ugTransmissionLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ugSecondaryLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ohPrimaryLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspMultiGeometryObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(station))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(design))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(workOrder))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(clearance))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(switchingSchedule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(taskAggregation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(workTask))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(work))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(associatedMeters))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(serviceOrder))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(otherService))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(propaneService))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(gasService))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(waterService))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(electricService))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TOUSchedule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspMeter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(receivedWaterMeter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(receivedPropaneMeter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(receivedGasMeter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(receivedElectricMeter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(testedElectricMeter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(propaneMeter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(gasMeter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(waterMeter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(otherMeter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(electricMeter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(inHomeDisplayMessage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(inHomeDisplayBillingMessage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(anchor))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(regulator))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspSwitchingDevice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(@switch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(jumper))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(cut))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(elbow))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspOverCurrentDevice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(fuse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(recloser))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(sectionalizer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(breaker))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(capacitor))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(transformer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspLoadGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspDevice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(module))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CDDevice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspPointObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(load))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspAssetHistoryEvent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(assetHistoryEvent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(meterHistoryEvent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(outageEvent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(assessmentLocation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(spatialFeatureGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(genericPointFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(secondaryJunctionBox))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(riser))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(primaryCabinet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(powerSystemDevice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(pole))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(serviceLocation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(premise))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(outageDetectionDevice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(meterBase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(measurementDevice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(loadManagementDevice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(inHomeDisplay))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(guy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(genericAnnotationFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspConnectivityPoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspElectricPoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(equivalentSource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(fakeNodeSection))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(trafficLight))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(streetLight))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspBankObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(regulatorBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspSwitchingBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(switchingDeviceBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(overcurrentDeviceBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(capacitorBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(transformerBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspMotorGenerator))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(inductionMachine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(synchronousMachine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(securityLight))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(scadaPoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(thermostat))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public abstract partial class mspObject {
        
        /// <remarks/>
        public extensions extensions;
        
        /// <remarks/>
        public string comments;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public extensionsItem[] extensionsList;
        
        /// <remarks/>
        public string objectName;
        
        /// <remarks/>
        public IdentifiedObject identifiedObject;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string objectID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(action.Change)]
        public action verb;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string errorString;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string replaceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string utility;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr;
        
        public mspObject() {
            this.verb = action.Change;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public abstract partial class IdentifiedObject {
        
        /// <remarks/>
        public string mRID;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Name[] Names;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class Name {
        
        /// <remarks/>
        public string nameString;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public NameType NameType;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class NameType {
        
        /// <remarks/>
        public string nameString;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public NameTypeAuthority NameTypeAuthority;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class NameTypeAuthority {
        
        /// <remarks/>
        public string nameString;
        
        /// <remarks/>
        public string description;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum action {
        
        /// <remarks/>
        New,
        
        /// <remarks/>
        Change,
        
        /// <remarks/>
        Delete,
        
        /// <remarks/>
        Replace,
        
        /// <remarks/>
        Link,
        
        /// <remarks/>
        Unlink,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class outageReasonContainer : mspObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public outageReasonItem[] outageReasonList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class outageReasonItem {
        
        /// <remarks/>
        public string category;
        
        /// <remarks/>
        public outageReason outageReason;
        
        /// <remarks/>
        public string categoryGroup;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class outageReason {
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public outageReportingCode[] outageReportingCodeList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class outageReportingCode {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string reportingBody;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class DRProgramEnrollment : mspObject {
        
        /// <remarks/>
        public string DRProgramID;
        
        /// <remarks/>
        public string DRProgramName;
        
        /// <remarks/>
        public serviceID serviceID;
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public string customerID;
        
        /// <remarks/>
        public string accountNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public HANDeviceID[] HANDeviceList;
        
        /// <remarks/>
        public System.DateTime DRProgramEnrollDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DRProgramEnrollDateSpecified;
        
        /// <remarks/>
        public System.DateTime DRProgramParticStartDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DRProgramParticStartDateSpecified;
        
        /// <remarks/>
        public System.DateTime DRProgramParticEndDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DRProgramParticEndDateSpecified;
        
        /// <remarks/>
        public DRProgramEnrollmentStatus DRProgramEnrollmentStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DRProgramEnrollmentStatusSpecified;
        
        /// <remarks/>
        public string otherDRProgramEnrollmentStatus;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class serviceID {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public serviceType serviceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool serviceTypeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string objectID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum DRProgramEnrollmentStatus {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Active,
        
        /// <remarks/>
        Inactive,
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class DRProgram : mspObject {
        
        /// <remarks/>
        public string DRProgramName;
        
        /// <remarks/>
        public string DRProgramOwner;
        
        /// <remarks/>
        public string DRProgramDescription;
        
        /// <remarks/>
        public System.DateTime DRProgramStartDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DRProgramStartDateSpecified;
        
        /// <remarks/>
        public System.DateTime DRProgramEndDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DRProgramEndDateSpecified;
        
        /// <remarks/>
        public bool isDRDeviceRequired;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isDRDeviceRequiredSpecified;
        
        /// <remarks/>
        public string HANDeviceType;
        
        /// <remarks/>
        public DRProgramStatus DRProgramStatus;
        
        /// <remarks/>
        public string otherDRProgramStatus;
        
        /// <remarks/>
        public string DRProgramType;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum DRProgramStatus {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Active,
        
        /// <remarks/>
        Suspended,
        
        /// <remarks/>
        Rescinded,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class demandResponseEventStatus : mspObject {
        
        /// <remarks/>
        public string eventID;
        
        /// <remarks/>
        public HANDeviceID deviceID;
        
        /// <remarks/>
        public string eventStatus;
        
        /// <remarks/>
        public System.DateTime timestamp;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class demandResponseEvent : mspObject {
        
        /// <remarks/>
        public string utilityEnrollmentGroup;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("deviceClasses")]
        public string[] deviceClasses;
        
        /// <remarks/>
        public System.DateTime eventStartTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool eventStartTimeSpecified;
        
        /// <remarks/>
        public duration eventDuration;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool randomizeEventStart;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool randomizeEventEnd;
        
        /// <remarks/>
        public temperature heatingSetPoint;
        
        /// <remarks/>
        public temperature coolingSetPoint;
        
        /// <remarks/>
        public temperature heatingOffset;
        
        /// <remarks/>
        public temperature coolingOffset;
        
        /// <remarks/>
        public float averageLoadAdjustment;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool averageLoadAdjustmentSpecified;
        
        /// <remarks/>
        public float dutyCycle;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dutyCycleSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string criticality;
        
        public demandResponseEvent() {
            this.randomizeEventStart = true;
            this.randomizeEventEnd = true;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class demandResponseParameters : mspObject {
        
        /// <remarks/>
        public string utilityEnrollmentCode;
        
        /// <remarks/>
        public duration startRandomizationDuration;
        
        /// <remarks/>
        public duration stopRandomizationDuration;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class HANCommission : mspObject {
        
        /// <remarks/>
        public HANInterfaceID interfaceID;
        
        /// <remarks/>
        public HANCommissionStatus commissionStatus;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class HANInterfaceID {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string deviceName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string objectID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string utility;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum HANCommissionStatus {
        
        /// <remarks/>
        Commissioned,
        
        /// <remarks/>
        Decommissioned,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(thermostatCurrentConfiguration))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class thermostatConfiguration : mspObject {
        
        /// <remarks/>
        public thermostatMode thermostatMode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool thermostatModeSpecified;
        
        /// <remarks/>
        public thermostatFan thermostatFan;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool thermostatFanSpecified;
        
        /// <remarks/>
        public string thermostatHold;
        
        /// <remarks/>
        public temperature coolingSetPoint;
        
        /// <remarks/>
        public temperature heatingSetPoint;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum thermostatMode {
        
        /// <remarks/>
        Off,
        
        /// <remarks/>
        Heat,
        
        /// <remarks/>
        Cool,
        
        /// <remarks/>
        Auto,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum thermostatFan {
        
        /// <remarks/>
        Auto,
        
        /// <remarks/>
        On,
        
        /// <remarks/>
        Cycle,
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class thermostatCurrentConfiguration : thermostatConfiguration {
        
        /// <remarks/>
        public string rateLabel;
        
        /// <remarks/>
        public temperature insideTemperature;
        
        /// <remarks/>
        public temperature outsideTemperature;
        
        /// <remarks/>
        public float humidity;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool humiditySpecified;
        
        /// <remarks/>
        public string occupancyMode;
        
        /// <remarks/>
        public System.DateTime currentTime;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class workTicket : mspObject {
        
        /// <remarks/>
        public string woNumber;
        
        /// <remarks/>
        public string jobNumber;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public string statusCode;
        
        /// <remarks/>
        public string location;
        
        /// <remarks/>
        public string county;
        
        /// <remarks/>
        public string taxDist;
        
        /// <remarks/>
        public string franchiseDist;
        
        /// <remarks/>
        public string schoolDist;
        
        /// <remarks/>
        public string district;
        
        /// <remarks/>
        public voltage systemVolts;
        
        /// <remarks/>
        public string woType;
        
        /// <remarks/>
        public string cd740c;
        
        /// <remarks/>
        public string ext740c;
        
        /// <remarks/>
        public string loanNo;
        
        /// <remarks/>
        public string cwpYr;
        
        /// <remarks/>
        public string cwpCd;
        
        /// <remarks/>
        public string budgetPur;
        
        /// <remarks/>
        public long acNo;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool acNoSpecified;
        
        /// <remarks/>
        public long budgetCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool budgetCodeSpecified;
        
        /// <remarks/>
        public string actCode;
        
        /// <remarks/>
        public long deptCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool deptCodeSpecified;
        
        /// <remarks/>
        public string warehouseID;
        
        /// <remarks/>
        public long grpCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool grpCodeSpecified;
        
        /// <remarks/>
        public string crewID;
        
        /// <remarks/>
        public System.DateTime startDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startDateSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        public System.DateTime clsDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool clsDateSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        public System.DateTime estDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool estDateSpecified;
        
        /// <remarks/>
        public bool contCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool contCodeSpecified;
        
        /// <remarks/>
        public string priority;
        
        /// <remarks/>
        public duration duration;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(cumulativeDrop))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(sectionDrop))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class voltage {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public voltageUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum voltageUnits {
        
        /// <remarks/>
        V,
        
        /// <remarks/>
        kV,
        
        /// <remarks/>
        MV,
        
        /// <remarks/>
        mV,
        
        /// <remarks/>
        microV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Per Unit")]
        PerUnit,
        
        /// <remarks/>
        Percent,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class cumulativeDrop : voltage {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class sectionDrop : voltage {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class workOrderSelection : mspObject {
        
        /// <remarks/>
        public string projectID;
        
        /// <remarks/>
        public string woNumber;
        
        /// <remarks/>
        public string jobNumber;
        
        /// <remarks/>
        public string jobDescr;
        
        /// <remarks/>
        public string statusCode;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class ZigBeePublishPrice : mspObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string currency;
        
        /// <remarks/>
        public System.DateTime currentTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string issuerEventID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string providerID;
        
        /// <remarks/>
        public string rateLabel;
        
        /// <remarks/>
        public string unitOfMeasure;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class ZigBeeLoadControlEvent : mspObject {
        
        /// <remarks/>
        public string issuerEventID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string deviceClass;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string utilityEnrollmentGroup;
        
        /// <remarks/>
        public System.DateTime startTime;
        
        /// <remarks/>
        public integerDuration integerDuration;
        
        /// <remarks/>
        public uint criticalityLevel;
        
        /// <remarks/>
        public uint coolingTemperatureOffset;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool coolingTemperatureOffsetSpecified;
        
        /// <remarks/>
        public uint heatingTemperatureOffset;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool heatingTemperatureOffsetSpecified;
        
        /// <remarks/>
        public uint coolingTemperatureSetPoint;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool coolingTemperatureSetPointSpecified;
        
        /// <remarks/>
        public uint heatingTemperatureSetPoint;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool heatingTemperatureSetPointSpecified;
        
        /// <remarks/>
        public uint avgLoadAdjustment;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool avgLoadAdjustmentSpecified;
        
        /// <remarks/>
        public uint dutyCycle;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dutyCycleSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="hexBinary")]
        public byte[] eventControl;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class integerDuration {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public timeUnits timeUnits;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timeUnitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute(DataType="integer")]
        public string Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class ZigBeeDisplayMessage : mspObject {
        
        /// <remarks/>
        public uint messageID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool messageIDSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="hexBinary")]
        public byte[] messageControl;
        
        /// <remarks/>
        public System.DateTime startTime;
        
        /// <remarks/>
        public integerDuration integerDuration;
        
        /// <remarks/>
        public string message;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class ZigBeeCancelMessage : mspObject {
        
        /// <remarks/>
        public uint messageID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool messageIDSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="hexBinary")]
        public byte[] messageControl;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class ZigBeeCancelLoadControlEvent : mspObject {
        
        /// <remarks/>
        public string issuerEventID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string deviceClass;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string utilityEnrollmentGroup;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="hexBinary")]
        public byte[] cancelControl;
        
        /// <remarks/>
        public System.DateTime effectiveTime;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class usage : mspObject {
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public string customerID;
        
        /// <remarks/>
        public string gridLocation;
        
        /// <remarks/>
        public string accountNumber;
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public usageInstance[] usageList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class usageInstance {
        
        /// <remarks/>
        public extensions extensions;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public extensionsItem[] extensionsList;
        
        /// <remarks/>
        public System.DateTime dateTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dateTimeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string monthNumber;
        
        /// <remarks/>
        public float value;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool valueSpecified;
        
        /// <remarks/>
        public uom uom;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool uomSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string useDays;
        
        /// <remarks/>
        public qualityDescription1 quality;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool qualitySpecified;
        
        /// <remarks/>
        public unitPrefix1 unitPrefix;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitPrefixSpecified;
        
        /// <remarks/>
        public string rate;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="qualityDescription", Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum qualityDescription1 {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Measured,
        
        /// <remarks/>
        Default,
        
        /// <remarks/>
        Estimated,
        
        /// <remarks/>
        Calculated,
        
        /// <remarks/>
        Initial,
        
        /// <remarks/>
        Last,
        
        /// <remarks/>
        Failed,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="unitPrefix", Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum unitPrefix1 {
        
        /// <remarks/>
        Maximum,
        
        /// <remarks/>
        Minimum,
        
        /// <remarks/>
        Average,
        
        /// <remarks/>
        Instantaneous,
        
        /// <remarks/>
        Cumulative,
        
        /// <remarks/>
        Quantity,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class substationLoadControlStatus : mspObject {
        
        /// <remarks/>
        public string substationName;
        
        /// <remarks/>
        public string status;
        
        /// <remarks/>
        public string mode;
        
        /// <remarks/>
        public scadaAnalog scadaAnalog;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public controlItem[] controlledItems;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class scadaAnalog : mspObject {
        
        /// <remarks/>
        public value value;
        
        /// <remarks/>
        public unitPrefix1 unitPrefix;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitPrefixSpecified;
        
        /// <remarks/>
        public qualityDescription1 quality;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool qualitySpecified;
        
        /// <remarks/>
        public analogCondition analogCondition;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool analogConditionSpecified;
        
        /// <remarks/>
        public System.DateTime timeStamp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timeStampSpecified;
        
        /// <remarks/>
        public phaseCode phaseCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseCodeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public AnalogValue[] scadaAnalogValues;
        
        /// <remarks/>
        public string unitID;
        
        /// <remarks/>
        public bool positiveFlowIn;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool positiveFlowInSpecified;
        
        /// <remarks/>
        public string analogLimitSetID;
        
        /// <remarks/>
        public string measurementTypeID;
        
        /// <remarks/>
        public objectRef powerSystemResourceID;
        
        /// <remarks/>
        public float maxValue;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxValueSpecified;
        
        /// <remarks/>
        public float minValue;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool minValueSpecified;
        
        /// <remarks/>
        public float nominalValue;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nominalValueSpecified;
        
        /// <remarks/>
        public string otherQualityCode;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class value {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uom units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum analogCondition {
        
        /// <remarks/>
        L4,
        
        /// <remarks/>
        L3,
        
        /// <remarks/>
        L2,
        
        /// <remarks/>
        L1,
        
        /// <remarks/>
        Normal,
        
        /// <remarks/>
        H1,
        
        /// <remarks/>
        H2,
        
        /// <remarks/>
        H3,
        
        /// <remarks/>
        H4,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum phaseCode {
        
        /// <remarks/>
        A,
        
        /// <remarks/>
        B,
        
        /// <remarks/>
        C,
        
        /// <remarks/>
        N,
        
        /// <remarks/>
        AB,
        
        /// <remarks/>
        AC,
        
        /// <remarks/>
        BC,
        
        /// <remarks/>
        ABC,
        
        /// <remarks/>
        AN,
        
        /// <remarks/>
        BN,
        
        /// <remarks/>
        CN,
        
        /// <remarks/>
        ABN,
        
        /// <remarks/>
        ACN,
        
        /// <remarks/>
        BCN,
        
        /// <remarks/>
        ABCN,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class AnalogValue : MeasurementValue {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        public string value;
        
        /// <remarks/>
        public string measurementValueSourceID;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AccumulatorValue))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AnalogValue))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringMeasurementValue))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DiscreteValue))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class MeasurementValue : mspCIMObject {
        
        /// <remarks/>
        public System.DateTime timeStamp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timeStampSpecified;
        
        /// <remarks/>
        public PerCent sensorAccuracy;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class PerCent {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OperationalLimitSet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VoltageLimit))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CurrentLimit))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ApparentPowerLimit))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ActivePowerLimit))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ControlAreaGeneratingUnit))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ControlArea))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NonConformLoadGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ConformLoadGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SubLoadArea))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MeasurementValueSource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MeasurementType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringMeasurement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Accumulator))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MeasurementValue))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AccumulatorValue))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AnalogValue))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringMeasurementValue))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DiscreteValue))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Discrete))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ConnectivityNode))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Unit))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BaseVoltage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PowerSystemResource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LoadArea))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EquipmentContainer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Line))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VoltageLevel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bay))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EquivalentNetwork))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SubGeographicalRegion))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeographicalRegion))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Curve))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ReactiveCapabilityCurve))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GrossToNetActivePowerCurve))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RegulatingControl))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ConductingEquipment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Connector))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BusbarSection))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeneratingUnit))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HydroGeneratingUnit))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ThermalGeneratingUnit))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Terminal))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RegulatingCondEq))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StaticVarCompensator))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EquivalentEquipment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EquivalentShunt))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EquivalentBranch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TapChanger))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransformerWinding))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DayType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BasicIntervalSchedule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IrregularIntervalSchedule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RegularIntervalSchedule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LoadCurve))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RegulationSchedule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeasonDayTypeSchedule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NonConformLoadSchedule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ConformLoadSchedule))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public abstract partial class mspCIMObject {
        
        /// <remarks/>
        public extensions1 extensions;
        
        /// <remarks/>
        public string comments;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public extensionsItem1[] extensionsList;
        
        /// <remarks/>
        public IdentifiedObject IdentifiedObject;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string objectID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(action1.Change)]
        public action1 verb;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string errorString;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string replaceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string utility;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr;
        
        public mspCIMObject() {
            this.verb = action1.Change;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="extensions", Namespace="cpsm_V4.1_Release")]
    public partial class extensions1 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="extensionsItem", Namespace="cpsm_V4.1_Release")]
    public partial class extensionsItem1 {
        
        /// <remarks/>
        public string extName;
        
        /// <remarks/>
        public string extValue;
        
        /// <remarks/>
        public extensionsItemExtType extType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool extTypeSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="cpsm_V4.1_Release")]
    public enum extensionsItemExtType {
        
        /// <remarks/>
        anySimpleType,
        
        /// <remarks/>
        anyType,
        
        /// <remarks/>
        anyURI,
        
        /// <remarks/>
        base64Binary,
        
        /// <remarks/>
        boolean,
        
        /// <remarks/>
        @byte,
        
        /// <remarks/>
        date,
        
        /// <remarks/>
        dateTime,
        
        /// <remarks/>
        @decimal,
        
        /// <remarks/>
        @double,
        
        /// <remarks/>
        duration,
        
        /// <remarks/>
        ENTITIES,
        
        /// <remarks/>
        ENTITY,
        
        /// <remarks/>
        @float,
        
        /// <remarks/>
        gDay,
        
        /// <remarks/>
        gMonth,
        
        /// <remarks/>
        gMonthDay,
        
        /// <remarks/>
        gYear,
        
        /// <remarks/>
        gYearMonth,
        
        /// <remarks/>
        hexBinary,
        
        /// <remarks/>
        ID,
        
        /// <remarks/>
        IDREF,
        
        /// <remarks/>
        IDREFS,
        
        /// <remarks/>
        @int,
        
        /// <remarks/>
        integer,
        
        /// <remarks/>
        language,
        
        /// <remarks/>
        @long,
        
        /// <remarks/>
        Name,
        
        /// <remarks/>
        NCName,
        
        /// <remarks/>
        negativeInteger,
        
        /// <remarks/>
        NMTOKEN,
        
        /// <remarks/>
        NMTOKENS,
        
        /// <remarks/>
        nonNegativeInteger,
        
        /// <remarks/>
        nonPositiveInteger,
        
        /// <remarks/>
        normalizedString,
        
        /// <remarks/>
        NOTATION,
        
        /// <remarks/>
        positiveInteger,
        
        /// <remarks/>
        QName,
        
        /// <remarks/>
        @short,
        
        /// <remarks/>
        @string,
        
        /// <remarks/>
        time,
        
        /// <remarks/>
        token,
        
        /// <remarks/>
        unsignedByte,
        
        /// <remarks/>
        unsignedInt,
        
        /// <remarks/>
        unsignedLong,
        
        /// <remarks/>
        unsignedShort,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="action", Namespace="cpsm_V4.1_Release")]
    public enum action1 {
        
        /// <remarks/>
        New,
        
        /// <remarks/>
        Change,
        
        /// <remarks/>
        Delete,
        
        /// <remarks/>
        Replace,
        
        /// <remarks/>
        Link,
        
        /// <remarks/>
        Unlink,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class OperationalLimitSet : mspCIMObject {
        
        /// <remarks/>
        public string equipmentID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("limitID", IsNullable=false)]
        public string[] limits;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class VoltageLimit : mspCIMObject {
        
        /// <remarks/>
        public activePower value;
        
        /// <remarks/>
        public string type;
        
        /// <remarks/>
        public string operationalLimitSetID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class activePower {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public realPowerUnits1 units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="realPowerUnits", Namespace="cpsm_V4.1_Release")]
    public enum realPowerUnits1 {
        
        /// <remarks/>
        mW,
        
        /// <remarks/>
        W,
        
        /// <remarks/>
        kW,
        
        /// <remarks/>
        MW,
        
        /// <remarks/>
        GW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Per Unit")]
        PerUnit,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class CurrentLimit : mspCIMObject {
        
        /// <remarks/>
        public activePower value;
        
        /// <remarks/>
        public string type;
        
        /// <remarks/>
        public string operationalLimitSetID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class ApparentPowerLimit : mspCIMObject {
        
        /// <remarks/>
        public activePower value;
        
        /// <remarks/>
        public string type;
        
        /// <remarks/>
        public string operationalLimitSetID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class ActivePowerLimit : mspCIMObject {
        
        /// <remarks/>
        public activePower value;
        
        /// <remarks/>
        public string type;
        
        /// <remarks/>
        public string operationalLimitSetID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class ControlAreaGeneratingUnit : mspCIMObject {
        
        /// <remarks/>
        public string controlAreaID;
        
        /// <remarks/>
        public string generatingUnitID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class ControlArea : mspCIMObject {
        
        /// <remarks/>
        public activePower netInterchange;
        
        /// <remarks/>
        public ControlAreaTieFlow tieFlow;
        
        /// <remarks/>
        public ControlAreaType type;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeSpecified;
        
        /// <remarks/>
        public string EnergyAreaID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="cpsm_V4.1_Release")]
    public partial class ControlAreaTieFlow {
        
        /// <remarks/>
        public bool positiveFlowIn;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool positiveFlowInSpecified;
        
        /// <remarks/>
        public string terminalID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="cpsm_V4.1_Release")]
    public enum ControlAreaType {
        
        /// <remarks/>
        AGC,
        
        /// <remarks/>
        Forecast,
        
        /// <remarks/>
        Interchange,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class NonConformLoadGroup : mspCIMObject {
        
        /// <remarks/>
        public string subLoadAreaID;
        
        /// <remarks/>
        public NonConformLoadSchedule nonConformLoadSchedule;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class NonConformLoadSchedule : SeasonDayTypeSchedule {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NonConformLoadSchedule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ConformLoadSchedule))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class SeasonDayTypeSchedule : RegularIntervalSchedule {
        
        /// <remarks/>
        public DayType dayType;
        
        /// <remarks/>
        public Season seasonType;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class DayType : mspCIMObject {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class Season {
        
        /// <remarks/>
        public SeasonName name;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nameSpecified;
        
        /// <remarks/>
        public System.DateTime endDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool endDateSpecified;
        
        /// <remarks/>
        public System.DateTime startDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startDateSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public enum SeasonName {
        
        /// <remarks/>
        winter,
        
        /// <remarks/>
        spring,
        
        /// <remarks/>
        summer,
        
        /// <remarks/>
        fall,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LoadCurve))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RegulationSchedule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeasonDayTypeSchedule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NonConformLoadSchedule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ConformLoadSchedule))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class RegularIntervalSchedule : BasicIntervalSchedule {
        
        /// <remarks/>
        public Seconds timeStep;
        
        /// <remarks/>
        public System.DateTime endTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool endTimeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("timePoint", IsNullable=false)]
        public RegularTimePoint[] timePoints;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class Seconds {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public UnitSymbol unit;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public UnitMultiplier multiplier;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool multiplierSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public enum UnitSymbol {
        
        /// <remarks/>
        VA,
        
        /// <remarks/>
        W,
        
        /// <remarks/>
        VAr,
        
        /// <remarks/>
        VAh,
        
        /// <remarks/>
        Wh,
        
        /// <remarks/>
        VArh,
        
        /// <remarks/>
        V,
        
        /// <remarks/>
        ohm,
        
        /// <remarks/>
        A,
        
        /// <remarks/>
        F,
        
        /// <remarks/>
        H,
        
        /// <remarks/>
        C,
        
        /// <remarks/>
        s,
        
        /// <remarks/>
        min,
        
        /// <remarks/>
        h,
        
        /// <remarks/>
        deg,
        
        /// <remarks/>
        rad,
        
        /// <remarks/>
        J,
        
        /// <remarks/>
        N,
        
        /// <remarks/>
        S,
        
        /// <remarks/>
        none,
        
        /// <remarks/>
        Hz,
        
        /// <remarks/>
        kg,
        
        /// <remarks/>
        Pa,
        
        /// <remarks/>
        m,
        
        /// <remarks/>
        m2,
        
        /// <remarks/>
        m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("V/VAr")]
        VVAr,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/Hz")]
        WHz,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/s")]
        Js,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s-1")]
        s1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/J")]
        kgJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/s")]
        Ws,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public enum UnitMultiplier {
        
        /// <remarks/>
        p,
        
        /// <remarks/>
        n,
        
        /// <remarks/>
        micro,
        
        /// <remarks/>
        m,
        
        /// <remarks/>
        c,
        
        /// <remarks/>
        d,
        
        /// <remarks/>
        k,
        
        /// <remarks/>
        M,
        
        /// <remarks/>
        G,
        
        /// <remarks/>
        T,
        
        /// <remarks/>
        none,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class RegularTimePoint {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string sequenceNumber;
        
        /// <remarks/>
        public float value1;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool value1Specified;
        
        /// <remarks/>
        public float value2;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool value2Specified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IrregularIntervalSchedule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RegularIntervalSchedule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LoadCurve))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RegulationSchedule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeasonDayTypeSchedule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NonConformLoadSchedule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ConformLoadSchedule))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class BasicIntervalSchedule : mspCIMObject {
        
        /// <remarks/>
        public System.DateTime startTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startTimeSpecified;
        
        /// <remarks/>
        public string value1Unit;
        
        /// <remarks/>
        public string value2Unit;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class IrregularIntervalSchedule : BasicIntervalSchedule {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public IrregularTimePoint[] TimePoints;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class IrregularTimePoint {
        
        /// <remarks/>
        public Seconds time;
        
        /// <remarks/>
        public float value1;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool value1Specified;
        
        /// <remarks/>
        public float value2;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool value2Specified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class LoadCurve : RegularIntervalSchedule {
        
        /// <remarks/>
        public string subLoadAreaID;
        
        /// <remarks/>
        public Season season;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class RegulationSchedule : RegularIntervalSchedule {
        
        /// <remarks/>
        public bool lineDropCompensation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lineDropCompensationSpecified;
        
        /// <remarks/>
        public resistance lineDropR;
        
        /// <remarks/>
        public reactance lineDropX;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class resistance {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public zUnit units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public enum zUnit {
        
        /// <remarks/>
        Ohms,
        
        /// <remarks/>
        Percent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Per Unit")]
        PerUnit,
        
        /// <remarks/>
        Total,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class reactance {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public zUnit units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class ConformLoadSchedule : SeasonDayTypeSchedule {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class ConformLoadGroup : mspCIMObject {
        
        /// <remarks/>
        public string subLoadAreaID;
        
        /// <remarks/>
        public ConformLoadSchedule conformLoadSchedule;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class SubLoadArea : mspCIMObject {
        
        /// <remarks/>
        public string loadAreaID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class MeasurementValueSource : mspCIMObject {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class MeasurementType : mspCIMObject {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class StringMeasurement : mspCIMObject {
        
        /// <remarks/>
        public StringMeasurementValue stringMeasurementValue;
        
        /// <remarks/>
        public string measurementTypeID;
        
        /// <remarks/>
        public string measurementValueSourceID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class StringMeasurementValue : MeasurementValue {
        
        /// <remarks/>
        public string value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class Accumulator : mspCIMObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        public string maxValue;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public AccumulatorValue[] accumulatorValues;
        
        /// <remarks/>
        public uom1 units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        public string unitID;
        
        /// <remarks/>
        public qualityDescription quality;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool qualitySpecified;
        
        /// <remarks/>
        public AccumulatorTimeSpan timeSpan;
        
        /// <remarks/>
        public phaseCode1 phase;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string harmonic;
        
        /// <remarks/>
        public accountability quadrant;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool quadrantSpecified;
        
        /// <remarks/>
        public string measurementTypeID;
        
        /// <remarks/>
        public string terminalID;
        
        /// <remarks/>
        public objectRef1 powerSystemResourceID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class AccumulatorValue : MeasurementValue {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        public string value;
        
        /// <remarks/>
        public string measurementValueSourceID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="uom", Namespace="cpsm_V4.1_Release")]
    public enum uom1 {
        
        /// <remarks/>
        Wh,
        
        /// <remarks/>
        W,
        
        /// <remarks/>
        kWh,
        
        /// <remarks/>
        kW,
        
        /// <remarks/>
        MWh,
        
        /// <remarks/>
        MW,
        
        /// <remarks/>
        GWh,
        
        /// <remarks/>
        GW,
        
        /// <remarks/>
        mWh,
        
        /// <remarks/>
        mW,
        
        /// <remarks/>
        microWh,
        
        /// <remarks/>
        microW,
        
        /// <remarks/>
        VARh,
        
        /// <remarks/>
        VAR,
        
        /// <remarks/>
        kVARh,
        
        /// <remarks/>
        kVAR,
        
        /// <remarks/>
        MVARh,
        
        /// <remarks/>
        MVAR,
        
        /// <remarks/>
        GVARh,
        
        /// <remarks/>
        GVAR,
        
        /// <remarks/>
        mVARh,
        
        /// <remarks/>
        mVAR,
        
        /// <remarks/>
        microVARh,
        
        /// <remarks/>
        microVAR,
        
        /// <remarks/>
        VAh,
        
        /// <remarks/>
        VA,
        
        /// <remarks/>
        kVAh,
        
        /// <remarks/>
        kVA,
        
        /// <remarks/>
        MVAh,
        
        /// <remarks/>
        MVA,
        
        /// <remarks/>
        GVAh,
        
        /// <remarks/>
        GVA,
        
        /// <remarks/>
        mVAh,
        
        /// <remarks/>
        mVA,
        
        /// <remarks/>
        microVAh,
        
        /// <remarks/>
        microVA,
        
        /// <remarks/>
        Qh,
        
        /// <remarks/>
        Q,
        
        /// <remarks/>
        kQh,
        
        /// <remarks/>
        kQ,
        
        /// <remarks/>
        MQh,
        
        /// <remarks/>
        MQ,
        
        /// <remarks/>
        GQh,
        
        /// <remarks/>
        GQ,
        
        /// <remarks/>
        mQh,
        
        /// <remarks/>
        mQ,
        
        /// <remarks/>
        microQh,
        
        /// <remarks/>
        microQ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("V RMS")]
        VRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kV RMS")]
        kVRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MV RMS")]
        MVRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mV RMS")]
        mVRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("microV RMS")]
        microVRMS,
        
        /// <remarks/>
        V,
        
        /// <remarks/>
        kV,
        
        /// <remarks/>
        MV,
        
        /// <remarks/>
        mV,
        
        /// <remarks/>
        microV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Vsquared RMS")]
        VsquaredRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kVsquared RMS")]
        kVsquaredRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MVsquared RMS")]
        MVsquaredRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mVsquared RMS")]
        mVsquaredRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("microVsquared RMS")]
        microVsquaredRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Amps RMS")]
        AmpsRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kAmps RMS")]
        kAmpsRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mamps RMS")]
        MampsRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mAmps RMS")]
        mAmpsRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("microAmps RMS")]
        microAmpsRMS,
        
        /// <remarks/>
        Amps,
        
        /// <remarks/>
        kAmps,
        
        /// <remarks/>
        Mamps,
        
        /// <remarks/>
        mAmps,
        
        /// <remarks/>
        microAmps,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Amps squared RMS")]
        AmpssquaredRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kAmps squared RMS")]
        kAmpssquaredRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mamps squared RMS")]
        MampssquaredRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mAmps squared RMS")]
        mAmpssquaredRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("microAmps squared RMS")]
        microAmpssquaredRMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("T.H.D. Voltage")]
        THDVoltage,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("T.H.D. Current")]
        THDCurrent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Voltage phase angle")]
        Voltagephaseangle,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Current phase angle")]
        Currentphaseangle,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Power factor")]
        Powerfactor,
        
        /// <remarks/>
        Time,
        
        /// <remarks/>
        Date,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Date time")]
        Datetime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Interval timer")]
        Intervaltimer,
        
        /// <remarks/>
        Frequency,
        
        /// <remarks/>
        Counter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Sense input")]
        Senseinput,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of pulse")]
        Nbrofpulse,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of sag")]
        Nbrofsag,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of swells")]
        Nbrofswells,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of power outage")]
        Nbrofpoweroutage,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of excursion low")]
        Nbrofexcursionlow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of excursion high")]
        Nbrofexcursionhigh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Normal voltage period")]
        Normalvoltageperiod,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of voltage unbalance")]
        Nbrofvoltageunbalance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of V T.H.D. excess")]
        NbrofVTHDexcess,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of amps T.H.D. excess")]
        NbrofampsTHDexcess,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of demand resets")]
        Nbrofdemandresets,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of times programmed")]
        Nbroftimesprogrammed,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Minutes on battery")]
        Minutesonbattery,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of inversion")]
        Nbrofinversion,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of removal")]
        Nbrofremoval,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of reprogramming")]
        Nbrofreprogramming,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of power loss")]
        Nbrofpowerloss,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of reverse rotation")]
        Nbrofreverserotation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of physical tamper")]
        Nbrofphysicaltamper,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of encoder tamper")]
        Nbrofencodertamper,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Nbr of watchdog")]
        Nbrofwatchdog,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic meters uncorrected")]
        cubicmetersuncorrected,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic meters per Hr uncorrected")]
        cubicmetersperHruncorrected,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic meters corrected")]
        cubicmeterscorrected,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic meters per Hr corrected")]
        cubicmetersperHrcorrected,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic feet uncorrected")]
        cubicfeetuncorrected,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic feet per Hr uncorrected")]
        cubicfeetperHruncorrected,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic feet corrected")]
        cubicfeetcorrected,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic feet per Hr corrected")]
        cubicfeetperHrcorrected,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deg C")]
        degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deg F")]
        degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deg K")]
        degK,
        
        /// <remarks/>
        Joules,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Joules per Hr")]
        JoulesperHr,
        
        /// <remarks/>
        kJoules,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJoules per Hr")]
        kJoulesperHr,
        
        /// <remarks/>
        MJoules,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJoules per Hr")]
        MJoulesperHr,
        
        /// <remarks/>
        mJoules,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mJoules per Hr")]
        mJoulesperHr,
        
        /// <remarks/>
        microJoules,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("microJoules per Hr")]
        microJoulesperHr,
        
        /// <remarks/>
        Therm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Therm per Hr")]
        ThermperHr,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Static pascal")]
        Staticpascal,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Differential pascal")]
        Differentialpascal,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Static pound per square inch")]
        Staticpoundpersquareinch,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Differential pound per square inch")]
        Differentialpoundpersquareinch,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Gram square cm")]
        Gramsquarecm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Meter HG column")]
        MeterHGcolumn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Inches HG column")]
        InchesHGcolumn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Inches H2O column")]
        InchesH2Ocolumn,
        
        /// <remarks/>
        Bar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("percent relative humidity")]
        percentrelativehumidity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("PPM odorant")]
        PPModorant,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic meter")]
        cubicmeter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic meter per Hr")]
        cubicmeterperHr,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic feet")]
        cubicfeet,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cubic feet per Hr")]
        cubicfeetperHr,
        
        /// <remarks/>
        ccf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ccf per Hr")]
        ccfperHr,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("US gl")]
        USgl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("US gl per Hr")]
        USglperHr,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("IMP gl")]
        IMPgl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("IMP gl per Hr")]
        IMPglperHr,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Acre ft")]
        Acreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("PPM lead")]
        PPMlead,
        
        /// <remarks/>
        turbidity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("PPM chlorine")]
        PPMchlorine,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("PH factor")]
        PHfactor,
        
        /// <remarks/>
        Corrosion,
        
        /// <remarks/>
        Ionization,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("PPM SO2")]
        PPMSO2,
        
        /// <remarks/>
        liters,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pounds per square foot")]
        poundspersquarefoot,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inches of water")]
        inchesofwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft of water")]
        ftofwater,
        
        /// <remarks/>
        atmospheres,
        
        /// <remarks/>
        Dollar,
        
        /// <remarks/>
        inches,
        
        /// <remarks/>
        ft,
        
        /// <remarks/>
        m,
        
        /// <remarks/>
        dm,
        
        /// <remarks/>
        km,
        
        /// <remarks/>
        cm,
        
        /// <remarks/>
        mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("micro m")]
        microm,
        
        /// <remarks/>
        mph,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("feet per second")]
        feetpersecond,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km per hour")]
        kmperhour,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km per second")]
        kmpersecond,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m per second")]
        mpersecond,
        
        /// <remarks/>
        percent,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public enum qualityDescription {
        
        /// <remarks/>
        Measured,
        
        /// <remarks/>
        Default,
        
        /// <remarks/>
        Estimated,
        
        /// <remarks/>
        Calculated,
        
        /// <remarks/>
        Initial,
        
        /// <remarks/>
        Last,
        
        /// <remarks/>
        Failed,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="cpsm_V4.1_Release")]
    public partial class AccumulatorTimeSpan {
        
        /// <remarks/>
        public System.DateTime startTime;
        
        /// <remarks/>
        public System.DateTime stopTime;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="phaseCode", Namespace="cpsm_V4.1_Release")]
    public enum phaseCode1 {
        
        /// <remarks/>
        A,
        
        /// <remarks/>
        B,
        
        /// <remarks/>
        C,
        
        /// <remarks/>
        N,
        
        /// <remarks/>
        AB,
        
        /// <remarks/>
        AC,
        
        /// <remarks/>
        BC,
        
        /// <remarks/>
        ABC,
        
        /// <remarks/>
        AN,
        
        /// <remarks/>
        BN,
        
        /// <remarks/>
        CN,
        
        /// <remarks/>
        ABN,
        
        /// <remarks/>
        ACN,
        
        /// <remarks/>
        BCN,
        
        /// <remarks/>
        ABCN,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public enum accountability {
        
        /// <remarks/>
        Q1,
        
        /// <remarks/>
        Q2,
        
        /// <remarks/>
        Q3,
        
        /// <remarks/>
        Q4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-2")]
        Q12,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-3")]
        Q13,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-4")]
        Q14,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q2-3")]
        Q23,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q2-4")]
        Q24,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q3-4")]
        Q34,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-2-3")]
        Q123,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-2-4")]
        Q124,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-3-4")]
        Q134,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q2-3-4")]
        Q234,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-2-3-4")]
        Q1234,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-2-netFlow")]
        Q12netFlow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-3-netFlow")]
        Q13netFlow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-4-netFlow")]
        Q14netFlow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q2-3-netFlow")]
        Q23netFlow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q2-4-netFlow")]
        Q24netFlow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q3-4-netFlow")]
        Q34netFlow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-2-3-netFlow")]
        Q123netFlow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-2-4-netFlow")]
        Q124netFlow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-3-4-netFlow")]
        Q134netFlow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q2-3-4-netFlow")]
        Q234netFlow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-2-3-4-netFlow")]
        Q1234netFlow,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="objectRef", Namespace="cpsm_V4.1_Release")]
    public partial class objectRef1 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.Xml.XmlQualifiedName noun;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string objectID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string utility;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class Discrete : mspCIMObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string maxValue;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string minValue;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string normalValue;
        
        /// <remarks/>
        public DiscreteValue discreteValue;
        
        /// <remarks/>
        public uom1 units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        public string unitID;
        
        /// <remarks/>
        public qualityDescription quality;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool qualitySpecified;
        
        /// <remarks/>
        public phaseCode1 phase;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseSpecified;
        
        /// <remarks/>
        public unitPrefix unitPrefix;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitPrefixSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string harmonic;
        
        /// <remarks/>
        public accountability quadrant;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool quadrantSpecified;
        
        /// <remarks/>
        public string measurementTypeID;
        
        /// <remarks/>
        public string terminalID;
        
        /// <remarks/>
        public objectRef1 powerSystemResourceID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class DiscreteValue : MeasurementValue {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string value;
        
        /// <remarks/>
        public string measurementValueSourceID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public enum unitPrefix {
        
        /// <remarks/>
        Maximum,
        
        /// <remarks/>
        Minimum,
        
        /// <remarks/>
        Average,
        
        /// <remarks/>
        Instantaneous,
        
        /// <remarks/>
        Cumulative,
        
        /// <remarks/>
        Quantity,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class ConnectivityNode : mspCIMObject {
        
        /// <remarks/>
        public string voltageLevelID;
        
        /// <remarks/>
        public string subControlAreaID;
        
        /// <remarks/>
        public string nominalVoltage;
        
        /// <remarks/>
        public string substationID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("measurementID", IsNullable=false)]
        public string[] measurementList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class Unit : mspCIMObject {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class BaseVoltage : mspCIMObject {
        
        /// <remarks/>
        public voltage1 nominalVoltage;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="voltage", Namespace="cpsm_V4.1_Release")]
    public partial class voltage1 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public voltageUnits1 units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="voltageUnits", Namespace="cpsm_V4.1_Release")]
    public enum voltageUnits1 {
        
        /// <remarks/>
        V,
        
        /// <remarks/>
        kV,
        
        /// <remarks/>
        MV,
        
        /// <remarks/>
        mV,
        
        /// <remarks/>
        microV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Per Unit")]
        PerUnit,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LoadArea))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public abstract partial class PowerSystemResource : mspCIMObject {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class LoadArea : PowerSystemResource {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Line))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VoltageLevel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bay))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public abstract partial class EquipmentContainer : mspCIMObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("contentsItem", IsNullable=false)]
        public objectRef1[] contentsList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public NodeFields[] connectivityNodes;
        
        /// <remarks/>
        public ConnectivitySections connectivitySections;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class NodeFields {
        
        /// <remarks/>
        public nodeIdentifier1 connectivityNodeID;
        
        /// <remarks/>
        public string substationID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("measurementID", IsNullable=false)]
        public string[] measurements;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="nodeIdentifier", Namespace="cpsm_V4.1_Release")]
    public partial class nodeIdentifier1 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string objectID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class ConnectivitySections {
        
        /// <remarks/>
        public string sectionID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("parentSectionID")]
        public objectRef1[] parentSectionID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class Line : EquipmentContainer {
        
        /// <remarks/>
        public string regionID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class VoltageLevel : EquipmentContainer {
        
        /// <remarks/>
        public string baseVoltageID;
        
        /// <remarks/>
        public voltage1 highVoltageLimit;
        
        /// <remarks/>
        public voltage1 lowVoltageLimit;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class Bay : EquipmentContainer {
        
        /// <remarks/>
        public string voltageLevelID;
        
        /// <remarks/>
        public BreakerConfiguration breakerConfiguration;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool breakerConfigurationSpecified;
        
        /// <remarks/>
        public BusbarConfiguration busbarConfiguration;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool busbarConfigurationSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public enum BreakerConfiguration {
        
        /// <remarks/>
        singleBreaker,
        
        /// <remarks/>
        breakerAndAHalf,
        
        /// <remarks/>
        doubleBreaker,
        
        /// <remarks/>
        noBreaker,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public enum BusbarConfiguration {
        
        /// <remarks/>
        singleBus,
        
        /// <remarks/>
        doubleBus,
        
        /// <remarks/>
        mainWithTransfer,
        
        /// <remarks/>
        ringBus,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class EquivalentNetwork : mspCIMObject {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class SubGeographicalRegion : mspCIMObject {
        
        /// <remarks/>
        public string geographicalRegionID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class GeographicalRegion : mspCIMObject {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ReactiveCapabilityCurve))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GrossToNetActivePowerCurve))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class Curve : mspCIMObject {
        
        /// <remarks/>
        public CurveStyle curveStyle;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool curveStyleSpecified;
        
        /// <remarks/>
        public string xUnit;
        
        /// <remarks/>
        public string y1Unit;
        
        /// <remarks/>
        public string y2Unit;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("curveData", IsNullable=false)]
        public CurveData[] dataPoints;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public enum CurveStyle {
        
        /// <remarks/>
        constantYValue,
        
        /// <remarks/>
        straightLineYValues,
        
        /// <remarks/>
        rampYValues,
        
        /// <remarks/>
        formula,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class CurveData {
        
        /// <remarks/>
        public float xvalue;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool xvalueSpecified;
        
        /// <remarks/>
        public float y1value;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool y1valueSpecified;
        
        /// <remarks/>
        public float y2value;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool y2valueSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class ReactiveCapabilityCurve : Curve {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class GrossToNetActivePowerCurve : Curve {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class RegulatingControl : mspCIMObject {
        
        /// <remarks/>
        public string terminalID;
        
        /// <remarks/>
        public RegulationSchedule regulationSchedule;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Connector))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BusbarSection))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeneratingUnit))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HydroGeneratingUnit))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ThermalGeneratingUnit))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Terminal))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RegulatingCondEq))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StaticVarCompensator))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EquivalentEquipment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EquivalentShunt))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EquivalentBranch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TapChanger))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransformerWinding))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public abstract partial class ConductingEquipment : mspCIMObject {
        
        /// <remarks/>
        public PointType GMLLocation;
        
        /// <remarks/>
        public LineStringType GMLLine;
        
        /// <remarks/>
        public ConnectivitySections connectivitySections;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public NodeFields[] connectivityNodes;
        
        /// <remarks/>
        public phaseCode1 phaseCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseCodeSpecified;
        
        /// <remarks/>
        public bool normallyInService;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool normallyInServiceSpecified;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GMLLocation))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="gml_V4.1_Release")]
    public partial class PointType : AbstractGeometryType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("coord", typeof(CoordType))]
        [System.Xml.Serialization.XmlElementAttribute("coordinates", typeof(CoordinatesType))]
        public object Item;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="gml_V4.1_Release")]
    public partial class CoordType {
        
        /// <remarks/>
        public decimal X;
        
        /// <remarks/>
        public decimal Y;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool YSpecified;
        
        /// <remarks/>
        public decimal Z;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ZSpecified;
        
        /// <remarks/>
        public float Bulge;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BulgeSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="gml_V4.1_Release")]
    public partial class CoordinatesType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(".")]
        public string @decimal;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(",")]
        public string cs;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(" ")]
        public string ts;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
        
        public CoordinatesType() {
            this.@decimal = ".";
            this.cs = ",";
            this.ts = " ";
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BoxType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LineStringType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GMLLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LinearRingType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PolygonType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GMLPolygon))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeometryCollectionBaseType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeometryCollectionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MultiPointType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MultiLineStringType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MultiPolygonType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PointType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GMLLocation))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="gml_V4.1_Release")]
    public abstract partial class AbstractGeometryType {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="gml_V4.1_Release")]
    public partial class BoxType : AbstractGeometryType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("coord", typeof(CoordType))]
        [System.Xml.Serialization.XmlElementAttribute("coordinates", typeof(CoordinatesType))]
        public object[] Items;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GMLLine))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="gml_V4.1_Release")]
    public partial class LineStringType : AbstractGeometryType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("coord", typeof(CoordType))]
        [System.Xml.Serialization.XmlElementAttribute("coordinates", typeof(CoordinatesType))]
        public object[] Items;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class GMLLine : LineStringType {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="gml_V4.1_Release")]
    public partial class LinearRingType : AbstractGeometryType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("coord", typeof(CoordType))]
        [System.Xml.Serialization.XmlElementAttribute("coordinates", typeof(CoordinatesType))]
        public object[] Items;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GMLPolygon))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="gml_V4.1_Release")]
    public partial class PolygonType : AbstractGeometryType {
        
        /// <remarks/>
        public LinearRingType outerBoundaryIs;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("innerBoundaryIs")]
        public LinearRingType[] innerBoundaryIs;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class GMLPolygon : PolygonType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeometryCollectionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MultiPointType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MultiLineStringType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MultiPolygonType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="gml_V4.1_Release")]
    public abstract partial class AbstractGeometryCollectionBaseType : AbstractGeometryType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MultiPointType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MultiLineStringType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MultiPolygonType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="gml_V4.1_Release")]
    public partial class GeometryCollectionType : AbstractGeometryCollectionBaseType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("geometryMember", typeof(GeometryAssociationType))]
        [System.Xml.Serialization.XmlElementAttribute("lineStringMember", typeof(LineStringMemberType))]
        [System.Xml.Serialization.XmlElementAttribute("pointMember", typeof(PointMemberType))]
        [System.Xml.Serialization.XmlElementAttribute("polygonMember", typeof(PolygonMemberType))]
        public GeometryAssociationType[] Items;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LinearRingMemberType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PolygonMemberType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PointMemberType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LineStringMemberType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="gml_V4.1_Release")]
    public partial class GeometryAssociationType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("LineString", typeof(LineStringType))]
        [System.Xml.Serialization.XmlElementAttribute("LinearRing", typeof(LinearRingType))]
        [System.Xml.Serialization.XmlElementAttribute("MultiGeometry", typeof(GeometryCollectionType))]
        [System.Xml.Serialization.XmlElementAttribute("MultiLineString", typeof(MultiLineStringType))]
        [System.Xml.Serialization.XmlElementAttribute("MultiPoint", typeof(MultiPointType))]
        [System.Xml.Serialization.XmlElementAttribute("MultiPolygon", typeof(MultiPolygonType))]
        [System.Xml.Serialization.XmlElementAttribute("Point", typeof(PointType))]
        [System.Xml.Serialization.XmlElementAttribute("Polygon", typeof(PolygonType))]
        public AbstractGeometryType Item;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.w3.org/1999/xlink")]
        public string type;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.w3.org/1999/xlink", DataType="anyURI")]
        public string href;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.w3.org/1999/xlink", DataType="anyURI")]
        public string role;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.w3.org/1999/xlink", DataType="anyURI")]
        public string arcrole;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.w3.org/1999/xlink")]
        public string title;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.w3.org/1999/xlink")]
        public GeometryAssociationTypeShow show;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool showSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.w3.org/1999/xlink")]
        public GeometryAssociationTypeActuate actuate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool actuateSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, DataType="anyURI")]
        public string remoteSchema;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="gml_V4.1_Release")]
    public partial class MultiLineStringType : GeometryCollectionType {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="gml_V4.1_Release")]
    public partial class MultiPointType : GeometryCollectionType {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="gml_V4.1_Release")]
    public partial class MultiPolygonType : GeometryCollectionType {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.w3.org/1999/xlink")]
    public enum GeometryAssociationTypeShow {
        
        /// <remarks/>
        @new,
        
        /// <remarks/>
        replace,
        
        /// <remarks/>
        embed,
        
        /// <remarks/>
        other,
        
        /// <remarks/>
        none,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.w3.org/1999/xlink")]
    public enum GeometryAssociationTypeActuate {
        
        /// <remarks/>
        onLoad,
        
        /// <remarks/>
        onRequest,
        
        /// <remarks/>
        other,
        
        /// <remarks/>
        none,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="gml_V4.1_Release")]
    public partial class LinearRingMemberType : GeometryAssociationType {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="gml_V4.1_Release")]
    public partial class PolygonMemberType : GeometryAssociationType {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="gml_V4.1_Release")]
    public partial class PointMemberType : GeometryAssociationType {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="gml_V4.1_Release")]
    public partial class LineStringMemberType : GeometryAssociationType {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class GMLLocation : PointType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BusbarSection))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class Connector : ConductingEquipment {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class BusbarSection : Connector {
        
        /// <remarks/>
        public string busbarType;
        
        /// <remarks/>
        public objectRef1 eqipmentContainerID;
        
        /// <remarks/>
        public string bayID;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HydroGeneratingUnit))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ThermalGeneratingUnit))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class GeneratingUnit : ConductingEquipment {
        
        /// <remarks/>
        public objectRef1 equipmentContainerID;
        
        /// <remarks/>
        public GrossToNetActivePowerCurve GrossToNetActivePowerCurve;
        
        /// <remarks/>
        public ReactiveCapabilityCurve ReactiveCapabilityCurve;
        
        /// <remarks/>
        public float efficiency;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool efficiencySpecified;
        
        /// <remarks/>
        public activePower initialP;
        
        /// <remarks/>
        public float longPF;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool longPFSpecified;
        
        /// <remarks/>
        public activePower maxOperatingP;
        
        /// <remarks/>
        public activePower minOperatingP;
        
        /// <remarks/>
        public float normalPF;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool normalPFSpecified;
        
        /// <remarks/>
        public GeneratorControlSource genControlSource;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool genControlSourceSpecified;
        
        /// <remarks/>
        public activePower ratedGrossMaxP;
        
        /// <remarks/>
        public activePower ratedGrossMinP;
        
        /// <remarks/>
        public activePower ratedNetMaxP;
        
        /// <remarks/>
        public float shortPF;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool shortPFSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public enum GeneratorControlSource {
        
        /// <remarks/>
        Unavailable,
        
        /// <remarks/>
        offAGC,
        
        /// <remarks/>
        onAGC,
        
        /// <remarks/>
        PlantControl,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class HydroGeneratingUnit : GeneratingUnit {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class ThermalGeneratingUnit : GeneratingUnit {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class Terminal : ConductingEquipment {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("measurementID", IsNullable=false)]
        public string[] measurements;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StaticVarCompensator))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public abstract partial class RegulatingCondEq : ConductingEquipment {
        
        /// <remarks/>
        public objectRef1 equipmentContainerID;
        
        /// <remarks/>
        public string regulatingControlID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class StaticVarCompensator : RegulatingCondEq {
        
        /// <remarks/>
        public reactivePower1 capacitiveRating;
        
        /// <remarks/>
        public reactivePower1 inductiveRating;
        
        /// <remarks/>
        public StaticVarCompensatorSVCControlMode sVCControlMode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool sVCControlModeSpecified;
        
        /// <remarks/>
        public StaticVarCompensatorSlope slope;
        
        /// <remarks/>
        public voltage1 voltageSetPoint;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="reactivePower", Namespace="cpsm_V4.1_Release")]
    public partial class reactivePower1 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public reactivePowerUnits1 units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="reactivePowerUnits", Namespace="cpsm_V4.1_Release")]
    public enum reactivePowerUnits1 {
        
        /// <remarks/>
        mVAr,
        
        /// <remarks/>
        VAr,
        
        /// <remarks/>
        kVAr,
        
        /// <remarks/>
        MVAr,
        
        /// <remarks/>
        GVAr,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Per Unit")]
        PerUnit,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="cpsm_V4.1_Release")]
    public enum StaticVarCompensatorSVCControlMode {
        
        /// <remarks/>
        ReactivePower,
        
        /// <remarks/>
        Voltage,
        
        /// <remarks/>
        Off,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="cpsm_V4.1_Release")]
    public partial class StaticVarCompensatorSlope {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public StaticVarCompensatorSlopeUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="cpsm_V4.1_Release")]
    public enum StaticVarCompensatorSlopeUnits {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kV/MVAr")]
        kVMVAr,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EquivalentShunt))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EquivalentBranch))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public abstract partial class EquivalentEquipment : ConductingEquipment {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class EquivalentShunt : EquivalentEquipment {
        
        /// <remarks/>
        public conductance g;
        
        /// <remarks/>
        public susceptance b;
        
        /// <remarks/>
        public string equivalentNetworkID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class conductance {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public sUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public enum sUnits {
        
        /// <remarks/>
        microS,
        
        /// <remarks/>
        mS,
        
        /// <remarks/>
        S,
        
        /// <remarks/>
        kS,
        
        /// <remarks/>
        MS,
        
        /// <remarks/>
        Siemens,
        
        /// <remarks/>
        mho,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class susceptance {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public sUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class EquivalentBranch : EquivalentEquipment {
        
        /// <remarks/>
        public resistance r;
        
        /// <remarks/>
        public reactance x;
        
        /// <remarks/>
        public string equivalentNetworkID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class TapChanger : ConductingEquipment {
        
        /// <remarks/>
        public RegulatingControl regulatingControl;
        
        /// <remarks/>
        public voltage1 voltageBandwidth;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string numberOfSteps;
        
        /// <remarks/>
        public double ptRatio;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ptRatioSpecified;
        
        /// <remarks/>
        public current1 ctRating;
        
        /// <remarks/>
        public current1 ampacity;
        
        /// <remarks/>
        public Seconds initialDelay;
        
        /// <remarks/>
        public Seconds subsequentDelay;
        
        /// <remarks/>
        public TapChangerNativeAttributes nativeAttributes;
        
        /// <remarks/>
        public string terminalID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="current", Namespace="cpsm_V4.1_Release")]
    public partial class current1 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public currentUnits1 units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="currentUnits", Namespace="cpsm_V4.1_Release")]
    public enum currentUnits1 {
        
        /// <remarks/>
        A,
        
        /// <remarks/>
        mA,
        
        /// <remarks/>
        kA,
        
        /// <remarks/>
        MA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Per Unit")]
        PerUnit,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class TapChangerNativeAttributes {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string highStep;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string lowStep;
        
        /// <remarks/>
        public voltage1 neutralU;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string neutralStep;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string normalStep;
        
        /// <remarks/>
        public angle stepPhaseShiftIncrement;
        
        /// <remarks/>
        public PerCent stepVoltageIncrement;
        
        /// <remarks/>
        public TapChangerKind type;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeSpecified;
        
        /// <remarks/>
        public TransformerControlMode tculControlMode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool tculControlModeSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class angle {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public angleUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public enum angleUnits {
        
        /// <remarks/>
        Degrees,
        
        /// <remarks/>
        Minutes,
        
        /// <remarks/>
        Seconds,
        
        /// <remarks/>
        Radians,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public enum TapChangerKind {
        
        /// <remarks/>
        @fixed,
        
        /// <remarks/>
        voltageControl,
        
        /// <remarks/>
        phaseControl,
        
        /// <remarks/>
        voltageAndPhaseControl,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public enum TransformerControlMode {
        
        /// <remarks/>
        off,
        
        /// <remarks/>
        local,
        
        /// <remarks/>
        volt,
        
        /// <remarks/>
        active,
        
        /// <remarks/>
        reactive,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class TransformerWinding : ConductingEquipment {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public TapChanger[] tapChangers;
        
        /// <remarks/>
        public string baseVoltageID;
        
        /// <remarks/>
        public WindingNativeAttributes windingNativeAttributes;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("terminalID", IsNullable=false)]
        public string[] terminalList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class WindingNativeAttributes {
        
        /// <remarks/>
        public voltage1 ratedU;
        
        /// <remarks/>
        public apparentPower ratedS;
        
        /// <remarks/>
        public WindingType windingType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool windingTypeSpecified;
        
        /// <remarks/>
        public susceptance b;
        
        /// <remarks/>
        public resistance r;
        
        /// <remarks/>
        public reactance x;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public partial class apparentPower {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public apparentPowerUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public enum apparentPowerUnits {
        
        /// <remarks/>
        VA,
        
        /// <remarks/>
        kVA,
        
        /// <remarks/>
        MVA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Per Unit")]
        PerUnit,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public enum WindingType {
        
        /// <remarks/>
        Primary,
        
        /// <remarks/>
        Secondary,
        
        /// <remarks/>
        Tertiary,
        
        /// <remarks/>
        Quaternary,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eaLoc))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class objectRef {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.Xml.XmlQualifiedName noun;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string objectID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string utility;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class eaLoc : objectRef {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class controlItem {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string numberOfItems;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string numberOfControlledItems;
        
        /// <remarks/>
        public string description;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class powerFactorManagementEvent : mspObject {
        
        /// <remarks/>
        public string switchID;
        
        /// <remarks/>
        public controlEventType controlEventType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool controlEventTypeSpecified;
        
        /// <remarks/>
        public string affectedRelay;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum controlEventType {
        
        /// <remarks/>
        Initiate,
        
        /// <remarks/>
        Restore,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class meters : mspObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public electricMeter[] electricMeters;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public waterMeter[] waterMeters;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public gasMeter[] gasMeters;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public propaneMeter[] propaneMeters;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public otherMeter[] otherMeters;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class electricMeter : mspMeter {
        
        /// <remarks/>
        public string meterBaseID;
        
        /// <remarks/>
        public electricNameplate electricNameplate;
        
        /// <remarks/>
        public electricLocationFields electricLocationFields;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("sealNumber", IsNullable=false)]
        public string[] sealNumberList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public meterID[] parentMeterList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public meterID[] subMeterList;
        
        /// <remarks/>
        public meterConnectionStatus meterConnectionStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool meterConnectionStatusSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public configuredReadingType[] configuredReadingTypes;
        
        /// <remarks/>
        public string meterCommAddress;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public billingStatusItem[] billingStatusInformation;
        
        /// <remarks/>
        public remoteReconnectSetting remoteReconnectSetting;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool remoteReconnectSettingSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class electricNameplate {
        
        /// <remarks/>
        public float kh;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool khSpecified;
        
        /// <remarks/>
        public float kr;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool krSpecified;
        
        /// <remarks/>
        public frequency frequency;
        
        /// <remarks/>
        public string numberOfElements;
        
        /// <remarks/>
        public baseType baseType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool baseTypeSpecified;
        
        /// <remarks/>
        public string accuracyClass;
        
        /// <remarks/>
        public string elementsVoltage;
        
        /// <remarks/>
        public string supplyVoltage;
        
        /// <remarks/>
        public float maxAmperage;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxAmperageSpecified;
        
        /// <remarks/>
        public float testAmperage;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool testAmperageSpecified;
        
        /// <remarks/>
        public float regRatio;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool regRatioSpecified;
        
        /// <remarks/>
        public long phases;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phasesSpecified;
        
        /// <remarks/>
        public long wires;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool wiresSpecified;
        
        /// <remarks/>
        public long dials;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dialsSpecified;
        
        /// <remarks/>
        public string form;
        
        /// <remarks/>
        public float multiplier;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool multiplierSpecified;
        
        /// <remarks/>
        public float demandMult;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool demandMultSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("readingType", IsNullable=false)]
        public string[] supportedReadingTypes;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class frequency {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public frequencyUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum frequencyUnits {
        
        /// <remarks/>
        Hz,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Cycles per second")]
        Cyclespersecond,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum baseType {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Base Type 1")]
        BaseType1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("S-base")]
        Sbase,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A-Base")]
        ABase,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("B-Base")]
        BBase,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K-Base")]
        KBase,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("P-Base")]
        PBase,
        
        /// <remarks/>
        IECBottomConnected,
        
        /// <remarks/>
        switchboard,
        
        /// <remarks/>
        rackmount,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class electricLocationFields {
        
        /// <remarks/>
        public string substationCode;
        
        /// <remarks/>
        public string substationName;
        
        /// <remarks/>
        public string feederCode;
        
        /// <remarks/>
        public string bus;
        
        /// <remarks/>
        public phaseCode phaseCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseCodeSpecified;
        
        /// <remarks/>
        public eaLoc eaLoc;
        
        /// <remarks/>
        public string transformerBankID;
        
        /// <remarks/>
        public string linemenServiceArea;
        
        /// <remarks/>
        public string poleNo;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum meterConnectionStatus {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Connected,
        
        /// <remarks/>
        Disconnected,
        
        /// <remarks/>
        DisconnectedNonPay,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class configuredReadingType {
        
        /// <remarks/>
        public extensions extensions;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public extensionsItem[] extensionsList;
        
        /// <remarks/>
        public uom units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        public string readingType;
        
        /// <remarks/>
        public string fieldName;
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public readingTypeCode readingTypeCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public TOUSchedule[] TOUSchedules;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class TOUSchedule : mspObject {
        
        /// <remarks/>
        public string TOUScheduleVersion;
        
        /// <remarks/>
        public effectiveDate effectiveDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public dayOfWeek[] daysOfWeek;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public exceptionDay[] exceptionDays;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class effectiveDate {
        
        /// <remarks/>
        public monthNumber effectiveMonth;
        
        /// <remarks/>
        public dayNumber effectiveDay;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum monthNumber {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Item6,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        Item7,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8")]
        Item8,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9")]
        Item9,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10")]
        Item10,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("11")]
        Item11,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("12")]
        Item12,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum dayNumber {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Item6,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        Item7,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8")]
        Item8,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9")]
        Item9,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10")]
        Item10,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("11")]
        Item11,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("12")]
        Item12,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("13")]
        Item13,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("14")]
        Item14,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("15")]
        Item15,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("16")]
        Item16,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("17")]
        Item17,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("18")]
        Item18,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("19")]
        Item19,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("20")]
        Item20,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("21")]
        Item21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("22")]
        Item22,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("23")]
        Item23,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("24")]
        Item24,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("25")]
        Item25,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("26")]
        Item26,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("27")]
        Item27,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("28")]
        Item28,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("29")]
        Item29,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("30")]
        Item30,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("31")]
        Item31,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class dayOfWeek {
        
        /// <remarks/>
        public dayLabel dayLabel;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public bin[] bins;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum dayLabel {
        
        /// <remarks/>
        M,
        
        /// <remarks/>
        T,
        
        /// <remarks/>
        W,
        
        /// <remarks/>
        Th,
        
        /// <remarks/>
        F,
        
        /// <remarks/>
        Sa,
        
        /// <remarks/>
        Su,
        
        /// <remarks/>
        Weekdays,
        
        /// <remarks/>
        WeekendDays,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class bin {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string binIndex;
        
        /// <remarks/>
        public string binName;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public timePeriod[] timePeriods;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class timePeriod {
        
        /// <remarks/>
        public System.DateTime startTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startTimeSpecified;
        
        /// <remarks/>
        public System.DateTime endTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool endTimeSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class exceptionDay {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        public System.DateTime date;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public bin[] bins;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class billingStatusItem {
        
        /// <remarks/>
        public string billingItemsType;
        
        /// <remarks/>
        public money accountsReceivable;
        
        /// <remarks/>
        public money accountsReceivableThisPeriod;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum remoteReconnectSetting {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Connect,
        
        /// <remarks/>
        Arm,
        
        /// <remarks/>
        PowerLimitation,
        
        /// <remarks/>
        CISAuthRequired,
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(receivedWaterMeter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(receivedPropaneMeter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(receivedGasMeter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(receivedElectricMeter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(testedElectricMeter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(propaneMeter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(gasMeter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(waterMeter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(otherMeter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(electricMeter))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public abstract partial class mspMeter : mspObject {
        
        /// <remarks/>
        public string meterNo;
        
        /// <remarks/>
        public System.DateTime installedDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool installedDateSpecified;
        
        /// <remarks/>
        public System.DateTime removedDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool removedDateSpecified;
        
        /// <remarks/>
        public string manufacturer;
        
        /// <remarks/>
        public string catalogNumber;
        
        /// <remarks/>
        public string serialNumber;
        
        /// <remarks/>
        public string metrologyFirmwareVersion;
        
        /// <remarks/>
        public string metrologyFirmwareRevision;
        
        /// <remarks/>
        public string meterType;
        
        /// <remarks/>
        public string AMRDeviceType;
        
        /// <remarks/>
        public string AMRVendor;
        
        /// <remarks/>
        public string billingCycle;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("meterStatus", IsNullable=false)]
        public string[] meterStatusList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public module[] moduleList;
        
        /// <remarks/>
        public utilityInfo utilityInfo;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class module : mspDevice {
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public string moduleType;
        
        /// <remarks/>
        public string firmwareVersion;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(module))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CDDevice))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public abstract partial class mspDevice : mspObject {
        
        /// <remarks/>
        public string deviceClass;
        
        /// <remarks/>
        public System.DateTime inServiceDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool inServiceDateSpecified;
        
        /// <remarks/>
        public System.DateTime outServiceDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool outServiceDateSpecified;
        
        /// <remarks/>
        public string facilityID;
        
        /// <remarks/>
        public string manufacturer;
        
        /// <remarks/>
        public string serialNumber;
        
        /// <remarks/>
        public assetFields assetFields;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class assetFields {
        
        /// <remarks/>
        public string manufacturer;
        
        /// <remarks/>
        public string serialNumber;
        
        /// <remarks/>
        public System.DateTime manufacturedDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool manufacturedDateSpecified;
        
        /// <remarks/>
        public money price;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class CDDevice : mspDevice {
        
        /// <remarks/>
        public string meterBaseID;
        
        /// <remarks/>
        public voltage ratedVoltage;
        
        /// <remarks/>
        public current ratedCurrent;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public module[] moduleList;
        
        /// <remarks/>
        public string AMRVendor;
        
        /// <remarks/>
        public string AMRDeviceType;
        
        /// <remarks/>
        public meterID meterID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class current {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public currentUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum currentUnits {
        
        /// <remarks/>
        A,
        
        /// <remarks/>
        mA,
        
        /// <remarks/>
        kA,
        
        /// <remarks/>
        MA,
        
        /// <remarks/>
        microA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Per Unit")]
        PerUnit,
        
        /// <remarks/>
        Percent,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class utilityInfo {
        
        /// <remarks/>
        public string owner;
        
        /// <remarks/>
        public string district;
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public serviceID serviceID;
        
        /// <remarks/>
        public string accountNumber;
        
        /// <remarks/>
        public string customerID;
        
        /// <remarks/>
        public GMLLocation GMLLocation;
        
        /// <remarks/>
        public gpsPoint gpsPoint;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class gpsPoint {
        
        /// <remarks/>
        public double latitude;
        
        /// <remarks/>
        public double longitude;
        
        /// <remarks/>
        public double altitude;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool altitudeSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class receivedWaterMeter : mspMeter {
        
        /// <remarks/>
        public waterNameplate waterNameplate;
        
        /// <remarks/>
        public System.DateTime manufacturedDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool manufacturedDateSpecified;
        
        /// <remarks/>
        public money purchasePrice;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class waterNameplate {
        
        /// <remarks/>
        public installType installType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool installTypeSpecified;
        
        /// <remarks/>
        public fluidType fluidType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool fluidTypeSpecified;
        
        /// <remarks/>
        public driveType driveType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool driveTypeSpecified;
        
        /// <remarks/>
        public pipeSize pipeSize;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pipeSizeSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum installType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum fluidType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Item6,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum driveType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Item6,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        Item7,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8")]
        Item8,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9")]
        Item9,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10")]
        Item10,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("11")]
        Item11,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("12")]
        Item12,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("13")]
        Item13,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum pipeSize {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Item6,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        Item7,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8")]
        Item8,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9")]
        Item9,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10")]
        Item10,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("11")]
        Item11,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("12")]
        Item12,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("13")]
        Item13,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("14")]
        Item14,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("15")]
        Item15,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("16")]
        Item16,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("17")]
        Item17,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("18")]
        Item18,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("19")]
        Item19,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("20")]
        Item20,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("21")]
        Item21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("22")]
        Item22,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("23")]
        Item23,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("24")]
        Item24,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("25")]
        Item25,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class receivedPropaneMeter : mspMeter {
        
        /// <remarks/>
        public propaneNameplate propaneNameplate;
        
        /// <remarks/>
        public System.DateTime manufacturedDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool manufacturedDateSpecified;
        
        /// <remarks/>
        public money purchasePrice;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class propaneNameplate : gasNameplate {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(propaneNameplate))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class gasNameplate {
        
        /// <remarks/>
        public mechanicalForm mechanicalForm;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mechanicalFormSpecified;
        
        /// <remarks/>
        public measurementSystem measurementSystem;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool measurementSystemSpecified;
        
        /// <remarks/>
        public gasPressure gasPressure;
        
        /// <remarks/>
        public gasFlow gasFlow;
        
        /// <remarks/>
        public gearDriveSize gearDriveSize;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool gearDriveSizeSpecified;
        
        /// <remarks/>
        public internalPipeDiameter internalPipeDiameter;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool internalPipeDiameterSpecified;
        
        /// <remarks/>
        public temperatureCompensationType temperatureCompensationType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool temperatureCompensationTypeSpecified;
        
        /// <remarks/>
        public pressureCompensationType pressureCompensationType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pressureCompensationTypeSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum mechanicalForm {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum measurementSystem {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class gasPressure {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public pressureUnits maxPressureUOM;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxPressureUOMSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum pressureUnits {
        
        /// <remarks/>
        Pascal,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Newton per square meter")]
        Newtonpersquaremeter,
        
        /// <remarks/>
        PSI,
        
        /// <remarks/>
        Bar,
        
        /// <remarks/>
        Barye,
        
        /// <remarks/>
        Atmosphere,
        
        /// <remarks/>
        Millibar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Inch of Hg")]
        InchofHg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Millimeter of Hg")]
        MillimeterofHg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Inch of water")]
        Inchofwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Millimeter of water")]
        Millimeterofwater,
        
        /// <remarks/>
        Kip,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pound-force")]
        Poundforce,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class gasFlow {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uom maxFlowRateUOM;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxFlowRateUOMSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum gearDriveSize {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Item6,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        Item7,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum internalPipeDiameter {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Item6,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        Item7,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8")]
        Item8,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9")]
        Item9,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10")]
        Item10,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("11")]
        Item11,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("12")]
        Item12,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("13")]
        Item13,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("14")]
        Item14,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("15")]
        Item15,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("16")]
        Item16,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("17")]
        Item17,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("18")]
        Item18,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("19")]
        Item19,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("20")]
        Item20,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("21")]
        Item21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("22")]
        Item22,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("23")]
        Item23,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum temperatureCompensationType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum pressureCompensationType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class receivedGasMeter : mspMeter {
        
        /// <remarks/>
        public gasNameplate gasNameplate;
        
        /// <remarks/>
        public System.DateTime manufacturedDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool manufacturedDateSpecified;
        
        /// <remarks/>
        public money purchasePrice;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(testedElectricMeter))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class receivedElectricMeter : mspMeter {
        
        /// <remarks/>
        public electricNameplate electricNameplate;
        
        /// <remarks/>
        public System.DateTime manufacturedDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool manufacturedDateSpecified;
        
        /// <remarks/>
        public money purchasePrice;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class testedElectricMeter : receivedElectricMeter {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public meterTest[] meterTestList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class meterTest {
        
        /// <remarks/>
        public System.DateTime testDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool testDateSpecified;
        
        /// <remarks/>
        public asFound asFound;
        
        /// <remarks/>
        public asLeft asLeft;
        
        /// <remarks/>
        public string reason;
        
        /// <remarks/>
        public string testersInitials;
        
        /// <remarks/>
        public string testCompany;
        
        /// <remarks/>
        public string comments;
        
        /// <remarks/>
        public float revolutions;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool revolutionsSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class asFound : meterConditions {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(asLeft))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(asFound))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class meterConditions {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string kWhReading;
        
        /// <remarks/>
        public float kWReading;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool kWReadingSpecified;
        
        /// <remarks/>
        public float kVArReading;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool kVArReadingSpecified;
        
        /// <remarks/>
        public float powerFactorReading;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool powerFactorReadingSpecified;
        
        /// <remarks/>
        public float resultHigh;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool resultHighSpecified;
        
        /// <remarks/>
        public float resultLow;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool resultLowSpecified;
        
        /// <remarks/>
        public float resultLL;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool resultLLSpecified;
        
        /// <remarks/>
        public float kWResult;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool kWResultSpecified;
        
        /// <remarks/>
        public float kVArResult;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool kVArResultSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class asLeft : meterConditions {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class propaneMeter : mspMeter {
        
        /// <remarks/>
        public propaneNameplate propaneNameplate;
        
        /// <remarks/>
        public propaneLocationFields propaneLocationFields;
        
        /// <remarks/>
        public meterConnectionStatus meterConnectionStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool meterConnectionStatusSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public configuredReadingType[] configuredReadingTypes;
        
        /// <remarks/>
        public string meterCommAddress;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public billingStatusItem[] billingStatusInformation;
        
        /// <remarks/>
        public remoteReconnectSetting remoteReconnectSetting;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool remoteReconnectSettingSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class propaneLocationFields {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public extensionsItem[] extensionsList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class gasMeter : mspMeter {
        
        /// <remarks/>
        public gasNameplate gasNameplate;
        
        /// <remarks/>
        public gasLocationFields gasLocationFields;
        
        /// <remarks/>
        public meterConnectionStatus meterConnectionStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool meterConnectionStatusSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public configuredReadingType[] configuredReadingTypes;
        
        /// <remarks/>
        public string meterCommAddress;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public billingStatusItem[] billingStatusInformation;
        
        /// <remarks/>
        public remoteReconnectSetting remoteReconnectSetting;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool remoteReconnectSettingSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class gasLocationFields {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public extensionsItem[] extensionsList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class waterMeter : mspMeter {
        
        /// <remarks/>
        public waterNameplate waterNameplate;
        
        /// <remarks/>
        public waterLocationFields waterLocationFields;
        
        /// <remarks/>
        public meterConnectionStatus meterConnectionStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool meterConnectionStatusSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public configuredReadingType[] configuredReadingTypes;
        
        /// <remarks/>
        public string meterCommAddress;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public billingStatusItem[] billingStatusInformation;
        
        /// <remarks/>
        public remoteReconnectSetting remoteReconnectSetting;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool remoteReconnectSettingSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class waterLocationFields {
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public string waterServiceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public extensionsItem[] extensionsList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class otherMeter : mspMeter {
        
        /// <remarks/>
        public otherNameplate otherNameplate;
        
        /// <remarks/>
        public otherLocationFields otherLocationFields;
        
        /// <remarks/>
        public meterConnectionStatus meterConnectionStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool meterConnectionStatusSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public configuredReadingType[] configuredReadingTypes;
        
        /// <remarks/>
        public string meterCommAddress;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public billingStatusItem[] billingStatusInformation;
        
        /// <remarks/>
        public remoteReconnectSetting remoteReconnectSetting;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool remoteReconnectSettingSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class otherNameplate {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public extensionsItem[] extensionsList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class otherLocationFields {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public extensionsItem[] extensionsList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class meterEventList : mspObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public eventInstance[] eventInstances;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class eventInstance {
        
        /// <remarks/>
        public extensions extensions;
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public meterEvent meterEvent;
        
        /// <remarks/>
        public System.DateTime timeStamp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timeStampSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class meterEvent {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string domain;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string domainPart;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string index;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string value;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string codeString;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class endDeviceShipment : mspObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("utility")]
        public string utility1;
        
        /// <remarks/>
        public string manufacturer;
        
        /// <remarks/>
        public string poReferenceNumber;
        
        /// <remarks/>
        public string shippingTicketNumber;
        
        /// <remarks/>
        public string recipient;
        
        /// <remarks/>
        public System.DateTime shippedDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool shippedDateSpecified;
        
        /// <remarks/>
        public address shippedToAddress;
        
        /// <remarks/>
        public System.DateTime receivedDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool receivedDateSpecified;
        
        /// <remarks/>
        public transponderIDRange transponderIDRange;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public receivedElectricMeter[] receivedElectricMeters;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public module[] receivedModules;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public loadManagementDevice[] receivedLoadManagementDevices;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public CDDevice[] receivedCDDevices;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public receivedGasMeter[] receivedGasMeters;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public receivedWaterMeter[] receivedWaterMeters;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public receivedPropaneMeter[] receivedPropaneMeters;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public inHomeDisplay[] receivedIHDs;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class address {
        
        /// <remarks/>
        public string address1;
        
        /// <remarks/>
        public string address2;
        
        /// <remarks/>
        public detailedAddressFields detailedAddressFields;
        
        /// <remarks/>
        public string townCode;
        
        /// <remarks/>
        public string city;
        
        /// <remarks/>
        public string state;
        
        /// <remarks/>
        public string postalCode;
        
        /// <remarks/>
        public string country;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class detailedAddressFields {
        
        /// <remarks/>
        public string streetPrefix;
        
        /// <remarks/>
        public string streetNumber;
        
        /// <remarks/>
        public string streetSuffix;
        
        /// <remarks/>
        public string streetType;
        
        /// <remarks/>
        public string buildingNumber;
        
        /// <remarks/>
        public string suiteNumber;
        
        /// <remarks/>
        public string addressGeneral;
        
        /// <remarks/>
        public string postOfficeBox;
        
        /// <remarks/>
        public string region;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class transponderIDRange {
        
        /// <remarks/>
        public string start;
        
        /// <remarks/>
        public string end;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class loadManagementDevice : mspPointObject {
        
        /// <remarks/>
        public string serialNumber;
        
        /// <remarks/>
        public string deviceType;
        
        /// <remarks/>
        public string manufacturer;
        
        /// <remarks/>
        public long phases;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phasesSpecified;
        
        /// <remarks/>
        public deviceStatus status;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool statusSpecified;
        
        /// <remarks/>
        public float powerLimit;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool powerLimitSpecified;
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public module[] moduleList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string numberOfRelays;
        
        /// <remarks/>
        public voltage ratedVoltage;
        
        /// <remarks/>
        public current ratedCurrent;
        
        /// <remarks/>
        public assetFields assetFields;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public loadManagementDeviceRelay[] loadManagementDeviceRelays;
        
        /// <remarks/>
        public string AMRDeviceType;
        
        /// <remarks/>
        public string AMRVendor;
        
        /// <remarks/>
        public utilityInfo utilityInfo;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum deviceStatus {
        
        /// <remarks/>
        On,
        
        /// <remarks/>
        Off,
        
        /// <remarks/>
        OutofService,
        
        /// <remarks/>
        PowerLimitation,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class loadManagementDeviceRelay {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string relayNumber;
        
        /// <remarks/>
        public connectorStatus connectorStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool connectorStatusSpecified;
        
        /// <remarks/>
        public string demandResponseDeviceClass;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum connectorStatus {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        OutOfService,
        
        /// <remarks/>
        Wired,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(load))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspAssetHistoryEvent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(assetHistoryEvent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(meterHistoryEvent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(outageEvent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(assessmentLocation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(spatialFeatureGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(genericPointFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(secondaryJunctionBox))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(riser))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(primaryCabinet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(powerSystemDevice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(pole))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(serviceLocation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(premise))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(outageDetectionDevice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(meterBase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(measurementDevice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(loadManagementDevice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(inHomeDisplay))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(guy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(genericAnnotationFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspConnectivityPoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspElectricPoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(equivalentSource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(fakeNodeSection))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(trafficLight))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(streetLight))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspBankObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(regulatorBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspSwitchingBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(switchingDeviceBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(overcurrentDeviceBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(capacitorBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(transformerBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspMotorGenerator))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(inductionMachine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(synchronousMachine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(securityLight))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(scadaPoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(thermostat))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public abstract partial class mspPointObject : mspObject {
        
        /// <remarks/>
        public PointType GMLLocation;
        
        /// <remarks/>
        public gpsPoint gpsPoint;
        
        /// <remarks/>
        public GPSLocation GPSLocation;
        
        /// <remarks/>
        public string gridLocation;
        
        /// <remarks/>
        public float rotation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool rotationSpecified;
        
        /// <remarks/>
        public string facilityID;
        
        /// <remarks/>
        public timeZone timeZone;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class GPSLocation {
        
        /// <remarks/>
        public double latitude;
        
        /// <remarks/>
        public double longitude;
        
        /// <remarks/>
        public double altitude;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool altitudeSpecified;
        
        /// <remarks/>
        public GPSMetadata GPSMetadata;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool GPSValidity;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GPSValiditySpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class GPSMetadata {
        
        /// <remarks/>
        public double easting;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool eastingSpecified;
        
        /// <remarks/>
        public double northing;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool northingSpecified;
        
        /// <remarks/>
        public string source;
        
        /// <remarks/>
        public long number;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool numberSpecified;
        
        /// <remarks/>
        public bool isRealTimeDiffCorrection;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isRealTimeDiffCorrectionSpecified;
        
        /// <remarks/>
        public float hdop;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool hdopSpecified;
        
        /// <remarks/>
        public float vdop;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool vdopSpecified;
        
        /// <remarks/>
        public string diffID;
        
        /// <remarks/>
        public System.DateTime collected;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool collectedSpecified;
        
        /// <remarks/>
        public long numSat;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool numSatSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class timeZone {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool DSTEnabled;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DSTEnabledSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal UTCOffset;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string comment;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class load : mspPointObject {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(assetHistoryEvent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(meterHistoryEvent))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public abstract partial class mspAssetHistoryEvent : mspPointObject {
        
        /// <remarks/>
        public System.DateTime eventTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool eventTimeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("actionTaken")]
        public actionTaken[] actionTaken;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("informationItem", IsNullable=false)]
        public string[] informationList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum actionTaken {
        
        /// <remarks/>
        Installed,
        
        /// <remarks/>
        PlacedIntoService,
        
        /// <remarks/>
        Connected,
        
        /// <remarks/>
        Disconnected,
        
        /// <remarks/>
        Removed,
        
        /// <remarks/>
        Inspected,
        
        /// <remarks/>
        Tested,
        
        /// <remarks/>
        Repaired,
        
        /// <remarks/>
        Calibrated,
        
        /// <remarks/>
        Checked,
        
        /// <remarks/>
        ReturnedToInventory,
        
        /// <remarks/>
        Retired,
        
        /// <remarks/>
        Destroyed,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class assetHistoryEvent : mspAssetHistoryEvent {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class meterHistoryEvent : mspAssetHistoryEvent {
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public string customerID;
        
        /// <remarks/>
        public string accountID;
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public serviceID serviceID;
        
        /// <remarks/>
        public string meterBaseID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("meterStatus", IsNullable=false)]
        public string[] meterStatusList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class outageEvent : mspPointObject {
        
        /// <remarks/>
        public string area;
        
        /// <remarks/>
        public string problemLocation;
        
        /// <remarks/>
        public objectRef deviceID;
        
        /// <remarks/>
        public string deviceType;
        
        /// <remarks/>
        public phaseCode outagedPhase;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool outagedPhaseSpecified;
        
        /// <remarks/>
        public string substationCode;
        
        /// <remarks/>
        public string feeder;
        
        /// <remarks/>
        public string actualFault;
        
        /// <remarks/>
        public string faultType;
        
        /// <remarks/>
        public bool isCustomerResponsible;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isCustomerResponsibleSpecified;
        
        /// <remarks/>
        public bool isPlanned;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isPlannedSpecified;
        
        /// <remarks/>
        public string outageDescription;
        
        /// <remarks/>
        public outageStatus outageStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool outageStatusSpecified;
        
        /// <remarks/>
        public string priority;
        
        /// <remarks/>
        public System.DateTime startTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startTimeSpecified;
        
        /// <remarks/>
        public System.DateTime outageDefined;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool outageDefinedSpecified;
        
        /// <remarks/>
        public System.DateTime firstDispatch;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool firstDispatchSpecified;
        
        /// <remarks/>
        public System.DateTime firstETA;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool firstETASpecified;
        
        /// <remarks/>
        public System.DateTime firstArrival;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool firstArrivalSpecified;
        
        /// <remarks/>
        public System.DateTime ETOR;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ETORSpecified;
        
        /// <remarks/>
        public System.DateTime completed;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool completedSpecified;
        
        /// <remarks/>
        public message message;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("crewID", IsNullable=false)]
        public string[] crewsDispatched;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string customersAffected;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string priorityCustomersCount;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string ODEventCount;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string customersRestored;
        
        /// <remarks/>
        public outageReasonCodeList outageReasonCodeList;
        
        /// <remarks/>
        public outageEventStatus outageEventStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public outageCustomer[] outageCustomerList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public crewActionEvent[] crewActionEvents;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum outageStatus {
        
        /// <remarks/>
        Assumed,
        
        /// <remarks/>
        Confirmed,
        
        /// <remarks/>
        Restored,
        
        /// <remarks/>
        Scheduled,
        
        /// <remarks/>
        StillOut,
        
        /// <remarks/>
        NonPay,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class message : mspObject {
        
        /// <remarks/>
        public string recordID;
        
        /// <remarks/>
        public System.DateTime eventTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool eventTimeSpecified;
        
        /// <remarks/>
        public System.DateTime listenedOn;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool listenedOnSpecified;
        
        /// <remarks/>
        public string listenedBy;
        
        /// <remarks/>
        public string transcription;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public attachment[] attachments;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class attachment : mspObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("content", typeof(content))]
        [System.Xml.Serialization.XmlElementAttribute("contentReference", typeof(contentReference))]
        public object Item;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class content : mspObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] contentBinary;
        
        /// <remarks/>
        public string contentEncoding;
        
        /// <remarks/>
        public contentType contentType;
        
        /// <remarks/>
        public string fileName;
        
        /// <remarks/>
        public string sourceFilePath;
        
        /// <remarks/>
        public System.DateTime attachDateTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool attachDateTimeSpecified;
        
        /// <remarks/>
        public string caption;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class contentType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public binaryType type;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string subType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string charset;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum binaryType {
        
        /// <remarks/>
        text,
        
        /// <remarks/>
        image,
        
        /// <remarks/>
        audio,
        
        /// <remarks/>
        video,
        
        /// <remarks/>
        application,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class contentReference {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        public string URI;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string category;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class outageReasonCodeList : mspObject {
        
        /// <remarks/>
        public outageReason outageCause;
        
        /// <remarks/>
        public outageReason equipmentFailure;
        
        /// <remarks/>
        public outageReason voltageLevel;
        
        /// <remarks/>
        public outageReason weatherCondition;
        
        /// <remarks/>
        public outageReason systemCharacterization;
        
        /// <remarks/>
        public outageReason responsibleSystem;
        
        /// <remarks/>
        public outageReason outageCondition;
        
        /// <remarks/>
        public outageReason interruptingDevice;
        
        /// <remarks/>
        public outageReason interruptingDeviceInitiation;
        
        /// <remarks/>
        public outageReason customerResoration;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class outageEventStatus : mspObject {
        
        /// <remarks/>
        public outageStatus outageStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool outageStatusSpecified;
        
        /// <remarks/>
        public bool crewDispatched;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool crewDispatchedSpecified;
        
        /// <remarks/>
        public bool crewOnSite;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool crewOnSiteSpecified;
        
        /// <remarks/>
        public System.DateTime ETOR;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ETORSpecified;
        
        /// <remarks/>
        public bool customerFound;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool customerFoundSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public outageAttachment[] outageAttachments;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class outageAttachment {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("attachmentID", typeof(string))]
        [System.Xml.Serialization.XmlElementAttribute("transcription", typeof(string))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType ItemElementName;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release", IncludeInSchema=false)]
    public enum ItemChoiceType {
        
        /// <remarks/>
        attachmentID,
        
        /// <remarks/>
        transcription,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class outageCustomer {
        
        /// <remarks/>
        public string customerID;
        
        /// <remarks/>
        public telephoneNumber callBackPhone;
        
        /// <remarks/>
        public timeToCall timeToCall;
        
        /// <remarks/>
        public bool callBackFlag;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool callBackFlagSpecified;
        
        /// <remarks/>
        public string callBackContactFirstName;
        
        /// <remarks/>
        public string callBackContactLastName;
        
        /// <remarks/>
        public string callBackContactMName;
        
        /// <remarks/>
        public callBackStatus callBackStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool callBackStatusSpecified;
        
        /// <remarks/>
        public System.DateTime callBackCompletedTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool callBackCompletedTimeSpecified;
        
        /// <remarks/>
        public callBackType callBackType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool callBackTypeSpecified;
        
        /// <remarks/>
        public string callRecordID;
        
        /// <remarks/>
        public string outageEventID;
        
        /// <remarks/>
        public telephoneNumber callerID;
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public serviceID serviceID;
        
        /// <remarks/>
        public meterID meterID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class telephoneNumber {
        
        /// <remarks/>
        public string areaCode;
        
        /// <remarks/>
        public string cityCode;
        
        /// <remarks/>
        public string countryCode;
        
        /// <remarks/>
        public string localNumber;
        
        /// <remarks/>
        public string extension;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class timeToCall {
        
        /// <remarks/>
        public System.DateTime startTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startTimeSpecified;
        
        /// <remarks/>
        public System.DateTime endTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool endTimeSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum callBackStatus {
        
        /// <remarks/>
        On,
        
        /// <remarks/>
        Off,
        
        /// <remarks/>
        StillOff,
        
        /// <remarks/>
        Undialable,
        
        /// <remarks/>
        MaxDial,
        
        /// <remarks/>
        NoResponse,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum callBackType {
        
        /// <remarks/>
        IVR,
        
        /// <remarks/>
        Manual,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class crewActionEvent : mspObject {
        
        /// <remarks/>
        public string outageEventID;
        
        /// <remarks/>
        public string requestedCrewID;
        
        /// <remarks/>
        public string assignedCrewID;
        
        /// <remarks/>
        public crewAction crewAction;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool crewActionSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum crewAction {
        
        /// <remarks/>
        Request,
        
        /// <remarks/>
        Accepted,
        
        /// <remarks/>
        Declined,
        
        /// <remarks/>
        Released,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class assessmentLocation : mspPointObject {
        
        /// <remarks/>
        public address address;
        
        /// <remarks/>
        public string locationOffset;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public assessment[] assessmentList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public attachment[] attachments;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class assessment : mspObject {
        
        /// <remarks/>
        public string category;
        
        /// <remarks/>
        public System.DateTime createdOn;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool createdOnSpecified;
        
        /// <remarks/>
        public string createdBy;
        
        /// <remarks/>
        public System.DateTime closedOn;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool closedOnSpecified;
        
        /// <remarks/>
        public string closedBy;
        
        /// <remarks/>
        public string elementID;
        
        /// <remarks/>
        public string elementName;
        
        /// <remarks/>
        public string elementType;
        
        /// <remarks/>
        public float estimated;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool estimatedSpecified;
        
        /// <remarks/>
        public string eventID;
        
        /// <remarks/>
        public string jobNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public attachment[] attachments;
        
        /// <remarks/>
        public System.DateTime expiresOn;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool expiresOnSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class spatialFeatureGroup : mspPointObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("anchor")]
        public anchor[] anchor;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("capacitorBank")]
        public capacitorBank[] capacitorBank;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CDDevice")]
        public CDDevice[] CDDevice;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("electricMeter")]
        public electricMeter[] electricMeter;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("gasMeter")]
        public gasMeter[] gasMeter;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("guy")]
        public guy[] guy;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("inductionMachine")]
        public inductionMachine[] inductionMachine;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("inHomeDisplay")]
        public inHomeDisplay[] inHomeDisplay;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("loadManagementDevice")]
        public loadManagementDevice[] loadManagementDevice;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("measurementDevice")]
        public measurementDevice[] measurementDevice;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("meterBase")]
        public meterBase[] meterBase;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("module")]
        public module[] module;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ohPrimaryLine")]
        public ohPrimaryLine[] ohPrimaryLine;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ohSecondaryLine")]
        public ohSecondaryLine[] ohSecondaryLine;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ohTransmissionLine")]
        public ohTransmissionLine[] ohTransmissionLine;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("outageDetectionDevice")]
        public outageDetectionDevice[] outageDetectionDevice;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("overCurrentDeviceBank")]
        public overcurrentDeviceBank[] overCurrentDeviceBank;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("parcel")]
        public parcel[] parcel;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("pole")]
        public pole[] pole;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("powerMonitor")]
        public powerMonitor[] powerMonitor;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("powerSystemDevice")]
        public powerSystemDevice[] powerSystemDevice;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("premise")]
        public premise[] premise;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("primaryCabinet")]
        public primaryCabinet[] primaryCabinet;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("propaneMeter")]
        public propaneMeter[] propaneMeter;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("regulatorBank")]
        public regulatorBank[] regulatorBank;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("riser")]
        public riser[] riser;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("secondaryJunctionBox")]
        public secondaryJunctionBox[] secondaryJunctionBox;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("securityLight")]
        public securityLight[] securityLight;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("serviceLocation")]
        public serviceLocation[] serviceLocation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("spanGuy")]
        public spanGuy[] spanGuy;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("streetLight")]
        public streetLight[] streetLight;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("substation")]
        public substation[] substation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("surgeArrestor")]
        public surgeArrestor[] surgeArrestor;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("switchingDeviceBank")]
        public switchingDeviceBank[] switchingDeviceBank;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("synchronousMachine")]
        public synchronousMachine[] synchronousMachine;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("trafficLight")]
        public trafficLight[] trafficLight;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("transformerBank")]
        public transformerBank[] transformerBank;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ugPrimaryLine")]
        public ugPrimaryLine[] ugPrimaryLine;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ugSecondaryLine")]
        public ugSecondaryLine[] ugSecondaryLine;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ugTransmissionLine")]
        public ugTransmissionLine[] ugTransmissionLine;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("waterMeter")]
        public waterMeter[] waterMeter;
        
        /// <remarks/>
        public CIMObjectList CIMObjectList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class anchor : mspObject {
        
        /// <remarks/>
        public lead lead;
        
        /// <remarks/>
        public featureStatus status;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool statusSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class lead {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public lengthUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum lengthUnits {
        
        /// <remarks/>
        Mils,
        
        /// <remarks/>
        Inches,
        
        /// <remarks/>
        Feet,
        
        /// <remarks/>
        Yards,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Thousand feet")]
        Thousandfeet,
        
        /// <remarks/>
        Miles,
        
        /// <remarks/>
        Micrometers,
        
        /// <remarks/>
        Millimeters,
        
        /// <remarks/>
        Decimeters,
        
        /// <remarks/>
        Centimeters,
        
        /// <remarks/>
        Meters,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("100 Meters")]
        Item100Meters,
        
        /// <remarks/>
        Kilometers,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum featureStatus {
        
        /// <remarks/>
        N,
        
        /// <remarks/>
        E,
        
        /// <remarks/>
        R,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class capacitorBank : mspBankObject {
        
        /// <remarks/>
        public capacitorConnectionCode capacitorConnectionCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool capacitorConnectionCodeSpecified;
        
        /// <remarks/>
        public swType switchType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool switchTypeSpecified;
        
        /// <remarks/>
        public swStatus switchStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool switchStatusSpecified;
        
        /// <remarks/>
        public float switchOn;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool switchOnSpecified;
        
        /// <remarks/>
        public float switchOff;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool switchOffSpecified;
        
        /// <remarks/>
        public seconds switchTimeDelay;
        
        /// <remarks/>
        public objectRef controlCircuitID;
        
        /// <remarks/>
        public reactivePower bankRating;
        
        /// <remarks/>
        public voltage nominalVoltage;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public capacitor[] capacitorList;
        
        /// <remarks/>
        public string regulatingControlID;
        
        /// <remarks/>
        public impedances impedances;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum capacitorConnectionCode {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        ShuntWye,
        
        /// <remarks/>
        ShuntUngroundedWye,
        
        /// <remarks/>
        ShuntDelta,
        
        /// <remarks/>
        ShuntSameAsParent,
        
        /// <remarks/>
        Series,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum swType {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Manual,
        
        /// <remarks/>
        Voltage,
        
        /// <remarks/>
        Current,
        
        /// <remarks/>
        ReactiveAmps,
        
        /// <remarks/>
        Time,
        
        /// <remarks/>
        Temperature,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum swStatus {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Disconnected,
        
        /// <remarks/>
        On,
        
        /// <remarks/>
        Off,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class seconds {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class reactivePower {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public reactivePowerUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum reactivePowerUnits {
        
        /// <remarks/>
        mVAr,
        
        /// <remarks/>
        VAr,
        
        /// <remarks/>
        kVAr,
        
        /// <remarks/>
        MVAr,
        
        /// <remarks/>
        GVAr,
        
        /// <remarks/>
        microVAr,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Per Unit")]
        PerUnit,
        
        /// <remarks/>
        Percent,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class capacitor : mspObject {
        
        /// <remarks/>
        public phaseCode phaseCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseCodeSpecified;
        
        /// <remarks/>
        public reactivePower reactiveRating;
        
        /// <remarks/>
        public reactivePower reactivePerSection;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string maximumSections;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string normalSections;
        
        /// <remarks/>
        public assetFields assetFields;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class impedances {
        
        /// <remarks/>
        public resistance1 r;
        
        /// <remarks/>
        public reactance1 x;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="resistance", Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class resistance1 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public zUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum zUnits {
        
        /// <remarks/>
        Ohms,
        
        /// <remarks/>
        Percent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Per Unit")]
        PerUnit,
        
        /// <remarks/>
        Total,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="reactance", Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class reactance1 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public zUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(regulatorBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspSwitchingBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(switchingDeviceBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(overcurrentDeviceBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(capacitorBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(transformerBank))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public abstract partial class mspBankObject : mspElectricPoint {
        
        /// <remarks/>
        public bool isGrounded;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isGroundedSpecified;
        
        /// <remarks/>
        public complexImpedance groundingImpedance;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class complexImpedance {
        
        /// <remarks/>
        public float r;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool rSpecified;
        
        /// <remarks/>
        public string x;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public zUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(equivalentSource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(fakeNodeSection))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(trafficLight))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(streetLight))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspBankObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(regulatorBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspSwitchingBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(switchingDeviceBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(overcurrentDeviceBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(capacitorBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(transformerBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspMotorGenerator))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(inductionMachine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(synchronousMachine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(securityLight))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public abstract partial class mspElectricPoint : mspConnectivityPoint {
        
        /// <remarks/>
        public phaseCode phaseCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseCodeSpecified;
        
        /// <remarks/>
        public mspLoadGroup load;
        
        /// <remarks/>
        public string equipmentContainerID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public abstract partial class mspLoadGroup : mspObject {
        
        /// <remarks/>
        public string billRef;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public loadSection[] loadSections;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class loadSection {
        
        /// <remarks/>
        public eaEquipID loadMix;
        
        /// <remarks/>
        public string loadGroup;
        
        /// <remarks/>
        public string loadClass;
        
        /// <remarks/>
        public string loadZone;
        
        /// <remarks/>
        public loadDistr loadDistr;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool loadDistrSpecified;
        
        /// <remarks/>
        public float loadGrowth;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool loadGrowthSpecified;
        
        /// <remarks/>
        public loadInterruptibleType interruptibleType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool interruptibleTypeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public allocatedLoad[] allocated;
        
        /// <remarks/>
        public LoadCurve loadCurve;
        
        /// <remarks/>
        public string loadGroupID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class eaEquipID {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string objectID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public equipmentType equipmentType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool equipmentTypeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string entryName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum equipmentType {
        
        /// <remarks/>
        Conductor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Concentric neutral cable")]
        Concentricneutralcable,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Tape shield cable")]
        Tapeshieldcable,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Line construction")]
        Lineconstruction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Secondary conductor")]
        Secondaryconductor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Service drop")]
        Servicedrop,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Material attributes")]
        Materialattributes,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Line environmental attributes")]
        Lineenvironmentalattributes,
        
        /// <remarks/>
        ROWAttributes,
        
        /// <remarks/>
        Material,
        
        /// <remarks/>
        Transformer,
        
        /// <remarks/>
        Regulator,
        
        /// <remarks/>
        Breaker,
        
        /// <remarks/>
        Fuse,
        
        /// <remarks/>
        Recloser,
        
        /// <remarks/>
        Sectionalizer,
        
        /// <remarks/>
        Switch,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Load mix")]
        Loadmix,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Zsm impedance")]
        Zsmimpedance,
        
        /// <remarks/>
        InductionMachine,
        
        /// <remarks/>
        SynchronousMachine,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum loadDistr {
        
        /// <remarks/>
        Uniform,
        
        /// <remarks/>
        LoadEnd,
        
        /// <remarks/>
        SourceEnd,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum loadInterruptibleType {
        
        /// <remarks/>
        General,
        
        /// <remarks/>
        Interruptible,
        
        /// <remarks/>
        Noninterruptible,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class allocatedLoad {
        
        /// <remarks/>
        public phaseCode phaseCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseCodeSpecified;
        
        /// <remarks/>
        public realPower realPower;
        
        /// <remarks/>
        public reactivePower reactivePower;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string noOfCustomers;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class realPower {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public realPowerUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum realPowerUnits {
        
        /// <remarks/>
        W,
        
        /// <remarks/>
        kW,
        
        /// <remarks/>
        MW,
        
        /// <remarks/>
        GW,
        
        /// <remarks/>
        mW,
        
        /// <remarks/>
        microW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Per Unit")]
        PerUnit,
        
        /// <remarks/>
        Percent,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspElectricPoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(equivalentSource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(fakeNodeSection))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(trafficLight))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(streetLight))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspBankObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(regulatorBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspSwitchingBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(switchingDeviceBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(overcurrentDeviceBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(capacitorBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(transformerBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspMotorGenerator))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(inductionMachine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(synchronousMachine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(securityLight))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public abstract partial class mspConnectivityPoint : mspPointObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public graphicSymbol[] graphicSymbolList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public genericAnnotationFeature[] annotationList;
        
        /// <remarks/>
        public string sectionID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("parentSectionID")]
        public objectRef[] parentSectionID;
        
        /// <remarks/>
        public nodeIdentifier fromNodeID;
        
        /// <remarks/>
        public nodeIdentifier toNodeID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class graphicSymbol {
        
        /// <remarks/>
        public float rotation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool rotationSpecified;
        
        /// <remarks/>
        public float scale;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool scaleSpecified;
        
        /// <remarks/>
        public PointType GMLLocation;
        
        /// <remarks/>
        public string featureType;
        
        /// <remarks/>
        public string featureSubtype;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class genericAnnotationFeature : mspPointObject {
        
        /// <remarks/>
        public string annotation;
        
        /// <remarks/>
        public string featureType;
        
        /// <remarks/>
        public float scale;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool scaleSpecified;
        
        /// <remarks/>
        public string styleName;
        
        /// <remarks/>
        public string featureSubtype;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class nodeIdentifier {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string objectID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class equivalentSource : mspElectricPoint {
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public apparentPower1 basePower;
        
        /// <remarks/>
        public voltage baseVoltage;
        
        /// <remarks/>
        public complexImpedance zMin;
        
        /// <remarks/>
        public complexImpedance zMax;
        
        /// <remarks/>
        public complexImpedance posSeqZ;
        
        /// <remarks/>
        public complexImpedance zeroSeqZ;
        
        /// <remarks/>
        public complexImpedance negSeqZ;
        
        /// <remarks/>
        public voltage voltageMagnitude;
        
        /// <remarks/>
        public angle1 voltageAngle;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="apparentPower", Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class apparentPower1 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public apparentPowerUnits1 units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="apparentPowerUnits", Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum apparentPowerUnits1 {
        
        /// <remarks/>
        VA,
        
        /// <remarks/>
        kVA,
        
        /// <remarks/>
        MVA,
        
        /// <remarks/>
        GVA,
        
        /// <remarks/>
        mVA,
        
        /// <remarks/>
        microVA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Per Unit")]
        PerUnit,
        
        /// <remarks/>
        Percent,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="angle", Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class angle1 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public angleUnits1 units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="angleUnits", Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum angleUnits1 {
        
        /// <remarks/>
        Degrees,
        
        /// <remarks/>
        Minutes,
        
        /// <remarks/>
        Seconds,
        
        /// <remarks/>
        Radians,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class fakeNodeSection : mspElectricPoint {
        
        /// <remarks/>
        public bool isAllocated;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isAllocatedSpecified;
        
        /// <remarks/>
        public bool isRequired;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isRequiredSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string cktLvl;
        
        /// <remarks/>
        public bool isMultiParent;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isMultiParentSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class trafficLight : mspElectricPoint {
        
        /// <remarks/>
        public string transformerBankID;
        
        /// <remarks/>
        public streetLocation streetLocation;
        
        /// <remarks/>
        public string owner;
        
        /// <remarks/>
        public assetFields assetFields;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class streetLocation {
        
        /// <remarks/>
        public string street;
        
        /// <remarks/>
        public string crossStreet;
        
        /// <remarks/>
        public string city;
        
        /// <remarks/>
        public string county;
        
        /// <remarks/>
        public string state;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class streetLight : mspElectricPoint {
        
        /// <remarks/>
        public string lightType;
        
        /// <remarks/>
        public long wattage;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool wattageSpecified;
        
        /// <remarks/>
        public float brightness;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool brightnessSpecified;
        
        /// <remarks/>
        public string transformerBankID;
        
        /// <remarks/>
        public assetFields assetFields;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(inductionMachine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(synchronousMachine))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public abstract partial class mspMotorGenerator : mspElectricPoint {
        
        /// <remarks/>
        public eaEquipID eaEquipment;
        
        /// <remarks/>
        public voltage ratedVoltage;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class inductionMachine : mspMotorGenerator {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string status;
        
        /// <remarks/>
        public machineType type;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeSpecified;
        
        /// <remarks/>
        public float operatingSlip;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool operatingSlipSpecified;
        
        /// <remarks/>
        public float hp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool hpSpecified;
        
        /// <remarks/>
        public float pf;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pfSpecified;
        
        /// <remarks/>
        public float efficiency;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool efficiencySpecified;
        
        /// <remarks/>
        public voltage lgVolts;
        
        /// <remarks/>
        public float dropout;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dropoutSpecified;
        
        /// <remarks/>
        public nemaType nemaType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nemaTypeSpecified;
        
        /// <remarks/>
        public float limitVoltage;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool limitVoltageSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string softStartType;
        
        /// <remarks/>
        public resistance1 softStartR;
        
        /// <remarks/>
        public reactance1 softStartX;
        
        /// <remarks/>
        public float softStartTap;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool softStartTapSpecified;
        
        /// <remarks/>
        public float lockedRotorPF;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lockedRotorPFSpecified;
        
        /// <remarks/>
        public float lockedRotorMultiplier;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lockedRotorMultiplierSpecified;
        
        /// <remarks/>
        public inductionMachineImpedances impedances;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum machineType {
        
        /// <remarks/>
        Motor,
        
        /// <remarks/>
        Generator,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum nemaType {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        A,
        
        /// <remarks/>
        B,
        
        /// <remarks/>
        C,
        
        /// <remarks/>
        D,
        
        /// <remarks/>
        E,
        
        /// <remarks/>
        F,
        
        /// <remarks/>
        G,
        
        /// <remarks/>
        H,
        
        /// <remarks/>
        J,
        
        /// <remarks/>
        K,
        
        /// <remarks/>
        L,
        
        /// <remarks/>
        M,
        
        /// <remarks/>
        N,
        
        /// <remarks/>
        P,
        
        /// <remarks/>
        R,
        
        /// <remarks/>
        S,
        
        /// <remarks/>
        T,
        
        /// <remarks/>
        U,
        
        /// <remarks/>
        V,
        
        /// <remarks/>
        None,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class inductionMachineImpedances {
        
        /// <remarks/>
        public apparentPower1 basePower;
        
        /// <remarks/>
        public voltage baseVoltage;
        
        /// <remarks/>
        public complexImpedance statorImpedance;
        
        /// <remarks/>
        public complexImpedance rotorImpedance;
        
        /// <remarks/>
        public complexImpedance magnetizingImpedance;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class synchronousMachine : mspMotorGenerator {
        
        /// <remarks/>
        public eaEquipID ssImpedanceID;
        
        /// <remarks/>
        public eaEquipID tranImpedanceID;
        
        /// <remarks/>
        public eaEquipID stImpedanceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string model;
        
        /// <remarks/>
        public SynchronousMachineType type;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeSpecified;
        
        /// <remarks/>
        public SynchronousMachineOperatingMode operatingMode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool operatingModeSpecified;
        
        /// <remarks/>
        public complexVoltage holdVoltsZ;
        
        /// <remarks/>
        public realPower Pout;
        
        /// <remarks/>
        public reactivePower maxLeadQ;
        
        /// <remarks/>
        public reactivePower maxLagQ;
        
        /// <remarks/>
        public loadConnection connection;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool connectionSpecified;
        
        /// <remarks/>
        public voltage maximumVoltage;
        
        /// <remarks/>
        public voltage minimumVoltage;
        
        /// <remarks/>
        public reactivePower baseQ;
        
        /// <remarks/>
        public reactivePower maxQ;
        
        /// <remarks/>
        public reactivePower minQ;
        
        /// <remarks/>
        public apparentPower1 ratedMVA;
        
        /// <remarks/>
        public string generatingUnitID;
        
        /// <remarks/>
        public string regulatingControlID;
        
        /// <remarks/>
        public ReactiveCapabilityCurve initialReactiveCapabilityCurve;
        
        /// <remarks/>
        public synchronousMachineImpedances impedances;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public enum SynchronousMachineType {
        
        /// <remarks/>
        generator,
        
        /// <remarks/>
        condenser,
        
        /// <remarks/>
        generator_or_condenser,
        
        /// <remarks/>
        motor,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="cpsm_V4.1_Release")]
    public enum SynchronousMachineOperatingMode {
        
        /// <remarks/>
        generator,
        
        /// <remarks/>
        condenser,
        
        /// <remarks/>
        motor,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class complexVoltage {
        
        /// <remarks/>
        public float r;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool rSpecified;
        
        /// <remarks/>
        public float x;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool xSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public voltageUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum loadConnection {
        
        /// <remarks/>
        W,
        
        /// <remarks/>
        D,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class synchronousMachineImpedances {
        
        /// <remarks/>
        public apparentPower1 basePower;
        
        /// <remarks/>
        public voltage baseVoltage;
        
        /// <remarks/>
        public resistance1 r;
        
        /// <remarks/>
        public resistance1 r0;
        
        /// <remarks/>
        public reactance1 x;
        
        /// <remarks/>
        public reactance1 x0;
        
        /// <remarks/>
        public reactance1 xDirectSync;
        
        /// <remarks/>
        public reactance1 xDirectTrans;
        
        /// <remarks/>
        public reactance1 xDirectSubtrans;
        
        /// <remarks/>
        public reactance1 xQuadSync;
        
        /// <remarks/>
        public reactance1 xQuadTrans;
        
        /// <remarks/>
        public reactance1 xQuadSubtrans;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class securityLight : mspElectricPoint {
        
        /// <remarks/>
        public string lightType;
        
        /// <remarks/>
        public long wattage;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool wattageSpecified;
        
        /// <remarks/>
        public float brightness;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool brightnessSpecified;
        
        /// <remarks/>
        public string sequence;
        
        /// <remarks/>
        public securityLightStatus status;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool statusSpecified;
        
        /// <remarks/>
        public string actionTaken;
        
        /// <remarks/>
        public string transformerBankID;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public assetFields assetFields;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum securityLightStatus {
        
        /// <remarks/>
        NewConnect,
        
        /// <remarks/>
        Active,
        
        /// <remarks/>
        Disconnected,
        
        /// <remarks/>
        Inactive,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class regulatorBank : mspBankObject {
        
        /// <remarks/>
        public regulatorBankConnectionCode regulatorBankConnectionCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool regulatorBankConnectionCodeSpecified;
        
        /// <remarks/>
        public mspPhase crlPhase;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool crlPhaseSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public regulator[] regulatorList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum regulatorBankConnectionCode {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Wye 3ph")]
        Wye3ph,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Delta 3ph")]
        Delta3ph,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Line-neutral")]
        Lineneutral,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Open delta")]
        Opendelta,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Closed delta")]
        Closeddelta,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Uknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum mspPhase {
        
        /// <remarks/>
        A,
        
        /// <remarks/>
        B,
        
        /// <remarks/>
        C,
        
        /// <remarks/>
        N,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class regulator : mspObject {
        
        /// <remarks/>
        public eaEquipID eaEquipment;
        
        /// <remarks/>
        public phaseCode phaseCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseCodeSpecified;
        
        /// <remarks/>
        public voltage vOut;
        
        /// <remarks/>
        public voltage voltageBandwidth;
        
        /// <remarks/>
        public seconds initialDelay;
        
        /// <remarks/>
        public seconds subsequentDelay;
        
        /// <remarks/>
        public voltage ldcR;
        
        /// <remarks/>
        public voltage ldcX;
        
        /// <remarks/>
        public voltage fhHi;
        
        /// <remarks/>
        public voltage fhLo;
        
        /// <remarks/>
        public voltage reverseFlowR;
        
        /// <remarks/>
        public voltage reverseFlowX;
        
        /// <remarks/>
        public assetFields assetFields;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(switchingDeviceBank))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(overcurrentDeviceBank))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public abstract partial class mspSwitchingBank : mspBankObject {
        
        /// <remarks/>
        public bool isGanged;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isGangedSpecified;
        
        /// <remarks/>
        public bool isRemotelyOperable;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isRemotelyOperableSpecified;
        
        /// <remarks/>
        public objectRef partner;
        
        /// <remarks/>
        public bool ldPoint;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ldPointSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class switchingDeviceBank : mspSwitchingBank {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public switchingDevice[] switchingDeviceList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class switchingDevice {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("breaker", typeof(breaker))]
        [System.Xml.Serialization.XmlElementAttribute("cut", typeof(cut))]
        [System.Xml.Serialization.XmlElementAttribute("elbow", typeof(elbow))]
        [System.Xml.Serialization.XmlElementAttribute("extensions", typeof(extensions))]
        [System.Xml.Serialization.XmlElementAttribute("extensionsList", typeof(extensionsList1))]
        [System.Xml.Serialization.XmlElementAttribute("fuse", typeof(fuse))]
        [System.Xml.Serialization.XmlElementAttribute("jumper", typeof(jumper))]
        [System.Xml.Serialization.XmlElementAttribute("recloser", typeof(recloser))]
        [System.Xml.Serialization.XmlElementAttribute("sectionalizer", typeof(sectionalizer))]
        [System.Xml.Serialization.XmlElementAttribute("switch", typeof(@switch))]
        public object Item;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class breaker : mspOverCurrentDevice {
        
        /// <remarks/>
        public current phaseTripRating;
        
        /// <remarks/>
        public breakerImpedances breakerImpedances;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class breakerImpedances {
        
        /// <remarks/>
        public resistance1 r;
        
        /// <remarks/>
        public reactance1 x;
        
        /// <remarks/>
        public resistance1 r0;
        
        /// <remarks/>
        public reactance1 x0;
        
        /// <remarks/>
        public susceptance1 b;
        
        /// <remarks/>
        public susceptance1 b0;
        
        /// <remarks/>
        public conductance1 g;
        
        /// <remarks/>
        public conductance1 g0;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="susceptance", Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class susceptance1 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public sUnits1 units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="sUnits", Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum sUnits1 {
        
        /// <remarks/>
        microS,
        
        /// <remarks/>
        mS,
        
        /// <remarks/>
        S,
        
        /// <remarks/>
        kS,
        
        /// <remarks/>
        MS,
        
        /// <remarks/>
        Siemens,
        
        /// <remarks/>
        mho,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="conductance", Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class conductance1 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public sUnits1 units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(fuse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(recloser))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(sectionalizer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(breaker))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public abstract partial class mspOverCurrentDevice : mspSwitchingDevice {
        
        /// <remarks/>
        public bool bypassExists;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool bypassExistsSpecified;
        
        /// <remarks/>
        public System.DateTime lastService;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lastServiceSpecified;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(@switch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(jumper))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(cut))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(elbow))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspOverCurrentDevice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(fuse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(recloser))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(sectionalizer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(breaker))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public abstract partial class mspSwitchingDevice : mspObject {
        
        /// <remarks/>
        public eaEquipID eaEquipment;
        
        /// <remarks/>
        public string facilityID;
        
        /// <remarks/>
        public phaseCode phaseCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseCodeSpecified;
        
        /// <remarks/>
        public position normalPosition;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool normalPositionSpecified;
        
        /// <remarks/>
        public voltage operatingVoltage;
        
        /// <remarks/>
        public mounting mounting;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mountingSpecified;
        
        /// <remarks/>
        public assetFields assetFields;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum position {
        
        /// <remarks/>
        NO,
        
        /// <remarks/>
        NC,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum mounting {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Bus-mounted")]
        Busmounted,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pole-mounted")]
        Polemounted,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pad-mounted")]
        Padmounted,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Vault-mounted")]
        Vaultmounted,
        
        /// <remarks/>
        Substation,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class @switch : mspSwitchingDevice {
        
        /// <remarks/>
        public switchImpedances switchImpedances;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class switchImpedances {
        
        /// <remarks/>
        public resistance1 r;
        
        /// <remarks/>
        public reactance1 x;
        
        /// <remarks/>
        public resistance1 r0;
        
        /// <remarks/>
        public reactance1 x0;
        
        /// <remarks/>
        public susceptance1 b;
        
        /// <remarks/>
        public susceptance1 b0;
        
        /// <remarks/>
        public conductance1 g;
        
        /// <remarks/>
        public conductance1 g0;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class jumper : mspSwitchingDevice {
        
        /// <remarks/>
        public System.DateTime dateInstalled;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dateInstalledSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class cut : mspSwitchingDevice {
        
        /// <remarks/>
        public eaLoc lineSectionAffected;
        
        /// <remarks/>
        public cutAction actionTaken;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool actionTakenSpecified;
        
        /// <remarks/>
        public System.DateTime timeOfAction;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timeOfActionSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum cutAction {
        
        /// <remarks/>
        InitiateCut,
        
        /// <remarks/>
        RestoreCut,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class elbow : mspSwitchingDevice {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class fuse : mspOverCurrentDevice {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class recloser : mspOverCurrentDevice {
        
        /// <remarks/>
        public current phaseTripRating;
        
        /// <remarks/>
        public current groundTripRating;
        
        /// <remarks/>
        public bool groundTripNormalEnabled;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool groundTripNormalEnabledSpecified;
        
        /// <remarks/>
        public recloserImpedances recloserImpedances;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class recloserImpedances {
        
        /// <remarks/>
        public resistance1 r;
        
        /// <remarks/>
        public reactance1 x;
        
        /// <remarks/>
        public resistance1 r0;
        
        /// <remarks/>
        public reactance1 x0;
        
        /// <remarks/>
        public susceptance1 b;
        
        /// <remarks/>
        public susceptance1 b0;
        
        /// <remarks/>
        public conductance1 g;
        
        /// <remarks/>
        public conductance1 g0;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class sectionalizer : mspOverCurrentDevice {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string counts;
        
        /// <remarks/>
        public sectionalizerImpedances sectionalizerImpedances;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class sectionalizerImpedances {
        
        /// <remarks/>
        public resistance1 r;
        
        /// <remarks/>
        public reactance1 x;
        
        /// <remarks/>
        public resistance1 r0;
        
        /// <remarks/>
        public reactance1 x0;
        
        /// <remarks/>
        public susceptance1 b;
        
        /// <remarks/>
        public susceptance1 b0;
        
        /// <remarks/>
        public conductance1 g;
        
        /// <remarks/>
        public conductance1 g0;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="extensionsList", Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class extensionsList1 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("extensionsItem")]
        public extensionsItem[] extensionsItem;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class overcurrentDeviceBank : mspSwitchingBank {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public overcurrentDevice[] overcurrentDeviceList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class overcurrentDevice {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("breaker", typeof(breaker))]
        [System.Xml.Serialization.XmlElementAttribute("extensions", typeof(extensions))]
        [System.Xml.Serialization.XmlElementAttribute("extensionsList", typeof(extensionsList1))]
        [System.Xml.Serialization.XmlElementAttribute("fuse", typeof(fuse))]
        [System.Xml.Serialization.XmlElementAttribute("recloser", typeof(recloser))]
        [System.Xml.Serialization.XmlElementAttribute("sectionalizer", typeof(sectionalizer))]
        public object Item;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class transformerBank : mspBankObject {
        
        /// <remarks/>
        public bankRatings bankRatings;
        
        /// <remarks/>
        public wdgCode windingCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool windingCodeSpecified;
        
        /// <remarks/>
        public mspPhase centerTapPhase;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool centerTapPhaseSpecified;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public mounting mounting;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mountingSpecified;
        
        /// <remarks/>
        public objectRef tertiarySectionID;
        
        /// <remarks/>
        public string secondaryProtection;
        
        /// <remarks/>
        public string primaryProtection;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public transformer[] transformerList;
        
        /// <remarks/>
        public electricLocationFields electricLocationFields;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class bankRatings {
        
        /// <remarks/>
        public apparentPower1 bankPowerRating;
        
        /// <remarks/>
        public apparentPower1 nLLoss;
        
        /// <remarks/>
        public apparentPower1 fLLoss;
        
        /// <remarks/>
        public voltage primaryVoltageHigh;
        
        /// <remarks/>
        public voltage primaryVoltageLow;
        
        /// <remarks/>
        public voltage secondaryVoltageHigh;
        
        /// <remarks/>
        public voltage secondaryVoltageLow;
        
        /// <remarks/>
        public voltage tertiaryVoltage;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum wdgCode {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D-Y one")]
        DYone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Y-Y")]
        YY,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D-Y")]
        DY,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Grounded Y-D")]
        GroundedYD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ungrounded Y-D")]
        UngroundedYD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Open Y-D")]
        OpenYD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D-D")]
        DD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Y-Y Grounded Imp")]
        YYGroundedImp,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Y-Y 3ph core type")]
        YY3phcoretype,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D-D one")]
        DDone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D-D open")]
        DDopen,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Y-Y-D Ground")]
        YYDGround,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Y-D one")]
        YDone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D-Y open")]
        DYopen,
        
        /// <remarks/>
        CenterTapSecondary,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class transformer : mspObject {
        
        /// <remarks/>
        public string facilityID;
        
        /// <remarks/>
        public eaEquipID eaEquipment;
        
        /// <remarks/>
        public assetFields assetFields;
        
        /// <remarks/>
        public apparentPower1 unitRatedPower;
        
        /// <remarks/>
        public string transformerType;
        
        /// <remarks/>
        public string status;
        
        /// <remarks/>
        public long phases;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phasesSpecified;
        
        /// <remarks/>
        public phaseCode phaseCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseCodeSpecified;
        
        /// <remarks/>
        public string pcb;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public testInstance[] pcbTestList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public TransformerWinding[] windings;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class testInstance {
        
        /// <remarks/>
        public System.DateTime testDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool testDateSpecified;
        
        /// <remarks/>
        public string pcbClass;
        
        /// <remarks/>
        public string sampleNumber;
        
        /// <remarks/>
        public string comment;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class guy : mspPointObject {
        
        /// <remarks/>
        public featureStatus status;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool statusSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public anchor[] anchorList;
        
        /// <remarks/>
        public guyType guyType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool guyTypeSpecified;
        
        /// <remarks/>
        public guyAgainst guyAgainst;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool guyAgainstSpecified;
        
        /// <remarks/>
        public height attachmentHeight;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum guyType {
        
        /// <remarks/>
        Down,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Double down")]
        Doubledown,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum guyAgainst {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Dead-end")]
        Deadend,
        
        /// <remarks/>
        Angle,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Storm-right")]
        Stormright,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Storm-left")]
        Stormleft,
        
        /// <remarks/>
        Unkonown,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class height {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public lengthUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class inHomeDisplay : mspPointObject {
        
        /// <remarks/>
        public string manufacturer;
        
        /// <remarks/>
        public string serialNumber;
        
        /// <remarks/>
        public string deviceType;
        
        /// <remarks/>
        public string meterBaseID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public module[] moduleList;
        
        /// <remarks/>
        public utilityInfo utilityInfo;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public inHomeDisplayBillingMessage[] inHomeDisplayBillingMessageList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public inHomeDisplayMessage[] inHomeDisplayMessageList;
        
        /// <remarks/>
        public assetFields assetFields;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class inHomeDisplayBillingMessage : mspObject {
        
        /// <remarks/>
        public string inHomeDisplayID;
        
        /// <remarks/>
        public money currentBalance;
        
        /// <remarks/>
        public string currentRate;
        
        /// <remarks/>
        public System.DateTime dateTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dateTimeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string priorityOrder;
        
        /// <remarks/>
        public money averageDailyUsage;
        
        /// <remarks/>
        public money usedYesterday;
        
        /// <remarks/>
        public money usedThisMonth;
        
        /// <remarks/>
        public money usedLastMonth;
        
        /// <remarks/>
        public money usedFourWeeksAgo;
        
        /// <remarks/>
        public money usedThisMonthLastYear;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public usageOtherPeriod[] usageOtherPeriodList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string daysRemaining;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class usageOtherPeriod {
        
        /// <remarks/>
        public money usageThisPeriod;
        
        /// <remarks/>
        public System.DateTime startTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startTimeSpecified;
        
        /// <remarks/>
        public System.DateTime endTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool endTimeSpecified;
        
        /// <remarks/>
        public string periodDescription;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class inHomeDisplayMessage : mspObject {
        
        /// <remarks/>
        public string inHomeDisplayID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public msgLine[] msgLineList;
        
        /// <remarks/>
        public duration duration;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string priorityOrder;
        
        /// <remarks/>
        public bool isAlert;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isAlertSpecified;
        
        /// <remarks/>
        public string alertLevel;
        
        /// <remarks/>
        public string reason;
        
        /// <remarks/>
        public string priority;
        
        /// <remarks/>
        public string transmissionMode;
        
        /// <remarks/>
        public bool confirmationRequired;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool confirmationRequiredSpecified;
        
        /// <remarks/>
        public System.DateTime startTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startTimeSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class msgLine {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string sequenceNumber;
        
        /// <remarks/>
        public string text;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class measurementDevice : mspPointObject {
        
        /// <remarks/>
        public measurementDeviceType measurementDeviceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool measurementDeviceTypeSpecified;
        
        /// <remarks/>
        public eaLoc eaLoc;
        
        /// <remarks/>
        public string substation;
        
        /// <remarks/>
        public string feeder;
        
        /// <remarks/>
        public phaseCode phaseCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseCodeSpecified;
        
        /// <remarks/>
        public measurementDeviceStatus measuremrentDeviceStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool measuremrentDeviceStatusSpecified;
        
        /// <remarks/>
        public string pointID;
        
        /// <remarks/>
        public assetFields assetFields;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum measurementDeviceType {
        
        /// <remarks/>
        Emeter,
        
        /// <remarks/>
        Gmeter,
        
        /// <remarks/>
        Wmeter,
        
        /// <remarks/>
        Demand,
        
        /// <remarks/>
        Harmonic,
        
        /// <remarks/>
        Phaseangle,
        
        /// <remarks/>
        BusV,
        
        /// <remarks/>
        BusI,
        
        /// <remarks/>
        BkrV,
        
        /// <remarks/>
        BkrI,
        
        /// <remarks/>
        LineV,
        
        /// <remarks/>
        LineI,
        
        /// <remarks/>
        GPSClock,
        
        /// <remarks/>
        Temp,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum measurementDeviceStatus {
        
        /// <remarks/>
        InService,
        
        /// <remarks/>
        OutofService,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class meterBase : mspPointObject {
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public string electricServiceID;
        
        /// <remarks/>
        public string premiseID;
        
        /// <remarks/>
        public string form;
        
        /// <remarks/>
        public string @class;
        
        /// <remarks/>
        public baseType baseType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool baseTypeSpecified;
        
        /// <remarks/>
        public instrumentTransformers instrumentTransformers;
        
        /// <remarks/>
        public deviceList deviceList;
        
        /// <remarks/>
        public electricMeter electricMeter;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public inHomeDisplay[] inHomeDisplays;
        
        /// <remarks/>
        public assetFields assetFields;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class instrumentTransformers {
        
        /// <remarks/>
        public double ct;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ctSpecified;
        
        /// <remarks/>
        public double pt;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ptSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class deviceList {
        
        /// <remarks/>
        public extensions extensions;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public extensionsItem[] extensionsList;
        
        /// <remarks/>
        public string cdDeviceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("loadManagementDeviceID", IsNullable=false)]
        public string[] loadManagementDeviceList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("inHomeDisplayID", IsNullable=false)]
        public string[] inHomeDisplayList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class ohPrimaryLine : mspElectricLine {
        
        /// <remarks/>
        public string lengthSrc;
        
        /// <remarks/>
        public voltage operatingVoltage;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ugPrimaryLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ohTransmissionLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ohSecondaryLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ugTransmissionLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ugSecondaryLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ohPrimaryLine))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public abstract partial class mspElectricLine : mspConnectivityLine {
        
        /// <remarks/>
        public phaseCode phaseCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseCodeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public phaseItem[] phaseList;
        
        /// <remarks/>
        public length condLength;
        
        /// <remarks/>
        public eaEquipID construction;
        
        /// <remarks/>
        public mspLoadGroup load;
        
        /// <remarks/>
        public objectRef equipmentContainerID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class phaseItem {
        
        /// <remarks/>
        public mspPhase phase;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseSpecified;
        
        /// <remarks/>
        public eaEquipID conductorType;
        
        /// <remarks/>
        public string positionNumber;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class length {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public lengthUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspElectricLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ugPrimaryLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ohTransmissionLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ohSecondaryLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ugTransmissionLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ugSecondaryLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ohPrimaryLine))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public abstract partial class mspConnectivityLine : mspLineObject {
        
        /// <remarks/>
        public string gridLocation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public genericAnnotationFeature[] annotationList;
        
        /// <remarks/>
        public string sectionID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("parentSectionID")]
        public objectRef[] parentSectionID;
        
        /// <remarks/>
        public nodeIdentifier fromNodeID;
        
        /// <remarks/>
        public nodeIdentifier toNodeID;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(genericLineFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(spanGuy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspConnectivityLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(mspElectricLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ugPrimaryLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ohTransmissionLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ohSecondaryLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ugTransmissionLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ugSecondaryLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ohPrimaryLine))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public abstract partial class mspLineObject : mspObject {
        
        /// <remarks/>
        public LineStringType GMLLine;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class genericLineFeature : mspLineObject {
        
        /// <remarks/>
        public string featureType;
        
        /// <remarks/>
        public string featureSubtype;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class spanGuy : mspLineObject {
        
        /// <remarks/>
        public height attachmentHeight;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class ugPrimaryLine : mspElectricLine {
        
        /// <remarks/>
        public voltage operatingVoltage;
        
        /// <remarks/>
        public bool isInConduit;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isInConduitSpecified;
        
        /// <remarks/>
        public string manufacturer;
        
        /// <remarks/>
        public string lengthSrc;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class ohTransmissionLine : mspElectricLine {
        
        /// <remarks/>
        public voltage operatingVoltage;
        
        /// <remarks/>
        public apparentPower1 rating;
        
        /// <remarks/>
        public string lengthSrc;
        
        /// <remarks/>
        public string baseVoltageID;
        
        /// <remarks/>
        public lineImpedances lineImpedances;
        
        /// <remarks/>
        public string lineID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class lineImpedances {
        
        /// <remarks/>
        public susceptance1 bch;
        
        /// <remarks/>
        public resistance1 r;
        
        /// <remarks/>
        public reactance1 x;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class ohSecondaryLine : mspElectricLine {
        
        /// <remarks/>
        public secondaryType secondaryType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool secondaryTypeSpecified;
        
        /// <remarks/>
        public voltage operatingVoltage;
        
        /// <remarks/>
        public string lengthSrc;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum secondaryType {
        
        /// <remarks/>
        Underbuild,
        
        /// <remarks/>
        Secondary,
        
        /// <remarks/>
        Service,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class ugTransmissionLine : mspElectricLine {
        
        /// <remarks/>
        public voltage operatingVoltage;
        
        /// <remarks/>
        public apparentPower1 rating;
        
        /// <remarks/>
        public string lengthSrc;
        
        /// <remarks/>
        public string baseVoltageID;
        
        /// <remarks/>
        public lineImpedances lineImpedances;
        
        /// <remarks/>
        public string lineID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class ugSecondaryLine : mspElectricLine {
        
        /// <remarks/>
        public voltage operatingVOltage;
        
        /// <remarks/>
        public uGSecType uGSecType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool uGSecTypeSpecified;
        
        /// <remarks/>
        public bool isInConduit;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isInConduitSpecified;
        
        /// <remarks/>
        public string manufacturer;
        
        /// <remarks/>
        public string lengthSrc;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum uGSecType {
        
        /// <remarks/>
        Secondary,
        
        /// <remarks/>
        Service,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class outageDetectionDevice : mspPointObject {
        
        /// <remarks/>
        public string serialNumber;
        
        /// <remarks/>
        public outageDetectDeviceType outageDetectDeviceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool outageDetectDeviceTypeSpecified;
        
        /// <remarks/>
        public string manufacturer;
        
        /// <remarks/>
        public long phases;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phasesSpecified;
        
        /// <remarks/>
        public phaseCode phaseCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseCodeSpecified;
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public outageDetectDeviceStatus outageDetectDeviceStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool outageDetectDeviceStatusSpecified;
        
        /// <remarks/>
        public assetFields assetFields;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum outageDetectDeviceType {
        
        /// <remarks/>
        Call,
        
        /// <remarks/>
        CustomerServiceRep,
        
        /// <remarks/>
        InboundTelephoneDevice,
        
        /// <remarks/>
        Meter,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum outageDetectDeviceStatus {
        
        /// <remarks/>
        InService,
        
        /// <remarks/>
        OutofService,
        
        /// <remarks/>
        Defective,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class parcel : mspPolygonObject {
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public string owner;
        
        /// <remarks/>
        public string section;
        
        /// <remarks/>
        public string township;
        
        /// <remarks/>
        public string range;
        
        /// <remarks/>
        public string legalDescription;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("premiseID", IsNullable=false)]
        public string[] premiseList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public premise[] premiseObjectList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class premise : mspPointObject {
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public string owner;
        
        /// <remarks/>
        public string parcelID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public premiseService[] premiseServiceList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public serviceLocation[] serviceLocations;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class premiseService {
        
        /// <remarks/>
        public serviceID serviceID;
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public string accountNumber;
        
        /// <remarks/>
        public string customerID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class serviceLocation : mspPointObject {
        
        /// <remarks/>
        public string customerID;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public string facilityName;
        
        /// <remarks/>
        public address serviceAddress;
        
        /// <remarks/>
        public string SIC;
        
        /// <remarks/>
        public string siteID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public graphicSymbol[] graphicSymbolList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public genericAnnotationFeature[] annotationList;
        
        /// <remarks/>
        public network network;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public electricService[] electricServiceList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public waterService[] waterServiceList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public gasService[] gasServiceList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public propaneService[] propaneServiceList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public otherService[] otherServiceList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public phoneNumber[] phoneList;
        
        /// <remarks/>
        public string specialNeeds;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public serviceOrder[] serviceOrderList;
        
        /// <remarks/>
        public workList workList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public workOrder[] workOrderList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public maintenanceOrder[] maintenanceOrderList;
        
        /// <remarks/>
        public contactInfo contactInfo;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class network {
        
        /// <remarks/>
        public string boardDist;
        
        /// <remarks/>
        public string taxDist;
        
        /// <remarks/>
        public string franchiseDist;
        
        /// <remarks/>
        public string schoolDist;
        
        /// <remarks/>
        public string district;
        
        /// <remarks/>
        public string county;
        
        /// <remarks/>
        public string cityCode;
        
        /// <remarks/>
        public string city;
        
        /// <remarks/>
        public string state;
        
        /// <remarks/>
        public string postalCode;
        
        /// <remarks/>
        public string country;
        
        /// <remarks/>
        public string section;
        
        /// <remarks/>
        public string township;
        
        /// <remarks/>
        public string range;
        
        /// <remarks/>
        public string subdivision;
        
        /// <remarks/>
        public string block;
        
        /// <remarks/>
        public string lot;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class electricService : mspObject {
        
        /// <remarks/>
        public string sectionID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("parentSectionID")]
        public objectRef[] parentSectionID;
        
        /// <remarks/>
        public nodeIdentifier fromNodeID;
        
        /// <remarks/>
        public nodeIdentifier toNodeID;
        
        /// <remarks/>
        public string customerID;
        
        /// <remarks/>
        public string accountNumber;
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public string meterBaseID;
        
        /// <remarks/>
        public string electricMeterID;
        
        /// <remarks/>
        public electricLocationFields electricLocationFields;
        
        /// <remarks/>
        public powerStatus outageStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool outageStatusSpecified;
        
        /// <remarks/>
        public string specialNeeds;
        
        /// <remarks/>
        public string connection;
        
        /// <remarks/>
        public string loadMgmt;
        
        /// <remarks/>
        public bool isCogenerationSite;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isCogenerationSiteSpecified;
        
        /// <remarks/>
        public mspLoadGroup load;
        
        /// <remarks/>
        public string woNumber;
        
        /// <remarks/>
        public string soNumber;
        
        /// <remarks/>
        public string revenueClass;
        
        /// <remarks/>
        public string serviceStatus;
        
        /// <remarks/>
        public string billingCycle;
        
        /// <remarks/>
        public string route;
        
        /// <remarks/>
        public string budgetBill;
        
        /// <remarks/>
        public System.DateTime shutOffDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool shutOffDateSpecified;
        
        /// <remarks/>
        public System.DateTime connectDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool connectDateSpecified;
        
        /// <remarks/>
        public System.DateTime disconnectDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool disconnectDateSpecified;
        
        /// <remarks/>
        public meterBase meterBase;
        
        /// <remarks/>
        public string rateCode;
        
        /// <remarks/>
        public string serviceSubType;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum powerStatus {
        
        /// <remarks/>
        PowerOff,
        
        /// <remarks/>
        PowerOn,
        
        /// <remarks/>
        StatusUnknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class waterService : mspObject {
        
        /// <remarks/>
        public string customerID;
        
        /// <remarks/>
        public string accountNumber;
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public string waterMeterID;
        
        /// <remarks/>
        public waterLocationFields waterLocationFields;
        
        /// <remarks/>
        public string woNumber;
        
        /// <remarks/>
        public string soNumber;
        
        /// <remarks/>
        public string revenueClass;
        
        /// <remarks/>
        public string serviceStatus;
        
        /// <remarks/>
        public string billingCycle;
        
        /// <remarks/>
        public string route;
        
        /// <remarks/>
        public string budgetbill;
        
        /// <remarks/>
        public System.DateTime shutOffDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool shutOffDateSpecified;
        
        /// <remarks/>
        public System.DateTime connectDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool connectDateSpecified;
        
        /// <remarks/>
        public System.DateTime disconnectDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool disconnectDateSpecified;
        
        /// <remarks/>
        public waterMeter waterMeter;
        
        /// <remarks/>
        public string rateCode;
        
        /// <remarks/>
        public string serviceSubType;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class gasService : mspObject {
        
        /// <remarks/>
        public string customerID;
        
        /// <remarks/>
        public string accountNumber;
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public string gasMeterID;
        
        /// <remarks/>
        public gasLocationFields gasLocationFields;
        
        /// <remarks/>
        public string woNumber;
        
        /// <remarks/>
        public string soNumber;
        
        /// <remarks/>
        public string revenueClass;
        
        /// <remarks/>
        public string serviceStatus;
        
        /// <remarks/>
        public string billingCycle;
        
        /// <remarks/>
        public string route;
        
        /// <remarks/>
        public string budgetBill;
        
        /// <remarks/>
        public System.DateTime shutOffDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool shutOffDateSpecified;
        
        /// <remarks/>
        public System.DateTime connectDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool connectDateSpecified;
        
        /// <remarks/>
        public System.DateTime disconnectDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool disconnectDateSpecified;
        
        /// <remarks/>
        public gasMeter gasMeter;
        
        /// <remarks/>
        public string rateCode;
        
        /// <remarks/>
        public string serviceSubType;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class propaneService : mspObject {
        
        /// <remarks/>
        public string customerID;
        
        /// <remarks/>
        public string accountNumber;
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public string propaneMeterID;
        
        /// <remarks/>
        public propaneLocationFields propaneLocationFields;
        
        /// <remarks/>
        public string woNumber;
        
        /// <remarks/>
        public string soNumber;
        
        /// <remarks/>
        public string revenueClass;
        
        /// <remarks/>
        public string serviceStatus;
        
        /// <remarks/>
        public string billingCycle;
        
        /// <remarks/>
        public string route;
        
        /// <remarks/>
        public string budgetBill;
        
        /// <remarks/>
        public System.DateTime shutOffDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool shutOffDateSpecified;
        
        /// <remarks/>
        public System.DateTime connectDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool connectDateSpecified;
        
        /// <remarks/>
        public System.DateTime disconnectDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool disconnectDateSpecified;
        
        /// <remarks/>
        public propaneMeter propaneMeter;
        
        /// <remarks/>
        public string rateCode;
        
        /// <remarks/>
        public string serviceSubType;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class otherService : mspObject {
        
        /// <remarks/>
        public serviceType serviceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool serviceTypeSpecified;
        
        /// <remarks/>
        public string customerID;
        
        /// <remarks/>
        public string accountNumber;
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public string otherMeterID;
        
        /// <remarks/>
        public otherLocationFields otherLocationFields;
        
        /// <remarks/>
        public string woNumber;
        
        /// <remarks/>
        public string soNumber;
        
        /// <remarks/>
        public string revenueClass;
        
        /// <remarks/>
        public string serviceStatus;
        
        /// <remarks/>
        public string billingCycle;
        
        /// <remarks/>
        public string route;
        
        /// <remarks/>
        public string budgetBill;
        
        /// <remarks/>
        public System.DateTime shutOffDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool shutOffDateSpecified;
        
        /// <remarks/>
        public System.DateTime connectDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool connectDateSpecified;
        
        /// <remarks/>
        public System.DateTime disconnectDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool disconnectDateSpecified;
        
        /// <remarks/>
        public otherMeter otherMeter;
        
        /// <remarks/>
        public string rateCode;
        
        /// <remarks/>
        public string serviceSubType;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class phoneNumber {
        
        /// <remarks/>
        public telephoneNumber phone;
        
        /// <remarks/>
        public phoneType phoneType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phoneTypeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string priorityOrder;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum phoneType {
        
        /// <remarks/>
        Home,
        
        /// <remarks/>
        Business,
        
        /// <remarks/>
        Mobile,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Business mobile")]
        Businessmobile,
        
        /// <remarks/>
        Pager,
        
        /// <remarks/>
        Fax,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class serviceOrder : mspObject {
        
        /// <remarks/>
        public string projectID;
        
        /// <remarks/>
        public string woNumber;
        
        /// <remarks/>
        public string soNumber;
        
        /// <remarks/>
        public soStatusCode soStatusCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool soStatusCodeSpecified;
        
        /// <remarks/>
        public string soType;
        
        /// <remarks/>
        public string soDescription;
        
        /// <remarks/>
        public string customerID;
        
        /// <remarks/>
        public string accountNumber;
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public network network;
        
        /// <remarks/>
        public System.DateTime startDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startDateSpecified;
        
        /// <remarks/>
        public System.DateTime closeDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool closeDateSpecified;
        
        /// <remarks/>
        public string crewID;
        
        /// <remarks/>
        public string workedBy;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public associatedMeters[] associatedMetersList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public securityLight[] securityLights;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public statusOfService[] serviceStatuses;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public equipmentStatus[] equipmentStatuses;
        
        /// <remarks/>
        public otherIdentificationFields otherIdentificationFields;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum soStatusCode {
        
        /// <remarks/>
        Active,
        
        /// <remarks/>
        Closed,
        
        /// <remarks/>
        OnHold,
        
        /// <remarks/>
        Cancelled,
        
        /// <remarks/>
        Enroute,
        
        /// <remarks/>
        Onsite,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class associatedMeters : mspObject {
        
        /// <remarks/>
        public existingMeter existingMeter;
        
        /// <remarks/>
        public replacementMeter replacementMeter;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class existingMeter {
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public string meterType;
        
        /// <remarks/>
        public serviceType serviceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool serviceTypeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public readingValue[] readingValues;
        
        /// <remarks/>
        public string actionTaken;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class replacementMeter {
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public string meterType;
        
        /// <remarks/>
        public serviceType serviceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool serviceTypeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public readingValue[] readingValues;
        
        /// <remarks/>
        public string actionTaken;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class statusOfService {
        
        /// <remarks/>
        public serviceType serviceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool serviceTypeSpecified;
        
        /// <remarks/>
        public actionTaken actionTaken;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool actionTakenSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class equipmentStatus {
        
        /// <remarks/>
        public string equipmentType;
        
        /// <remarks/>
        public actionTaken actionTaken;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool actionTakenSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class otherIdentificationFields {
        
        /// <remarks/>
        public long deptCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool deptCodeSpecified;
        
        /// <remarks/>
        public string actCode;
        
        /// <remarks/>
        public long acNo;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool acNoSpecified;
        
        /// <remarks/>
        public long budgetCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool budgetCodeSpecified;
        
        /// <remarks/>
        public string warehouseID;
        
        /// <remarks/>
        public long grpCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool grpCodeSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class workList {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("workID")]
        public string[] workID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("work")]
        public work[] work;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class work : mspObject {
        
        /// <remarks/>
        public string projectID;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public string statusCode;
        
        /// <remarks/>
        public string customerID;
        
        /// <remarks/>
        public string accountNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public taskListItem[] taskList;
        
        /// <remarks/>
        public locationFields locationFields;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public workTask[] tasks;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public switchingSchedule[] switchingScheduleList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public switchingStep[] switchingStepList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class taskListItem {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string sequenceNumber;
        
        /// <remarks/>
        public string workTaskID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class locationFields {
        
        /// <remarks/>
        public string county;
        
        /// <remarks/>
        public string section;
        
        /// <remarks/>
        public string township;
        
        /// <remarks/>
        public string range;
        
        /// <remarks/>
        public string townshipName;
        
        /// <remarks/>
        public string subdivision;
        
        /// <remarks/>
        public string block;
        
        /// <remarks/>
        public string lot;
        
        /// <remarks/>
        public string boardDist;
        
        /// <remarks/>
        public string taxDist;
        
        /// <remarks/>
        public string franchiseDist;
        
        /// <remarks/>
        public string schoolDist;
        
        /// <remarks/>
        public string district;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class workTask : mspObject {
        
        /// <remarks/>
        public multiPartIdentifier taskIdentifier;
        
        /// <remarks/>
        public System.DateTime createdDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool createdDateSpecified;
        
        /// <remarks/>
        public string action;
        
        /// <remarks/>
        public string priority;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public scheduleRequest[] scheduleRequests;
        
        /// <remarks/>
        public workLocation workLocation;
        
        /// <remarks/>
        public taskAggregation taskAggregation;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class multiPartIdentifier {
        
        /// <remarks/>
        public objectRef taskID;
        
        /// <remarks/>
        public string primaryIdentifier;
        
        /// <remarks/>
        public string secondaryIdentifier;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string identifierType;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class scheduleRequest {
        
        /// <remarks/>
        public requestByType requestByType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool requestByTypeSpecified;
        
        /// <remarks/>
        public System.DateTime requestByValue;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool requestByValueSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum requestByType {
        
        /// <remarks/>
        Before,
        
        /// <remarks/>
        On,
        
        /// <remarks/>
        After,
        
        /// <remarks/>
        Immediate,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class workLocation {
        
        /// <remarks/>
        public address address;
        
        /// <remarks/>
        public geometry geometry;
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public serviceID serviceID;
        
        /// <remarks/>
        public string gridLocation;
        
        /// <remarks/>
        public string locationComment;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("locationReference", IsNullable=false)]
        public objectRef[] locationReferences;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class geometry {
        
        /// <remarks/>
        public GMLLocation GMLLocation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public GMLLine[] GMLLines;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public GMLPolygon[] GMLPolygons;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class taskAggregation : mspObject {
        
        /// <remarks/>
        public string workTaskID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("skillID", IsNullable=false)]
        public string[] skillsList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("equipmentID", IsNullable=false)]
        public string[] equipmentList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("vehicleID", IsNullable=false)]
        public string[] vehicleList;
        
        /// <remarks/>
        public pickList pickList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class pickList {
        
        /// <remarks/>
        public extensions extensions;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public extensionsItem[] extensionsList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public pickListItem[] pickListItems;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class pickListItem {
        
        /// <remarks/>
        public extensions extensions;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public extensionsItem[] extensionsList;
        
        /// <remarks/>
        public string materialItemID;
        
        /// <remarks/>
        public string stockNumber;
        
        /// <remarks/>
        public float quantity;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool quantitySpecified;
        
        /// <remarks/>
        public unitActn unitAction;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitActionSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum unitActn {
        
        /// <remarks/>
        C,
        
        /// <remarks/>
        R,
        
        /// <remarks/>
        E,
        
        /// <remarks/>
        T,
        
        /// <remarks/>
        S,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class switchingSchedule : mspObject {
        
        /// <remarks/>
        public string workID;
        
        /// <remarks/>
        public string resourceID;
        
        /// <remarks/>
        public System.DateTime startDateTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startDateTimeSpecified;
        
        /// <remarks/>
        public System.DateTime endDateTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool endDateTimeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public switchingStep[] switchingSteps;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class switchingStep {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string stepNumber;
        
        /// <remarks/>
        public string operation;
        
        /// <remarks/>
        public string deviceDescription;
        
        /// <remarks/>
        public objectRef deviceID;
        
        /// <remarks/>
        public workLocation workLocation;
        
        /// <remarks/>
        public string desiredEndState;
        
        /// <remarks/>
        public string resourceID;
        
        /// <remarks/>
        public string workID;
        
        /// <remarks/>
        public string instructedBy;
        
        /// <remarks/>
        public System.DateTime instructedDateTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool instructedDateTimeSpecified;
        
        /// <remarks/>
        public string completedBy;
        
        /// <remarks/>
        public System.DateTime completedDateTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool completedDateTimeSpecified;
        
        /// <remarks/>
        public string stepStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public clearance[] clearanceList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class clearance : mspObject {
        
        /// <remarks/>
        public string purpose;
        
        /// <remarks/>
        public string clearanceGivenTo;
        
        /// <remarks/>
        public System.DateTime issuedDateTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool issuedDateTimeSpecified;
        
        /// <remarks/>
        public System.DateTime releasedDateTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool releasedDateTimeSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class workOrder : mspObject {
        
        /// <remarks/>
        public string projectID;
        
        /// <remarks/>
        public string woNumber;
        
        /// <remarks/>
        public string jobNumber;
        
        /// <remarks/>
        public string jobDescr;
        
        /// <remarks/>
        public string workflowStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public design[] designs;
        
        /// <remarks/>
        public customer customer;
        
        /// <remarks/>
        public string accountNumber;
        
        /// <remarks/>
        public locationFields locationFields;
        
        /// <remarks/>
        public voltage systemVolts;
        
        /// <remarks/>
        public string contractor;
        
        /// <remarks/>
        public telephoneNumber contractorPhone;
        
        /// <remarks/>
        public string electrician;
        
        /// <remarks/>
        public telephoneNumber electricianPhone;
        
        /// <remarks/>
        public string woType;
        
        /// <remarks/>
        public string cd740c;
        
        /// <remarks/>
        public string ext740c;
        
        /// <remarks/>
        public string loanNo;
        
        /// <remarks/>
        public string cwpYr;
        
        /// <remarks/>
        public string cwpCd;
        
        /// <remarks/>
        public string budgetPur;
        
        /// <remarks/>
        public string engrAsnd;
        
        /// <remarks/>
        public long cfmsCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool cfmsCodeSpecified;
        
        /// <remarks/>
        public long acNo;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool acNoSpecified;
        
        /// <remarks/>
        public long budgetCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool budgetCodeSpecified;
        
        /// <remarks/>
        public string actCode;
        
        /// <remarks/>
        public long deptCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool deptCodeSpecified;
        
        /// <remarks/>
        public string warehouseID;
        
        /// <remarks/>
        public long grpCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool grpCodeSpecified;
        
        /// <remarks/>
        public string crewID;
        
        /// <remarks/>
        public System.DateTime startDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startDateSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        public System.DateTime clsDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool clsDateSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        public System.DateTime estDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool estDateSpecified;
        
        /// <remarks/>
        public actionCode actionCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool actionCodeSpecified;
        
        /// <remarks/>
        public string laborCategoryID;
        
        /// <remarks/>
        public money atc;
        
        /// <remarks/>
        public loadDistrict loadDistrict;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool loadDistrictSpecified;
        
        /// <remarks/>
        public constGrade constGrade;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool constGradeSpecified;
        
        /// <remarks/>
        public duration duration;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public attachment[] attachments;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public locationAssociation[] locationAssociations;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public workHistoryEvent[] workHistoryEvents;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public serviceOrderNumber[] serviceOrderNumbers;
        
        /// <remarks/>
        public string gridLocation;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class design : mspObject {
        
        /// <remarks/>
        public designIdentifier designIdentifier;
        
        /// <remarks/>
        public string designRole;
        
        /// <remarks/>
        public string workflowStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public station[] stationList;
        
        /// <remarks/>
        public backgroundGraphics backgroundGraphics;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public attachment[] attachments;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class designIdentifier {
        
        /// <remarks/>
        public string designNumber;
        
        /// <remarks/>
        public string extension;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class station : mspMultiGeometryObject {
        
        /// <remarks/>
        public graphicSymbol graphicSymbol;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public genericAnnotationFeature[] annotationList;
        
        /// <remarks/>
        public string substationCode;
        
        /// <remarks/>
        public string feeder;
        
        /// <remarks/>
        public phaseCode phaseCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseCodeSpecified;
        
        /// <remarks/>
        public poleUse poleUse;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool poleUseSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public backSpan[] backSpanList;
        
        /// <remarks/>
        public constTypeCode constTyp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool constTypSpecified;
        
        /// <remarks/>
        public staStatus staStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool staStatusSpecified;
        
        /// <remarks/>
        public constGrade constGrade;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool constGradeSpecified;
        
        /// <remarks/>
        public float angle;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool angleSpecified;
        
        /// <remarks/>
        public bool isTap;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isTapSpecified;
        
        /// <remarks/>
        public string terrain;
        
        /// <remarks/>
        public GPSLocation GPSLocation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public assembly[] assemblyList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public CPR[] CPRList;
        
        /// <remarks/>
        public physicalObjectList objectList;
        
        /// <remarks/>
        public pickList pickList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public attachment[] attachments;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum poleUse {
        
        /// <remarks/>
        Distribution,
        
        /// <remarks/>
        Transmission,
        
        /// <remarks/>
        Service,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Guy Stub")]
        GuyStub,
        
        /// <remarks/>
        Stub,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class backSpan {
        
        /// <remarks/>
        public length length;
        
        /// <remarks/>
        public string stationID;
        
        /// <remarks/>
        public unitActn unitAction;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitActionSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum constTypeCode {
        
        /// <remarks/>
        Hot,
        
        /// <remarks/>
        Cold,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum staStatus {
        
        /// <remarks/>
        C,
        
        /// <remarks/>
        R,
        
        /// <remarks/>
        E,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum constGrade {
        
        /// <remarks/>
        GradeB,
        
        /// <remarks/>
        GradeC,
        
        /// <remarks/>
        GradeN,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class assembly {
        
        /// <remarks/>
        public extensions extensions;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public extensionsItem[] extensionsList;
        
        /// <remarks/>
        public string featureType;
        
        /// <remarks/>
        public string featureID;
        
        /// <remarks/>
        public string unitCode;
        
        /// <remarks/>
        public unitActn unitAction;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitActionSpecified;
        
        /// <remarks/>
        public spanTyp spanType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool spanTypeSpecified;
        
        /// <remarks/>
        public length unitLength;
        
        /// <remarks/>
        public string poleVar;
        
        /// <remarks/>
        public string wireVar;
        
        /// <remarks/>
        public string neutVar;
        
        /// <remarks/>
        public string miscVar;
        
        /// <remarks/>
        public float quantity;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool quantitySpecified;
        
        /// <remarks/>
        public height poleHeight;
        
        /// <remarks/>
        public poleClass poleClass;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool poleClassSpecified;
        
        /// <remarks/>
        public poleType poleType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool poleTypeSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum spanTyp {
        
        /// <remarks/>
        Primary,
        
        /// <remarks/>
        Secondary,
        
        /// <remarks/>
        Service,
        
        /// <remarks/>
        Underbuild,
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum poleClass {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Class 1")]
        Class1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Class 2")]
        Class2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Class 3")]
        Class3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Class 4")]
        Class4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Class 5")]
        Class5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Class 6")]
        Class6,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Class 7")]
        Class7,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Class 8")]
        Class8,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Class 9")]
        Class9,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Class 10")]
        Class10,
        
        /// <remarks/>
        H1,
        
        /// <remarks/>
        H2,
        
        /// <remarks/>
        H3,
        
        /// <remarks/>
        H4,
        
        /// <remarks/>
        H5,
        
        /// <remarks/>
        H6,
        
        /// <remarks/>
        H7,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum poleType {
        
        /// <remarks/>
        Aluminum,
        
        /// <remarks/>
        Concrete,
        
        /// <remarks/>
        Fiberglass,
        
        /// <remarks/>
        Galvanized,
        
        /// <remarks/>
        Steel,
        
        /// <remarks/>
        Wood,
        
        /// <remarks/>
        WoodTreated,
        
        /// <remarks/>
        WoodUntreated,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class CPR {
        
        /// <remarks/>
        public extensions extensions;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public extensionsItem[] extensionsList;
        
        /// <remarks/>
        public string acctCode;
        
        /// <remarks/>
        public float quantity;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool quantitySpecified;
        
        /// <remarks/>
        public length length;
        
        /// <remarks/>
        public unitActn unitAction;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitActionSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class physicalObjectList {
        
        /// <remarks/>
        public extensions extensions;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public extensionsItem[] extensionsList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("anchor")]
        public anchor[] anchor;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("breaker")]
        public breaker[] breaker;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("capacitor")]
        public capacitor[] capacitor;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("capacitorBank")]
        public capacitorBank[] capacitorBank;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CDDevice")]
        public CDDevice[] CDDevice;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("cut")]
        public cut[] cut;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("elbow")]
        public elbow[] elbow;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("electricMeter")]
        public electricMeter[] electricMeter;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("fuse")]
        public fuse[] fuse;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("gasMeter")]
        public gasMeter[] gasMeter;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("guy")]
        public guy[] guy;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("inductionMachine")]
        public inductionMachine[] inductionMachine;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("inHomeDisplay")]
        public inHomeDisplay[] inHomeDisplay;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("jumper")]
        public jumper[] jumper;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("loadManagementDevice")]
        public loadManagementDevice[] loadManagementDevice;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("measurementDevice")]
        public measurementDevice[] measurementDevice;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("meterBase")]
        public meterBase[] meterBase;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("module")]
        public module[] module;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ohPrimaryLine")]
        public ohPrimaryLine[] ohPrimaryLine;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ohSecondaryLine")]
        public ohSecondaryLine[] ohSecondaryLine;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ohTransmissionLine")]
        public ohTransmissionLine[] ohTransmissionLine;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("outageDetectionDevice")]
        public outageDetectionDevice[] outageDetectionDevice;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("overcurrentDeviceBank")]
        public overcurrentDeviceBank[] overcurrentDeviceBank;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("parcel")]
        public parcel[] parcel;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("pole")]
        public pole[] pole;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("powerMonitor")]
        public powerMonitor[] powerMonitor;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("powerSystemDevice")]
        public powerSystemDevice[] powerSystemDevice;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("premise")]
        public premise[] premise;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("primaryCabinet")]
        public primaryCabinet[] primaryCabinet;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("propaneMeter")]
        public propaneMeter[] propaneMeter;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("recloser")]
        public recloser[] recloser;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("regulator")]
        public regulator[] regulator;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("regulatorBank")]
        public regulatorBank[] regulatorBank;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("riser")]
        public riser[] riser;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("secondaryJunctionBox")]
        public secondaryJunctionBox[] secondaryJunctionBox;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("sectionalizer")]
        public sectionalizer[] sectionalizer;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("securityLight")]
        public securityLight[] securityLight;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("serviceLocation")]
        public serviceLocation[] serviceLocation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("spanGuy")]
        public spanGuy[] spanGuy;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("streetLight")]
        public streetLight[] streetLight;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("substation")]
        public substation[] substation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("surgeArrestor")]
        public surgeArrestor[] surgeArrestor;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("switch")]
        public @switch[] @switch;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("switchingDeviceBank")]
        public switchingDeviceBank[] switchingDeviceBank;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("synchronousMachine")]
        public synchronousMachine[] synchronousMachine;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("trafficLight")]
        public trafficLight[] trafficLight;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("transformer")]
        public transformer[] transformer;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("transformerBank")]
        public transformerBank[] transformerBank;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ugPrimaryLine")]
        public ugPrimaryLine[] ugPrimaryLine;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ugSecondaryLine")]
        public ugSecondaryLine[] ugSecondaryLine;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ugTransmissionLine")]
        public ugTransmissionLine[] ugTransmissionLine;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("waterMeter")]
        public waterMeter[] waterMeter;
        
        /// <remarks/>
        public CIMObjectList CIMObjectList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class pole : mspPointObject {
        
        /// <remarks/>
        public System.DateTime inspDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool inspDateSpecified;
        
        /// <remarks/>
        public string manufacturer;
        
        /// <remarks/>
        public System.DateTime mfgDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mfgDateSpecified;
        
        /// <remarks/>
        public string owner;
        
        /// <remarks/>
        public height poleHeight;
        
        /// <remarks/>
        public string poleNumber;
        
        /// <remarks/>
        public poleClass poleClass;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool poleClassSpecified;
        
        /// <remarks/>
        public poleType poleType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool poleTypeSpecified;
        
        /// <remarks/>
        public treatment poleTreatment;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool poleTreatmentSpecified;
        
        /// <remarks/>
        public poleUse poleUse;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool poleUseSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public jointUse[] jointUseList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public guy[] guyList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum treatment {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Butt,
        
        /// <remarks/>
        Natural,
        
        /// <remarks/>
        Penta,
        
        /// <remarks/>
        Creosote,
        
        /// <remarks/>
        CCA,
        
        /// <remarks/>
        Chemonite,
        
        /// <remarks/>
        Napthena,
        
        /// <remarks/>
        Cellon,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class jointUse {
        
        /// <remarks/>
        public string companyID;
        
        /// <remarks/>
        public string jUseType;
        
        /// <remarks/>
        public height jUseHeight;
        
        /// <remarks/>
        public bool isGuyed;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isGuyedSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class powerMonitor : mspObject {
        
        /// <remarks/>
        public System.DateTime callTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool callTimeSpecified;
        
        /// <remarks/>
        public telephoneNumber telephoneNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string recordNum;
        
        /// <remarks/>
        public pmEventCode eventCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool eventCodeSpecified;
        
        /// <remarks/>
        public voltage voltage;
        
        /// <remarks/>
        public bool ack;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ackSpecified;
        
        /// <remarks/>
        public string ackBy;
        
        /// <remarks/>
        public System.DateTime ackTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ackTimeSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum pmEventCode {
        
        /// <remarks/>
        LowBattery,
        
        /// <remarks/>
        Event1,
        
        /// <remarks/>
        Event2,
        
        /// <remarks/>
        Event3,
        
        /// <remarks/>
        LockOut,
        
        /// <remarks/>
        PowerRestored,
        
        /// <remarks/>
        UndeterminedOn,
        
        /// <remarks/>
        UndeterminedOff,
        
        /// <remarks/>
        BrownOut,
        
        /// <remarks/>
        HighVoltage,
        
        /// <remarks/>
        NormalVoltage,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class powerSystemDevice : mspPointObject {
        
        /// <remarks/>
        public string deviceDescription;
        
        /// <remarks/>
        public assetFields assetFields;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class primaryCabinet : mspPointObject {
        
        /// <remarks/>
        public string structType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("cabinetContentsItem", IsNullable=false)]
        public objectRef[] cabinetContentsList;
        
        /// <remarks/>
        public assetFields assetFields;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class riser : mspPointObject {
        
        /// <remarks/>
        public string constType;
        
        /// <remarks/>
        public height riserHeight;
        
        /// <remarks/>
        public string material;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class secondaryJunctionBox : mspPointObject {
        
        /// <remarks/>
        public string junctionBoxType;
        
        /// <remarks/>
        public assetFields assetFields;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class substation : mspObject {
        
        /// <remarks/>
        public PolygonType GMLPolygon;
        
        /// <remarks/>
        public PointType GMLLocation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public genericAnnotationFeature[] annotationList;
        
        /// <remarks/>
        public string facilityID;
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public voltage busVolts;
        
        /// <remarks/>
        public voltage nominalVolts;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public feederObject[] feederList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("contentsItem", IsNullable=false)]
        public objectRef[] contentsList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Bay[] bayList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public VoltageLevel[] voltageLevels;
        
        /// <remarks/>
        public objectRef regionID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class feederObject : mspObject {
        
        /// <remarks/>
        public string substationName;
        
        /// <remarks/>
        public string feederName;
        
        /// <remarks/>
        public string feederNo;
        
        /// <remarks/>
        public string facilityID;
        
        /// <remarks/>
        public string feederColor;
        
        /// <remarks/>
        public string bus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("contentsItem", IsNullable=false)]
        public objectRef[] contentsList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class surgeArrestor : mspObject {
        
        /// <remarks/>
        public assetFields assetFields;
        
        /// <remarks/>
        public voltage ratedVoltage;
        
        /// <remarks/>
        public voltage continuousOperatingVoltage;
        
        /// <remarks/>
        public current nominalDischargeCurrent;
        
        /// <remarks/>
        public lineDischargeClass lineDischargeClass;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lineDischargeClassSpecified;
        
        /// <remarks/>
        public voltage impulseWithstand;
        
        /// <remarks/>
        public length creepageDistance;
        
        /// <remarks/>
        public length flashOverDistance;
        
        /// <remarks/>
        public current leakageCurrent;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum lineDischargeClass {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class CIMObjectList {
        
        /// <remarks/>
        public extensions extensions;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public extensionsItem[] extensionsList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Bay")]
        public Bay[] Bay;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("BusbarSection")]
        public BusbarSection[] BusbarSection;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Connector")]
        public Connector[] Connector;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("GeneratingUnit")]
        public GeneratingUnit[] GeneratingUnit;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("HydroGeneratingUnit")]
        public HydroGeneratingUnit[] HydroGeneratingUnit;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ThermalGeneratingUnit")]
        public ThermalGeneratingUnit[] ThermalGeneratingUnit;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("StaticVarCompensator")]
        public StaticVarCompensator[] StaticVarCompensator;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("TapChanger")]
        public TapChanger[] TapChanger;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("TransformerWinding")]
        public TransformerWinding[] TransformerWinding;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(station))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public abstract partial class mspMultiGeometryObject : mspObject {
        
        /// <remarks/>
        public geometry geometry;
        
        /// <remarks/>
        public string gridLocation;
        
        /// <remarks/>
        public float rotation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool rotationSpecified;
        
        /// <remarks/>
        public string facilityID;
        
        /// <remarks/>
        public string sectionID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("parentSectionID")]
        public objectRef[] parentSectionID;
        
        /// <remarks/>
        public nodeIdentifier fromNodeID;
        
        /// <remarks/>
        public nodeIdentifier toNodeID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class backgroundGraphics : mspObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public genericAnnotationFeature[] genericAnnotationFeatureList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public genericPointFeature[] genericPointFeatureList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public genericLineFeature[] genericLineFeatureList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public graphicSymbol[] graphicSymbolList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public genericPolygonFeature[] genericPolygonFeatureList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class genericPointFeature : mspPointObject {
        
        /// <remarks/>
        public string featureType;
        
        /// <remarks/>
        public string featureSubtype;
        
        /// <remarks/>
        public graphicSymbol graphicSymbol;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class genericPolygonFeature : mspPolygonObject {
        
        /// <remarks/>
        public string featureSubtype;
        
        /// <remarks/>
        public string featureType;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(genericPolygonFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(parcel))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public abstract partial class mspPolygonObject : mspObject {
        
        /// <remarks/>
        public GMLPolygon GMLPolygon;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class customer : mspPerson {
        
        /// <remarks/>
        public string dBAName;
        
        /// <remarks/>
        public string specialNeeds;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public account[] accounts;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public serviceOrder[] serviceOrderList;
        
        /// <remarks/>
        public workList workList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public workOrder[] workOrderList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public maintenanceOrder[] maintenanceOrderList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public alternateContact[] alternateContactList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class account : mspObject {
        
        /// <remarks/>
        public string customerID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public acctsReceivable[] accountsReceivable;
        
        /// <remarks/>
        public string billingCycle;
        
        /// <remarks/>
        public string budgetBill;
        
        /// <remarks/>
        public System.DateTime paymentDueDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool paymentDueDateSpecified;
        
        /// <remarks/>
        public System.DateTime lastPaymentDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lastPaymentDateSpecified;
        
        /// <remarks/>
        public money lastPaymentAmount;
        
        /// <remarks/>
        public System.DateTime billDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool billDateSpecified;
        
        /// <remarks/>
        public System.DateTime shutOffDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool shutOffDateSpecified;
        
        /// <remarks/>
        public bool isPrePay;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isPrePaySpecified;
        
        /// <remarks/>
        public string billingTerms;
        
        /// <remarks/>
        public money calculatedCurrentBillAmount;
        
        /// <remarks/>
        public System.DateTime calculatedCurrentBillDateTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool calculatedCurrentBillDateTimeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public meterReading[] calculatedCurrentBillReadings;
        
        /// <remarks/>
        public money lastBillAmount;
        
        /// <remarks/>
        public money calculatedUsedYesterday;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public serviceLocation[] serviceLocations;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public serviceOrder[] serviceOrderList;
        
        /// <remarks/>
        public workList workList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public workOrder[] workOrderList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public maintenanceOrder[] maintenanceOrderList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class acctsReceivable {
        
        /// <remarks/>
        public extensions extensions;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public extensionsItem[] extensionsList;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public money receivableAmount;
        
        /// <remarks/>
        public System.DateTime dueDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dueDateSpecified;
        
        /// <remarks/>
        public serviceType serviceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool serviceTypeSpecified;
        
        /// <remarks/>
        public receivableType receivableType;
        
        /// <remarks/>
        public string serviceLocationID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum receivableType {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Current,
        
        /// <remarks/>
        Balance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("30")]
        Item30,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("60")]
        Item60,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("90")]
        Item90,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class maintenanceOrder : mspObject {
        
        /// <remarks/>
        public string projectID;
        
        /// <remarks/>
        public soStatusCode moStatusCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool moStatusCodeSpecified;
        
        /// <remarks/>
        public string moType;
        
        /// <remarks/>
        public string moDescription;
        
        /// <remarks/>
        public string customerID;
        
        /// <remarks/>
        public string accountNumber;
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public System.DateTime startDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startDateSpecified;
        
        /// <remarks/>
        public System.DateTime closeDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool closeDateSpecified;
        
        /// <remarks/>
        public string crewID;
        
        /// <remarks/>
        public string workedBy;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public equipmentStatus[] equipmentStatuses;
        
        /// <remarks/>
        public otherIdentificationFields otherIdentificationFields;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class alternateContact {
        
        /// <remarks/>
        public string lastName;
        
        /// <remarks/>
        public string firstName;
        
        /// <remarks/>
        public string mName;
        
        /// <remarks/>
        public string prefix;
        
        /// <remarks/>
        public string suffix;
        
        /// <remarks/>
        public contactInfo contactInfo;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class contactInfo {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public phoneNumber[] phoneList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public eMailAddress[] eMailList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public addressItem[] addressList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public otherContactItem[] otherContactInformation;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class eMailAddress {
        
        /// <remarks/>
        public string eMail;
        
        /// <remarks/>
        public eMailType eMailType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool eMailTypeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string priorityOrder;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum eMailType {
        
        /// <remarks/>
        Personal,
        
        /// <remarks/>
        Business,
        
        /// <remarks/>
        Alternate,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class addressItem {
        
        /// <remarks/>
        public address address;
        
        /// <remarks/>
        public string addressType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string priorityOrder;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class otherContactItem {
        
        /// <remarks/>
        public string details;
        
        /// <remarks/>
        public string infoType;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(worker))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(customer))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public abstract partial class mspPerson : mspObject {
        
        /// <remarks/>
        public string lastName;
        
        /// <remarks/>
        public string firstName;
        
        /// <remarks/>
        public string mName;
        
        /// <remarks/>
        public string prefix;
        
        /// <remarks/>
        public string suffix;
        
        /// <remarks/>
        public string governmentID;
        
        /// <remarks/>
        public contactInfo contactInfo;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class worker : mspPerson {
        
        /// <remarks/>
        public bool isEmplyee;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isEmplyeeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("skillID", IsNullable=false)]
        public string[] skillsList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public skill[] skills;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class skill {
        
        /// <remarks/>
        public string category;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public System.DateTime certifiedDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool certifiedDateSpecified;
        
        /// <remarks/>
        public System.DateTime effectiveDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool effectiveDateSpecified;
        
        /// <remarks/>
        public System.DateTime expirationDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool expirationDateSpecified;
        
        /// <remarks/>
        public string level;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum actionCode {
        
        /// <remarks/>
        estimate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("CPR only")]
        CPRonly,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("material only")]
        materialonly,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("CPR and material")]
        CPRandmaterial,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum loadDistrict {
        
        /// <remarks/>
        Light,
        
        /// <remarks/>
        Medium,
        
        /// <remarks/>
        Heavy,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class locationAssociation {
        
        /// <remarks/>
        public string locationAssociationName;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public string locationAssociationValue;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class workHistoryEvent {
        
        /// <remarks/>
        public string workHistoryEventName;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public System.DateTime workHistoryEventTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool workHistoryEventTimeSpecified;
        
        /// <remarks/>
        public string responsibleParty;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class serviceOrderNumber {
        
        /// <remarks/>
        public string soNumber;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class scadaPoint : mspPointObject {
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public scadaPointType scadaPointType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool scadaPointTypeSpecified;
        
        /// <remarks/>
        public objectRef GISFeatureID;
        
        /// <remarks/>
        public string GISFeatureType;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum scadaPointType {
        
        /// <remarks/>
        status,
        
        /// <remarks/>
        analog,
        
        /// <remarks/>
        accumulator,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class thermostat : mspPointObject {
        
        /// <remarks/>
        public string manufacturer;
        
        /// <remarks/>
        public string serialNumber;
        
        /// <remarks/>
        public string deviceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public module[] moduleList;
        
        /// <remarks/>
        public utilityInfo utilityInfo;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class maintenanceDataSet : mspObject {
        
        /// <remarks/>
        public System.DateTime maintenanceDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maintenanceDateSpecified;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public itemMaintained[] itemsMaintained;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class itemMaintained {
        
        /// <remarks/>
        public objectRef itemIdentifier;
        
        /// <remarks/>
        public string maintenanceCode;
        
        /// <remarks/>
        public string conditionBefore;
        
        /// <remarks/>
        public string conditionAfter;
        
        /// <remarks/>
        public string remarks;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public measurement[] measurementList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class measurement : mspObject {
        
        /// <remarks/>
        public objectRef measurementDeviceID;
        
        /// <remarks/>
        public measurementItems measurementItems;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class measurementItems {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("analog")]
        public scadaAnalog[] analog;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("accumulator")]
        public accumulatedValue[] accumulator;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("discrete")]
        public Discrete[] discrete;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class accumulatedValue : mspObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string countedValue;
        
        /// <remarks/>
        public System.DateTime timeStamp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timeStampSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string ceilingValue;
        
        /// <remarks/>
        public bool latchesAtMaximum;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool latchesAtMaximumSpecified;
        
        /// <remarks/>
        public string measurementID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class inHomeDisplayGroup : mspObject {
        
        /// <remarks/>
        public string groupName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("inHomeDisplayID", IsNullable=false)]
        public string[] inHomeDisplayList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public inHomeDisplay[] inHomeDisplays;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class meterConnectivity : mspObject {
        
        /// <remarks/>
        public string outageRecordID;
        
        /// <remarks/>
        public System.DateTime eventTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool eventTimeSpecified;
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public string oldSubstation;
        
        /// <remarks/>
        public string oldFeederName;
        
        /// <remarks/>
        public phaseCode oldPhase;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool oldPhaseSpecified;
        
        /// <remarks/>
        public string newSubstation;
        
        /// <remarks/>
        public string newFeederName;
        
        /// <remarks/>
        public phaseCode newPhase;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool newPhaseSpecified;
        
        /// <remarks/>
        public string oldSubstationCode;
        
        /// <remarks/>
        public string oldFeederCode;
        
        /// <remarks/>
        public string newSubstationCode;
        
        /// <remarks/>
        public string newFeederCode;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class observationDefinition : mspObject {
        
        /// <remarks/>
        public System.Xml.XmlQualifiedName domain;
        
        /// <remarks/>
        public string conditionItem;
        
        /// <remarks/>
        public string itemStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string itemCondition;
        
        /// <remarks/>
        public string comment;
        
        /// <remarks/>
        public observedValue value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class observedValue {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uom units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class timesheet : mspObject {
        
        /// <remarks/>
        public timePeriod timePeriod;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public employeeTimeRecord[] employeeTimeRecordList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public jobWorked[] jobWorkedList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class employeeTimeRecord : mspObject {
        
        /// <remarks/>
        public string employeeID;
        
        /// <remarks/>
        public string employeeName;
        
        /// <remarks/>
        public float hoursWorked;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool hoursWorkedSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class jobWorked {
        
        /// <remarks/>
        public string woNumber;
        
        /// <remarks/>
        public string jobNumber;
        
        /// <remarks/>
        public string jobDescr;
        
        /// <remarks/>
        public float jobHours;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool jobHoursSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class customerCall : mspObject {
        
        /// <remarks/>
        public string customerID;
        
        /// <remarks/>
        public System.DateTime eventTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool eventTimeSpecified;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public string problemCode;
        
        /// <remarks/>
        public callType callType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool callTypeSpecified;
        
        /// <remarks/>
        public string takenBy;
        
        /// <remarks/>
        public priorityType callPriority;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool callPrioritySpecified;
        
        /// <remarks/>
        public outageLocation location;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public message[] messageList;
        
        /// <remarks/>
        public resolvedLevel resolvedLevel;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool resolvedLevelSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum callType {
        
        /// <remarks/>
        Call,
        
        /// <remarks/>
        CustomerServiceRep,
        
        /// <remarks/>
        InboundTelephoneDevice,
        
        /// <remarks/>
        Manual,
        
        /// <remarks/>
        IVR,
        
        /// <remarks/>
        Sensor,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum priorityType {
        
        /// <remarks/>
        Normal,
        
        /// <remarks/>
        NeedsAttention,
        
        /// <remarks/>
        Urgent,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class outageLocation : mspObject {
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public string accountNumber;
        
        /// <remarks/>
        public telephoneNumber telephoneNumber;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum resolvedLevel {
        
        /// <remarks/>
        Meter,
        
        /// <remarks/>
        Address,
        
        /// <remarks/>
        Unresolved,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class switchingOrder : mspObject {
        
        /// <remarks/>
        public string title;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public string purpose;
        
        /// <remarks/>
        public string revision;
        
        /// <remarks/>
        public string requestedBy;
        
        /// <remarks/>
        public System.DateTime requestedDateTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool requestedDateTimeSpecified;
        
        /// <remarks/>
        public string createdBy;
        
        /// <remarks/>
        public System.DateTime createdDateTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool createdDateTimeSpecified;
        
        /// <remarks/>
        public string checkedBy;
        
        /// <remarks/>
        public System.DateTime checkedDateTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool checkedDateTimeSpecified;
        
        /// <remarks/>
        public string releasedBy;
        
        /// <remarks/>
        public string releasedDateTime;
        
        /// <remarks/>
        public System.DateTime lastModifiedDateTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lastModifiedDateTimeSpecified;
        
        /// <remarks/>
        public string documentStatus;
        
        /// <remarks/>
        public switchingSchedule switchingSchedule;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class materialManagementAssembly : mspObject {
        
        /// <remarks/>
        public string unitCode;
        
        /// <remarks/>
        public string unDescr;
        
        /// <remarks/>
        public money unMatCost;
        
        /// <remarks/>
        public unType unType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unTypeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public CPR[] CPRList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public materialComponent[] materialComponentList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public laborComponent[] laborComponentList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum unType {
        
        /// <remarks/>
        Anc,
        
        /// <remarks/>
        Cnd,
        
        /// <remarks/>
        Guy,
        
        /// <remarks/>
        OhA,
        
        /// <remarks/>
        OhP,
        
        /// <remarks/>
        OhS,
        
        /// <remarks/>
        OhT,
        
        /// <remarks/>
        OH,
        
        /// <remarks/>
        Pol,
        
        /// <remarks/>
        Sub,
        
        /// <remarks/>
        UgA,
        
        /// <remarks/>
        UgP,
        
        /// <remarks/>
        UgS,
        
        /// <remarks/>
        UgT,
        
        /// <remarks/>
        UG,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class materialComponent {
        
        /// <remarks/>
        public extensions extensions;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public extensionsItem[] extensionsList;
        
        /// <remarks/>
        public string stockNumber;
        
        /// <remarks/>
        public float itemCount;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool itemCountSpecified;
        
        /// <remarks/>
        public string poleVar;
        
        /// <remarks/>
        public string wireVar;
        
        /// <remarks/>
        public string neutVar;
        
        /// <remarks/>
        public string miscVar;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class laborComponent {
        
        /// <remarks/>
        public extensions extensions;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public extensionsItem[] extensionsList;
        
        /// <remarks/>
        public string laborCategoryID;
        
        /// <remarks/>
        public float constMH;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool constMHSpecified;
        
        /// <remarks/>
        public float retireMH;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool retireMHSpecified;
        
        /// <remarks/>
        public float salvageMH;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool salvageMHSpecified;
        
        /// <remarks/>
        public float transferMH;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool transferMHSpecified;
        
        /// <remarks/>
        public float hotConstMH;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool hotConstMHSpecified;
        
        /// <remarks/>
        public float hotRetireMH;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool hotRetireMHSpecified;
        
        /// <remarks/>
        public float hotSalvageMH;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool hotSalvageMHSpecified;
        
        /// <remarks/>
        public float hotTransferMH;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool hotTransferMHSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class laborCategory : mspObject {
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public money installCost;
        
        /// <remarks/>
        public money retireCost;
        
        /// <remarks/>
        public money salvageCost;
        
        /// <remarks/>
        public money transferCost;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class materialItem : mspObject {
        
        /// <remarks/>
        public string stockNumber;
        
        /// <remarks/>
        public string stockDescr;
        
        /// <remarks/>
        public string item;
        
        /// <remarks/>
        public money avgCost;
        
        /// <remarks/>
        public money newCost;
        
        /// <remarks/>
        public float laborFactor;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool laborFactorSpecified;
        
        /// <remarks/>
        public string materialType;
        
        /// <remarks/>
        public materialUnits materialUnits;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool materialUnitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public warehouseLocation[] warehouseLocationList;
        
        /// <remarks/>
        public System.DateTime effectiveDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool effectiveDateSpecified;
        
        /// <remarks/>
        public string materialClass;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum materialUnits {
        
        /// <remarks/>
        Feet,
        
        /// <remarks/>
        Meters,
        
        /// <remarks/>
        Inches,
        
        /// <remarks/>
        Pounds,
        
        /// <remarks/>
        Kilograms,
        
        /// <remarks/>
        Miles,
        
        /// <remarks/>
        ThousandFeet,
        
        /// <remarks/>
        Kilometers,
        
        /// <remarks/>
        Pair,
        
        /// <remarks/>
        Each,
        
        /// <remarks/>
        Hour,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        DoNotChange,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class warehouseLocation {
        
        /// <remarks/>
        public string warehouseID;
        
        /// <remarks/>
        public string aisle;
        
        /// <remarks/>
        public string bin;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class historyLog : mspObject {
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public @event[] eventList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class @event {
        
        /// <remarks/>
        public System.DateTime dateTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dateTimeSpecified;
        
        /// <remarks/>
        public meterEvent meterEvent;
        
        /// <remarks/>
        public string userID;
        
        /// <remarks/>
        public string argument;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uint sequenceNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool sequenceNumberSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class profileObject : mspObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public source[] sourceList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("loadProfile", IsNullable=false)]
        public profileType[] loadProfileList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class source {
        
        /// <remarks/>
        public uint sourceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool sourceIDSpecified;
        
        /// <remarks/>
        public quantityType quantityType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool quantityTypeSpecified;
        
        /// <remarks/>
        public uom uom;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool uomSpecified;
        
        /// <remarks/>
        public accountability1 accountability;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool accountabilitySpecified;
        
        /// <remarks/>
        public phaseAssociation phase;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseSpecified;
        
        /// <remarks/>
        public string harmonic;
        
        /// <remarks/>
        public transformerRatio transformerRatio;
        
        /// <remarks/>
        public displayFormat displayFormat;
        
        /// <remarks/>
        public bool multiplierApplied;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool multiplierAppliedSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum quantityType {
        
        /// <remarks/>
        summation,
        
        /// <remarks/>
        demand,
        
        /// <remarks/>
        consumption,
        
        /// <remarks/>
        value,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="accountability", Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum accountability1 {
        
        /// <remarks/>
        Q1,
        
        /// <remarks/>
        Q2,
        
        /// <remarks/>
        Q3,
        
        /// <remarks/>
        Q4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-2")]
        Q12,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-3")]
        Q13,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-4")]
        Q14,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q2-3")]
        Q23,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q2-4")]
        Q24,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q3-4")]
        Q34,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-2-3")]
        Q123,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-2-4")]
        Q124,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-3-4")]
        Q134,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q2-3-4")]
        Q234,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-2-3-4")]
        Q1234,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-2-netFlow")]
        Q12netFlow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-3-netFlow")]
        Q13netFlow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-4-netFlow")]
        Q14netFlow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q2-3-netFlow")]
        Q23netFlow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q2-4-netFlow")]
        Q24netFlow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q3-4-netFlow")]
        Q34netFlow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-2-3-netFlow")]
        Q123netFlow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-2-4-netFlow")]
        Q124netFlow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-3-4-netFlow")]
        Q134netFlow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q2-3-4-netFlow")]
        Q234netFlow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q1-2-3-4-netFlow")]
        Q1234netFlow,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum phaseAssociation {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A-B")]
        AB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("B-C")]
        BC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C-A")]
        CA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Neutral-Gnd")]
        NeutralGnd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A-Neutral")]
        ANeutral,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("B-Neutral")]
        BNeutral,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C-Neutral")]
        CNeutral,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class transformerRatio {
        
        /// <remarks/>
        public bool applied;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool appliedSpecified;
        
        /// <remarks/>
        public double ct;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ctSpecified;
        
        /// <remarks/>
        public double pt;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ptSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class displayFormat {
        
        /// <remarks/>
        public bool supressLeadingZero;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool supressLeadingZeroSpecified;
        
        /// <remarks/>
        public byte numberOfDigits;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool numberOfDigitsSpecified;
        
        /// <remarks/>
        public byte precision;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool precisionSpecified;
        
        /// <remarks/>
        public double displayMultiplier;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool displayMultiplierSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class profileType {
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public byte dataSetNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dataSetNumberSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public channel[] channelList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class channel {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("block", IsNullable=false)]
        public channelBlock[] blockList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uint intervalSourceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uint endReadingSourceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool endReadingSourceIDSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(typeof(uint), "0")]
        public uint channelNumber;
        
        public channel() {
            this.channelNumber = ((uint)(0));
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class channelBlock {
        
        /// <remarks/>
        public blockStatus status;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("interval")]
        public interval[] interval;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.DateTime endTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uint intervalPeriod;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public double endReading;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool endReadingSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uint endPulse;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool endPulseSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uint sequenceNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool sequenceNumberSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class blockStatus {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DSTinEffect", typeof(bool))]
        [System.Xml.Serialization.XmlElementAttribute("clockBackward", typeof(bool))]
        [System.Xml.Serialization.XmlElementAttribute("clockForward", typeof(bool))]
        [System.Xml.Serialization.XmlElementAttribute("configChanged", typeof(bool))]
        [System.Xml.Serialization.XmlElementAttribute("invalid", typeof(bool))]
        [System.Xml.Serialization.XmlElementAttribute("longInterval", typeof(bool))]
        [System.Xml.Serialization.XmlElementAttribute("manuallyEntered", typeof(bool))]
        [System.Xml.Serialization.XmlElementAttribute("manuallyModified", typeof(bool))]
        [System.Xml.Serialization.XmlElementAttribute("overflow", typeof(bool))]
        [System.Xml.Serialization.XmlElementAttribute("partialInterval", typeof(bool))]
        [System.Xml.Serialization.XmlElementAttribute("recorderStopped", typeof(bool))]
        [System.Xml.Serialization.XmlElementAttribute("testData", typeof(bool))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public bool[] Items;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType[] ItemsElementName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uint intervalIndex;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release", IncludeInSchema=false)]
    public enum ItemsChoiceType {
        
        /// <remarks/>
        DSTinEffect,
        
        /// <remarks/>
        clockBackward,
        
        /// <remarks/>
        clockForward,
        
        /// <remarks/>
        configChanged,
        
        /// <remarks/>
        invalid,
        
        /// <remarks/>
        longInterval,
        
        /// <remarks/>
        manuallyEntered,
        
        /// <remarks/>
        manuallyModified,
        
        /// <remarks/>
        overflow,
        
        /// <remarks/>
        partialInterval,
        
        /// <remarks/>
        recorderStopped,
        
        /// <remarks/>
        testData,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class interval {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool DSTinEffect;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool clockForward;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool clockBackward;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool overflow;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool partialInterval;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool longInterval;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool testData;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool invalid;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool manuallyEntered;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool manuallyModified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool recorderStopped;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool configChanged;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value;
        
        public interval() {
            this.DSTinEffect = false;
            this.clockForward = false;
            this.clockBackward = false;
            this.overflow = false;
            this.partialInterval = false;
            this.longInterval = false;
            this.testData = false;
            this.invalid = false;
            this.manuallyEntered = false;
            this.manuallyModified = false;
            this.recorderStopped = false;
            this.configChanged = false;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(blinkAlarm))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(voltageAlarm))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public abstract partial class mspAlarm : mspObject {
        
        /// <remarks/>
        public objectRef sourceIdentifier;
        
        /// <remarks/>
        public System.DateTime eventTime;
        
        /// <remarks/>
        public meterEvent eventCode;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class blinkAlarm : mspAlarm {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string countedValue;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string ceilingValue;
        
        /// <remarks/>
        public bool latchesAtMaximum;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool latchesAtMaximumSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class voltageAlarm : mspAlarm {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public voltageAlarmItem[] voltageAlarmList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class voltageAlarmItem {
        
        /// <remarks/>
        public voltage voltageValue;
        
        /// <remarks/>
        public unitPrefix1 unitPrefix;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitPrefixSpecified;
        
        /// <remarks/>
        public qualityDescription1 quality;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool qualitySpecified;
        
        /// <remarks/>
        public analogCondition analogCondition;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool analogConditionSpecified;
        
        /// <remarks/>
        public phaseCode phaseCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseCodeSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class readingObject : mspObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public source[] sourceList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public meterReading[] readingList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class demandResponseEventDeprecated : mspObject {
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public string loadManagementID;
        
        /// <remarks/>
        public string port;
        
        /// <remarks/>
        public string strategy;
        
        /// <remarks/>
        public controlEventType controlEventType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool controlEventTypeSpecified;
        
        /// <remarks/>
        public duration duration;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class loadManagementEvent : mspObject {
        
        /// <remarks/>
        public string substationName;
        
        /// <remarks/>
        public string feederName;
        
        /// <remarks/>
        public string feederNumber;
        
        /// <remarks/>
        public long groupName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool groupNameSpecified;
        
        /// <remarks/>
        public controlEventType controlEventType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool controlEventTypeSpecified;
        
        /// <remarks/>
        public float applicationRate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool applicationRateSpecified;
        
        /// <remarks/>
        public duration duration;
        
        /// <remarks/>
        public duration cycleTime;
        
        /// <remarks/>
        public long dutyCycle;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dutyCycleSpecified;
        
        /// <remarks/>
        public float controlLoad;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool controlLoadSpecified;
        
        /// <remarks/>
        public string pointID;
        
        /// <remarks/>
        public float target;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool targetSpecified;
        
        /// <remarks/>
        public uom uom;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool uomSpecified;
        
        /// <remarks/>
        public strategy strategy;
        
        /// <remarks/>
        public System.DateTime scheduleDateTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool scheduleDateTimeSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class strategy {
        
        /// <remarks/>
        public string strategyName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("applicationPoint", IsNullable=false)]
        public objectRef[] applicationPointList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class customersAttachedToDevice : mspObject {
        
        /// <remarks/>
        public objectRef deviceID;
        
        /// <remarks/>
        public string deviceDescription;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public affectedMeter[] affectedMeters;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class affectedMeter {
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public string serviceLocationID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class customersAffectedByOutage : mspObject {
        
        /// <remarks/>
        public string outageEventID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public affectedMeter[] affectedMeters;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class chargeableDeviceList : mspObject {
        
        /// <remarks/>
        public string accountNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("chargeableDevice")]
        public chargeableDevice[] chargeableDevice;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class chargeableDevice : mspObject {
        
        /// <remarks/>
        public string chargeableDeviceType;
        
        /// <remarks/>
        public string deviceDescription;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string quantity;
        
        /// <remarks/>
        public actionFlag actionFlag;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool actionFlagSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum actionFlag {
        
        /// <remarks/>
        Enable,
        
        /// <remarks/>
        Disable,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class callBackList : mspObject {
        
        /// <remarks/>
        public string outageEventID;
        
        /// <remarks/>
        public outageStatus outageStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool outageStatusSpecified;
        
        /// <remarks/>
        public string outageDescription;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public outageCustomer[] outageCustomerList;
        
        /// <remarks/>
        public message message;
        
        /// <remarks/>
        public string callBackListType;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class outageDetectionEvent : mspObject {
        
        /// <remarks/>
        public phaseCode phaseCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseCodeSpecified;
        
        /// <remarks/>
        public System.DateTime eventTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool eventTimeSpecified;
        
        /// <remarks/>
        public outageEventType outageEventType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool outageEventTypeSpecified;
        
        /// <remarks/>
        public string outageDetectionDeviceID;
        
        /// <remarks/>
        public outageDetectDeviceType outageDetectionDeviceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool outageDetectionDeviceTypeSpecified;
        
        /// <remarks/>
        public outageLocation outageLocation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public message[] messageList;
        
        /// <remarks/>
        public outageCustomer outageCustomer;
        
        /// <remarks/>
        public priorityType priority;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool prioritySpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string percentConfident;
        
        /// <remarks/>
        public string problemCode;
        
        /// <remarks/>
        public resolvedLevel resolvedLevel;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool resolvedLevelSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum outageEventType {
        
        /// <remarks/>
        Instantaneous,
        
        /// <remarks/>
        Outage,
        
        /// <remarks/>
        Restoration,
        
        /// <remarks/>
        NoResponse,
        
        /// <remarks/>
        Inferred,
        
        /// <remarks/>
        PowerOn,
        
        /// <remarks/>
        PowerOff,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class inspection : mspObject {
        
        /// <remarks/>
        public objectRef elementInspected;
        
        /// <remarks/>
        public System.DateTime inspectionDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool inspectionDateSpecified;
        
        /// <remarks/>
        public string inspectedBy;
        
        /// <remarks/>
        public geometry geometry;
        
        /// <remarks/>
        public gpsPoint gpsPoint;
        
        /// <remarks/>
        public GPSLocation GPSLocation;
        
        /// <remarks/>
        public string elementStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string elementCondition;
        
        /// <remarks/>
        public string serviceOrderID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public observation[] observationList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public attachment[] attachments;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class observation {
        
        /// <remarks/>
        public string observationItemID;
        
        /// <remarks/>
        public string itemStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string itemCondition;
        
        /// <remarks/>
        public string comment;
        
        /// <remarks/>
        public observedValue value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class meterExchanges : mspObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public electricMeterExchange[] electricMeterExchanges;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public waterMeterExchange[] waterMeterExchanges;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public gasMeterExchange[] gasMeterExchanges;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public propaneMeterExchange[] propaneMeterExchanges;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public otherMeterExchange[] otherMeterExchanges;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class electricMeterExchange : mspObject {
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public string electricServiceID;
        
        /// <remarks/>
        public meterReading outMeterReading;
        
        /// <remarks/>
        public meterReading inMeterReading;
        
        /// <remarks/>
        public meterReading lastRead;
        
        /// <remarks/>
        public System.DateTime lastReadDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lastReadDateSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public consumptionItem[] averageConsumption;
        
        /// <remarks/>
        public System.DateTime timeStamp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timeStampSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class consumptionItem {
        
        /// <remarks/>
        public readingValue readingValue;
        
        /// <remarks/>
        public timePeriod periodOfUse;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class waterMeterExchange : mspObject {
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public string waterServiceID;
        
        /// <remarks/>
        public meterReading outMeterReading;
        
        /// <remarks/>
        public meterReading inMeterReading;
        
        /// <remarks/>
        public meterReading lastRead;
        
        /// <remarks/>
        public System.DateTime lastReadDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lastReadDateSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public consumptionItem[] averageConsumption;
        
        /// <remarks/>
        public System.DateTime timeStamp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timeStampSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class gasMeterExchange : mspObject {
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public string gasServiceID;
        
        /// <remarks/>
        public meterReading outMeterReading;
        
        /// <remarks/>
        public meterReading inMeterReading;
        
        /// <remarks/>
        public meterReading lastRead;
        
        /// <remarks/>
        public System.DateTime lastReadDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lastReadDateSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public consumptionItem[] averageConsumption;
        
        /// <remarks/>
        public System.DateTime timeStamp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timeStampSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class propaneMeterExchange : mspObject {
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public string propaneServiceID;
        
        /// <remarks/>
        public meterReading outMeterReading;
        
        /// <remarks/>
        public meterReading inMeterReading;
        
        /// <remarks/>
        public meterReading lastRead;
        
        /// <remarks/>
        public System.DateTime lastReadDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lastReadDateSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public consumptionItem[] averageConsumption;
        
        /// <remarks/>
        public System.DateTime timeStamp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timeStampSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class otherMeterExchange : mspObject {
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public string otherServiceID;
        
        /// <remarks/>
        public meterReading outMeterReading;
        
        /// <remarks/>
        public meterReading inMeterReading;
        
        /// <remarks/>
        public meterReading lastRead;
        
        /// <remarks/>
        public System.DateTime lastReadDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lastReadDateSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public consumptionItem[] averageConsumption;
        
        /// <remarks/>
        public System.DateTime timeStamp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timeStampSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class ppmTransaction : mspObject {
        
        /// <remarks/>
        public money priorityBalance;
        
        /// <remarks/>
        public money sharedArrears;
        
        /// <remarks/>
        public money amount;
        
        /// <remarks/>
        public string description;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class ppmBalanceAdjustment : mspObject {
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public string accountNumber;
        
        /// <remarks/>
        public serviceType serviceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool serviceTypeSpecified;
        
        /// <remarks/>
        public string ppmLocationID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public adjustmentItem[] adjustmentItemList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class adjustmentItem {
        
        /// <remarks/>
        public balanceType balanceType;
        
        /// <remarks/>
        public money amount;
        
        /// <remarks/>
        public string adjustmentItemID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum balanceType {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        priorityBalance,
        
        /// <remarks/>
        totalBalance,
        
        /// <remarks/>
        arrearsBalance,
        
        /// <remarks/>
        prepaidBalance,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class rate : mspObject {
        
        /// <remarks/>
        public string rateCode;
        
        /// <remarks/>
        public string rateCodeDescription;
        
        /// <remarks/>
        public System.DateTime startTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startTimeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public rateComponent[] rateComponents;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public TOUSchedule[] TOUSchedules;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class rateComponent {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public currencyCode currencyCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool currencyCodeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uom commodityUnits;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool commodityUnitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string rateComponentDescription;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string rateCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class ppmLocation : mspObject {
        
        /// <remarks/>
        public serviceType serviceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool serviceTypeSpecified;
        
        /// <remarks/>
        public rate rate;
        
        /// <remarks/>
        public string taxDist;
        
        /// <remarks/>
        public string fuelCostAdjCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("fixedChargeCode", IsNullable=false)]
        public string[] fixedChargeCodeList;
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public money priorityBalance;
        
        /// <remarks/>
        public money sharedArrears;
        
        /// <remarks/>
        public meterReading initialRead;
        
        /// <remarks/>
        public customer customer;
        
        /// <remarks/>
        public money totalBalance;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string lastMeterRead;
        
        /// <remarks/>
        public System.DateTime lastReadingDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lastReadingDateSpecified;
        
        /// <remarks/>
        public money depositAmount;
        
        /// <remarks/>
        public money depositPaid;
        
        /// <remarks/>
        public float depositInterest;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool depositInterestSpecified;
        
        /// <remarks/>
        public System.DateTime connectDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool connectDateSpecified;
        
        /// <remarks/>
        public string billingCycle;
        
        /// <remarks/>
        public System.DateTime meterSetDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool meterSetDateSpecified;
        
        /// <remarks/>
        public meterID meterID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class connectDisconnectList : mspObject {
        
        /// <remarks/>
        public System.DateTime disconnectDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool disconnectDateSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public CDCustomer[] CDList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class CDCustomer {
        
        /// <remarks/>
        public string customerID;
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public loadActionCode loadActionCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool loadActionCodeSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum loadActionCode {
        
        /// <remarks/>
        Connect,
        
        /// <remarks/>
        Disconnect,
        
        /// <remarks/>
        InitiatePowerLimitation,
        
        /// <remarks/>
        CancelPowerLimitation,
        
        /// <remarks/>
        Opened,
        
        /// <remarks/>
        Closed,
        
        /// <remarks/>
        Open,
        
        /// <remarks/>
        Close,
        
        /// <remarks/>
        Armed,
        
        /// <remarks/>
        Enabled,
        
        /// <remarks/>
        Disabled,
        
        /// <remarks/>
        Arm,
        
        /// <remarks/>
        Enable,
        
        /// <remarks/>
        Disable,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class connectDisconnectEvent : mspObject {
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public string customerID;
        
        /// <remarks/>
        public string gridLocation;
        
        /// <remarks/>
        public string accountNumber;
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public loadActionCode loadActionCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool loadActionCodeSpecified;
        
        /// <remarks/>
        public powerLimitationValue powerLimitationValue;
        
        /// <remarks/>
        public CDReasonCode CDReasonCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CDReasonCodeSpecified;
        
        /// <remarks/>
        public money amountDue;
        
        /// <remarks/>
        public serviceType serviceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool serviceTypeSpecified;
        
        /// <remarks/>
        public string billingTerms;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class powerLimitationValue {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public powerLimitationUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum powerLimitationUnits {
        
        /// <remarks/>
        kWh,
        
        /// <remarks/>
        kW,
        
        /// <remarks/>
        A,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum CDReasonCode {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        PPMBalanceNegative,
        
        /// <remarks/>
        PPMBalancePositive,
        
        /// <remarks/>
        NonPayment,
        
        /// <remarks/>
        ServiceInactive,
        
        /// <remarks/>
        PaymentAgreement,
        
        /// <remarks/>
        PaymentReceived,
        
        /// <remarks/>
        NewCustomer,
        
        /// <remarks/>
        ServiceRestored,
        
        /// <remarks/>
        ServiceReconnected,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class CDStateChange : mspObject {
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public loadActionCode stateChange;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool stateChangeSpecified;
        
        /// <remarks/>
        public meterEvent meterEvent;
        
        /// <remarks/>
        public System.DateTime timestamp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timestampSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class CDState : mspObject {
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public RCDState RCDState;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RCDStateSpecified;
        
        /// <remarks/>
        public System.DateTime timestamp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timestampSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum RCDState {
        
        /// <remarks/>
        Opened,
        
        /// <remarks/>
        Closed,
        
        /// <remarks/>
        Armed,
        
        /// <remarks/>
        Enabled,
        
        /// <remarks/>
        Disabled,
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        InTransition,
        
        /// <remarks/>
        PowerLimitation,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class billingDetail : mspObject {
        
        /// <remarks/>
        public string accountNumber;
        
        /// <remarks/>
        public serviceType serviceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool serviceTypeSpecified;
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public string ppmLocationID;
        
        /// <remarks/>
        public string revenueMonth;
        
        /// <remarks/>
        public string revenueYear;
        
        /// <remarks/>
        public System.DateTime cisBillDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool cisBillDateSpecified;
        
        /// <remarks/>
        public string billingCycle;
        
        /// <remarks/>
        public money priorBalance;
        
        /// <remarks/>
        public money payment;
        
        /// <remarks/>
        public money creditCharge;
        
        /// <remarks/>
        public money debitCharge;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public chargeItem[] chargeItemList;
        
        /// <remarks/>
        public money CISBalanceAfterBilling;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class chargeItem {
        
        /// <remarks/>
        public money charge;
        
        /// <remarks/>
        public string description;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class billingData : mspObject {
        
        /// <remarks/>
        public string accountNumber;
        
        /// <remarks/>
        public serviceType serviceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool serviceTypeSpecified;
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public string ppmLocationID;
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public money CISBalanceAfterBilling;
        
        /// <remarks/>
        public System.DateTime billingDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool billingDateSpecified;
        
        /// <remarks/>
        public System.DateTime billFromDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool billFromDateSpecified;
        
        /// <remarks/>
        public System.DateTime billToDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool billToDateSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class billingAccountLoad : mspObject {
        
        /// <remarks/>
        public string accountNumber;
        
        /// <remarks/>
        public eaLoc eaLoc;
        
        /// <remarks/>
        public string substation;
        
        /// <remarks/>
        public string feeder;
        
        /// <remarks/>
        public phaseCode phaseCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseCodeSpecified;
        
        /// <remarks/>
        public float kwhUse;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool kwhUseSpecified;
        
        /// <remarks/>
        public long demand;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool demandSpecified;
        
        /// <remarks/>
        public float hp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool hpSpecified;
        
        /// <remarks/>
        public float kvarDemand;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool kvarDemandSpecified;
        
        /// <remarks/>
        public long stLiteKwh;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool stLiteKwhSpecified;
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public string servType;
        
        /// <remarks/>
        public string revenueClass;
        
        /// <remarks/>
        public float kwhAdj;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool kwhAdjSpecified;
        
        /// <remarks/>
        public long kwAdj;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool kwAdjSpecified;
        
        /// <remarks/>
        public long xfmrKva;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool xfmrKvaSpecified;
        
        /// <remarks/>
        public string gLCode;
        
        /// <remarks/>
        public string zone;
        
        /// <remarks/>
        public GMLLocation GMLLocation;
        
        /// <remarks/>
        public string gridLocation;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class billedUsage : mspObject {
        
        /// <remarks/>
        public string accountNumber;
        
        /// <remarks/>
        public serviceType serviceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool serviceTypeSpecified;
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public string ppmLocationID;
        
        /// <remarks/>
        public string meterStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public usageItem[] usageItemList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class usageItem {
        
        /// <remarks/>
        public string usageType;
        
        /// <remarks/>
        public float multiplier;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool multiplierSpecified;
        
        /// <remarks/>
        public float previousReading;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool previousReadingSpecified;
        
        /// <remarks/>
        public System.DateTime previousReadDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool previousReadDateSpecified;
        
        /// <remarks/>
        public float presentReading;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool presentReadingSpecified;
        
        /// <remarks/>
        public System.DateTime presentReadingDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool presentReadingDateSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class workStatus : mspObject {
        
        /// <remarks/>
        public System.DateTime timeStamp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timeStampSpecified;
        
        /// <remarks/>
        public multiPartIdentifier taskIdentifier;
        
        /// <remarks/>
        public objectRef assignmentID;
        
        /// <remarks/>
        public assignmentStatus assignmentStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool assignmentStatusSpecified;
        
        /// <remarks/>
        public objectRef acceptedBy;
        
        /// <remarks/>
        public string workProgress;
        
        /// <remarks/>
        public string remarks;
        
        /// <remarks/>
        public scheduleModification scheduleModification;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum assignmentStatus {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Received Assignment")]
        ReceivedAssignment,
        
        /// <remarks/>
        Delivered,
        
        /// <remarks/>
        Accepted,
        
        /// <remarks/>
        Rejected,
        
        /// <remarks/>
        Queued,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Timed Out")]
        TimedOut,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Partially Complete")]
        PartiallyComplete,
        
        /// <remarks/>
        Completed,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("On Hold")]
        OnHold,
        
        /// <remarks/>
        Returned,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class scheduleModification {
        
        /// <remarks/>
        public System.DateTime cantStartUntil;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool cantStartUntilSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class workRequest : mspObject {
        
        /// <remarks/>
        public System.DateTime createdDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool createdDateSpecified;
        
        /// <remarks/>
        public string createdBy;
        
        /// <remarks/>
        public string workType;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public string title;
        
        /// <remarks/>
        public string priority;
        
        /// <remarks/>
        public workLocation workLocation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public scheduleRequest[] scheduleRequests;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class unassignment : mspObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public resource[] resources;
        
        /// <remarks/>
        public objectRef assignmentID;
        
        /// <remarks/>
        public multiPartIdentifier taskIdentifier;
        
        /// <remarks/>
        public string reason;
        
        /// <remarks/>
        public string actionBy;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class resource : mspObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public worker[] workers;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public crew[] crewList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("vehicleID", IsNullable=false)]
        public string[] vehicleList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("equipmentID", IsNullable=false)]
        public string[] equipmentList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public vehicle[] vehicles;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public equipment[] crewEquipmentList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public switchingSchedule[] switchingScheduleList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public switchingStep[] switchingStepList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class crew : mspObject {
        
        /// <remarks/>
        public string crewName;
        
        /// <remarks/>
        public string foreman;
        
        /// <remarks/>
        public contactInfo contactInfo;
        
        /// <remarks/>
        public bool isForeign;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isForeignSpecified;
        
        /// <remarks/>
        public string baseLocation;
        
        /// <remarks/>
        public string crewType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("vehicleID", IsNullable=false)]
        public string[] vehicleList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("workerID", IsNullable=false)]
        public string[] workerList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("equipmentID", IsNullable=false)]
        public string[] equipmentList;
        
        /// <remarks/>
        public bool isActive;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isActiveSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("capabilityID", IsNullable=false)]
        public string[] capabilityList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public vehicle[] vehicles;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public worker[] workers;
        
        /// <remarks/>
        public capabilities capabilities;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class vehicle : mspObject {
        
        /// <remarks/>
        public string vehicleType;
        
        /// <remarks/>
        public bool isCompanyOwned;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isCompanyOwnedSpecified;
        
        /// <remarks/>
        public string AVLID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class capabilities {
        
        /// <remarks/>
        public capability capability;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class capability : mspObject {
        
        /// <remarks/>
        public string category;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public System.DateTime effectiveDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool effectiveDateSpecified;
        
        /// <remarks/>
        public System.DateTime expirationDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool expirationDateSpecified;
        
        /// <remarks/>
        public string performanceFactor;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class equipment : mspObject {
        
        /// <remarks/>
        public string equipmentType;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class groupAssignment : mspObject {
        
        /// <remarks/>
        public objectRef workGroupID;
        
        /// <remarks/>
        public multiPartIdentifier taskIdentifier;
        
        /// <remarks/>
        public workSchedule workSchedule;
        
        /// <remarks/>
        public constraints constraints;
        
        /// <remarks/>
        public string actionBy;
        
        /// <remarks/>
        public string timeToLive;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class workSchedule {
        
        /// <remarks/>
        public System.DateTime estimatedStartTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool estimatedStartTimeSpecified;
        
        /// <remarks/>
        public System.DateTime estimatedEndTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool estimatedEndTimeSpecified;
        
        /// <remarks/>
        public duration estimatedDriveTime;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class constraints {
        
        /// <remarks/>
        public System.DateTime cantStartUntil;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool cantStartUntilSpecified;
        
        /// <remarks/>
        public System.DateTime mustBeDoneBy;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mustBeDoneBySpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class assignment : mspObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public resource[] resources;
        
        /// <remarks/>
        public multiPartIdentifier taskIdentifier;
        
        /// <remarks/>
        public workSchedule workSchedule;
        
        /// <remarks/>
        public constraints constraints;
        
        /// <remarks/>
        public string actionBy;
        
        /// <remarks/>
        public duration timeToLive;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class project : mspObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("jobID", IsNullable=false)]
        public objectRef[] jobList;
        
        /// <remarks/>
        public string remarks;
        
        /// <remarks/>
        public workList workList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public serviceOrder[] serviceOrderList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public workOrder[] workOrderList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public maintenanceOrder[] maintenanceOrderList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class scadaStatus : mspObject {
        
        /// <remarks/>
        public qualityDescription1 quality;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool qualitySpecified;
        
        /// <remarks/>
        public statusIdentifiers status;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool statusSpecified;
        
        /// <remarks/>
        public long changeCounter;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool changeCounterSpecified;
        
        /// <remarks/>
        public System.DateTime timeStamp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timeStampSpecified;
        
        /// <remarks/>
        public string otherQualityCode;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum statusIdentifiers {
        
        /// <remarks/>
        Open,
        
        /// <remarks/>
        Closed,
        
        /// <remarks/>
        Travel,
        
        /// <remarks/>
        OutofService,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class scadaPoints : mspObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public scadaPoint[] scadaPointList;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(readingSchedule))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class schedule : mspObject {
        
        /// <remarks/>
        public string purpose;
        
        /// <remarks/>
        public duration maximumRunTime;
        
        /// <remarks/>
        public timePeriod effectiveWindow;
        
        /// <remarks/>
        public bool isEnabled;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isEnabledSpecified;
        
        /// <remarks/>
        public duration offset;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public timePoint[] absoluteTimeSchedule;
        
        /// <remarks/>
        public periodicSchedule periodicSchedule;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("TimePoints")]
        public cimTimePoints[] TimePoints;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class timePoint {
        
        /// <remarks/>
        public System.DateTime absoluteTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool absoluteTimeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string sequenceNumber;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class periodicSchedule {
        
        /// <remarks/>
        public System.DateTime startTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startTimeSpecified;
        
        /// <remarks/>
        public period period;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class period {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public timeUnits timeUnits;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timeUnitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute(DataType="integer")]
        public string Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class cimTimePoints {
        
        /// <remarks/>
        public System.DateTime absoluteTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool absoluteTimeSpecified;
        
        /// <remarks/>
        public duration relativeTimeInterval;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string sequenceNumber;
        
        /// <remarks/>
        public timePeriod window;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class readingSchedule : schedule {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public meterID[] meterList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("meterGroupID", IsNullable=false)]
        public string[] meterGroupList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("configurationGroupID", IsNullable=false)]
        public string[] configurationGroupList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public readingType[] readingTypeList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class readingType : mspObject {
        
        /// <remarks/>
        public readingTypeCode readingTypeCode;
        
        /// <remarks/>
        public string measurementType;
        
        /// <remarks/>
        public string measTypeCategory;
        
        /// <remarks/>
        public uom units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        public bool forwardChronology;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool forwardChronologySpecified;
        
        /// <remarks/>
        public string defaultValueDataType;
        
        /// <remarks/>
        public string defaultQuality;
        
        /// <remarks/>
        public string dynamicConfiguration;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string channel;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class meterGroups : mspObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public meterGroup[] electricMeterGroups;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public meterGroup[] gasMeterGroups;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public meterGroup[] waterMeterGroups;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public meterGroup[] propaneMeterGroups;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public meterGroup[] mixedMeterGroups;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(configurationGroup))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class meterGroup : mspObject {
        
        /// <remarks/>
        public string groupName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public meterID[] meterList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class configurationGroup : meterGroup {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public configuredReadingType[] configuredReadingTypes;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class AVLPosition : mspObject {
        
        /// <remarks/>
        public string vehicleID;
        
        /// <remarks/>
        public string AVLID;
        
        /// <remarks/>
        public System.DateTime GMTTime;
        
        /// <remarks/>
        public speed speed;
        
        /// <remarks/>
        public float heading;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool headingSpecified;
        
        /// <remarks/>
        public string cardinalHeading;
        
        /// <remarks/>
        public GPS gps;
        
        /// <remarks/>
        public GPSLocation GPSLocation;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class speed {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public speedUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum speedUnits {
        
        /// <remarks/>
        mph,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("feet per second")]
        feetpersecond,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km per hour")]
        kmperhour,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km per second")]
        kmpersecond,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m per second")]
        mpersecond,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class GPS {
        
        /// <remarks/>
        public bool GPSValidity;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GPSValiditySpecified;
        
        /// <remarks/>
        public double latitude;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool latitudeSpecified;
        
        /// <remarks/>
        public double longitude;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool longitudeSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class formattedBlockTemplate : mspObject {
        
        /// <remarks/>
        public string templateName;
        
        /// <remarks/>
        public formattedBlock formattedBlock;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class formattedBlock {
        
        /// <remarks/>
        public string separator;
        
        /// <remarks/>
        public string contentNounType;
        
        /// <remarks/>
        public string contentID;
        
        /// <remarks/>
        public string comment;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public syntaxItem[] valSyntax;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("val", IsNullable=false)]
        public string[] valueList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class syntaxItem {
        
        /// <remarks/>
        public string fieldName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string position;
        
        /// <remarks/>
        public uom uom;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool uomSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class meterReadingC1219 : mspObject {
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public string meterNo;
        
        /// <remarks/>
        public System.DateTime dateTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dateTimeSpecified;
        
        /// <remarks/>
        public System.DateTime acquisitionTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool acquisitionTimeSpecified;
        
        /// <remarks/>
        public byte season;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool seasonSpecified;
        
        /// <remarks/>
        public uint numberOfResets;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool numberOfResetsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("status")]
        public readingStatus[] status;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("registers")]
        public registers[] registers;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum readingStatus {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        suspiciousRead,
        
        /// <remarks/>
        DSTinEffect,
        
        /// <remarks/>
        manuallyUpdated,
        
        /// <remarks/>
        manuallyEntered,
        
        /// <remarks/>
        reset,
        
        /// <remarks/>
        seasonChange,
        
        /// <remarks/>
        firstRead,
        
        /// <remarks/>
        billingRead,
        
        /// <remarks/>
        afterCorrection,
        
        /// <remarks/>
        beforeCorrection,
        
        /// <remarks/>
        finalRead,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class registers {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("coincidentalValue", typeof(coincidentalValue))]
        [System.Xml.Serialization.XmlElementAttribute("cumDemand", typeof(cumDemand))]
        [System.Xml.Serialization.XmlElementAttribute("demand", typeof(flowDemand))]
        [System.Xml.Serialization.XmlElementAttribute("summation", typeof(summation))]
        public object[] Items;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uint tier;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool tierSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class coincidentalValue {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uint sourceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool sourceIDSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uint triggerSourceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool triggerSourceIDSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class cumDemand {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uint sourceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool sourceIDSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public cumDemandType cumDemandType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool cumDemandTypeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum cumDemandType {
        
        /// <remarks/>
        max,
        
        /// <remarks/>
        min,
        
        /// <remarks/>
        continousMax,
        
        /// <remarks/>
        continousMin,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class flowDemand {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uint sourceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool sourceIDSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public flowDemandType flowDemandType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool flowDemandTypeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public byte occurrence;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool occurrenceSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.DateTime dateTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dateTimeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum flowDemandType {
        
        /// <remarks/>
        min,
        
        /// <remarks/>
        max,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class summation {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uint sourceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool sourceIDSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class thresholdNotificationItem : mspObject {
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public readingValue readingValue;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class thresholdMonitoringItem : mspObject {
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public float value;
        
        /// <remarks/>
        public readingTypeCode readingTypeCode;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class eventMonitoringItem : mspObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public meterEvent[] eventTypes;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("meterGroupID", IsNullable=false)]
        public string[] meterGroupList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public meterID[] meterList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class tender : mspObject {
        
        /// <remarks/>
        public money amount;
        
        /// <remarks/>
        public money convenienceFee;
        
        /// <remarks/>
        public money utilityFee;
        
        /// <remarks/>
        public money total;
        
        /// <remarks/>
        public string authorizationCode;
        
        /// <remarks/>
        public payableItemList payableItemList;
        
        /// <remarks/>
        public string paymentMode;
        
        /// <remarks/>
        public responseCode responseCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool responseCodeSpecified;
        
        /// <remarks/>
        public string financialTransactionID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class payableItemList {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("payableItem")]
        public payableItem[] payableItem;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("transactionType", IsNullable=false)]
        public string[] allowableTransactionTypes;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class payableItem : mspObject {
        
        /// <remarks/>
        public money pastDueAmount;
        
        /// <remarks/>
        public money currentAmount;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public string chargeCode;
        
        /// <remarks/>
        public System.DateTime dueDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dueDateSpecified;
        
        /// <remarks/>
        public System.DateTime disconnectDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool disconnectDateSpecified;
        
        /// <remarks/>
        public money lastPaymentAmount;
        
        /// <remarks/>
        public System.DateTime lastPaymentDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lastPaymentDateSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum responseCode {
        
        /// <remarks/>
        Success,
        
        /// <remarks/>
        Failure,
        
        /// <remarks/>
        Error,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class circuitElement : mspObject {
        
        /// <remarks/>
        public string elementName;
        
        /// <remarks/>
        public string parentName;
        
        /// <remarks/>
        public circuitElementType elementType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool elementTypeSpecified;
        
        /// <remarks/>
        public string substationName;
        
        /// <remarks/>
        public string feederName;
        
        /// <remarks/>
        public string feederNo;
        
        /// <remarks/>
        public phaseCode phaseCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseCodeSpecified;
        
        /// <remarks/>
        public circuitElementStatus circuitElementStatus;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum circuitElementType {
        
        /// <remarks/>
        ohPrimaryLine,
        
        /// <remarks/>
        ohSecondaryLine,
        
        /// <remarks/>
        ohTransmissionLine,
        
        /// <remarks/>
        ugPrimaryLine,
        
        /// <remarks/>
        ugSecondaryLine,
        
        /// <remarks/>
        ugTransissionLine,
        
        /// <remarks/>
        capacitorBank,
        
        /// <remarks/>
        overcurrentDeviceBank,
        
        /// <remarks/>
        regulatorBank,
        
        /// <remarks/>
        switchingDeviceBank,
        
        /// <remarks/>
        transformerBank,
        
        /// <remarks/>
        equivalentSource,
        
        /// <remarks/>
        root,
        
        /// <remarks/>
        electricService,
        
        /// <remarks/>
        fakeNodeSection,
        
        /// <remarks/>
        inducationMachine,
        
        /// <remarks/>
        synchronousMachine,
        
        /// <remarks/>
        streetLight,
        
        /// <remarks/>
        securityLight,
        
        /// <remarks/>
        trafficLight,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class circuitElementStatus {
        
        /// <remarks/>
        public string outageEventID;
        
        /// <remarks/>
        public phaseCode outagedPhase;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool outagedPhaseSpecified;
        
        /// <remarks/>
        public circuitElementState circuitElementState;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum circuitElementState {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        PossibleBreak,
        
        /// <remarks/>
        PossibleClosed,
        
        /// <remarks/>
        PossibleOpen,
        
        /// <remarks/>
        PredictedBreak,
        
        /// <remarks/>
        PredictedClosed,
        
        /// <remarks/>
        PredictedOpen,
        
        /// <remarks/>
        TempBreak,
        
        /// <remarks/>
        TempClosed,
        
        /// <remarks/>
        TempOpen,
        
        /// <remarks/>
        UplineTempBreak,
        
        /// <remarks/>
        UplineTempClosed,
        
        /// <remarks/>
        UplineTempOpen,
        
        /// <remarks/>
        UplineVerifiedClosedNoPower,
        
        /// <remarks/>
        VerifiedBreak,
        
        /// <remarks/>
        VerifiedClosedNoPower,
        
        /// <remarks/>
        VerifiedClosedWithPower,
        
        /// <remarks/>
        VerifiedOpen,
        
        /// <remarks/>
        NormalOrRestored,
        
        /// <remarks/>
        NoChange,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class outageDurationEvent : mspObject {
        
        /// <remarks/>
        public string outageEventID;
        
        /// <remarks/>
        public string outageDescription;
        
        /// <remarks/>
        public meterID meterID;
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public serviceID serviceID;
        
        /// <remarks/>
        public string accountNumber;
        
        /// <remarks/>
        public System.DateTime timeOfInterruption;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timeOfInterruptionSpecified;
        
        /// <remarks/>
        public System.DateTime timeRestored;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timeRestoredSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string interruptionDuration;
        
        /// <remarks/>
        public bool customerResponsible;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool customerResponsibleSpecified;
        
        /// <remarks/>
        public string durationDisplay;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class outageDetectionLog : mspObject {
        
        /// <remarks/>
        public phaseCode phaseCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseCodeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public loggedOutageDetectionEvent[] loggedODEventList;
        
        /// <remarks/>
        public outageLocation outageLocation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public message[] messageList;
        
        /// <remarks/>
        public outageCustomer outageCustomer;
        
        /// <remarks/>
        public priorityType priority;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool prioritySpecified;
        
        /// <remarks/>
        public resolvedLevel resolvedLevel;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool resolvedLevelSpecified;
        
        /// <remarks/>
        public System.DateTime timeTroubleBegan;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timeTroubleBeganSpecified;
        
        /// <remarks/>
        public System.DateTime timeOfInitialEvent;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timeOfInitialEventSpecified;
        
        /// <remarks/>
        public System.DateTime timeOfLastEvent;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timeOfLastEventSpecified;
        
        /// <remarks/>
        public long eventsLogged;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool eventsLoggedSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class loggedOutageDetectionEvent : mspObject {
        
        /// <remarks/>
        public string outageDetectionRecordID;
        
        /// <remarks/>
        public System.DateTime eventTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool eventTimeSpecified;
        
        /// <remarks/>
        public string outageDetectDeviceID;
        
        /// <remarks/>
        public outageDetectDeviceType outageDetectDeviceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool outageDetectDeviceTypeSpecified;
        
        /// <remarks/>
        public string problemCode;
        
        /// <remarks/>
        public outageEventType outageEventType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool outageEventTypeSpecified;
        
        /// <remarks/>
        public string takenBy;
        
        /// <remarks/>
        public callType callType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool callTypeSpecified;
        
        /// <remarks/>
        public string description;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class ppmMeterExchange : mspObject {
        
        /// <remarks/>
        public string ppmLocationID;
        
        /// <remarks/>
        public meterReading outMeterRead;
        
        /// <remarks/>
        public meterReading inMeterRead;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class AVLLog : mspObject {
        
        /// <remarks/>
        public string vehicleID;
        
        /// <remarks/>
        public string AVLID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public AVLState[] AVLStateList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class AVLState : mspObject {
        
        /// <remarks/>
        public System.DateTime GMTTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GMTTimeSpecified;
        
        /// <remarks/>
        public string triggerEvent;
        
        /// <remarks/>
        public GPS GPS;
        
        /// <remarks/>
        public AVLAddress AVLAddress;
        
        /// <remarks/>
        public telemetry telemetry;
        
        /// <remarks/>
        public GPSLocation GPSLocation;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class AVLAddress {
        
        /// <remarks/>
        public string street;
        
        /// <remarks/>
        public string crossStreet;
        
        /// <remarks/>
        public string city;
        
        /// <remarks/>
        public string state;
        
        /// <remarks/>
        public string postalCode;
        
        /// <remarks/>
        public string country;
        
        /// <remarks/>
        public string POIName;
        
        /// <remarks/>
        public string POIType;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class telemetry {
        
        /// <remarks/>
        public speed speed;
        
        /// <remarks/>
        public float heading;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool headingSpecified;
        
        /// <remarks/>
        public string cardinalHeading;
        
        /// <remarks/>
        public odometer odometer;
        
        /// <remarks/>
        public speed maxVehSpeedLastReading;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        public string maxEngineSpeedLastReading;
        
        /// <remarks/>
        public ignitionState ignitionState;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ignitionStateSpecified;
        
        /// <remarks/>
        public string gearShiftPosition;
        
        /// <remarks/>
        public PTOState PTOState;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PTOStateSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public extensionsItem[] extensionsList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class odometer {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public lengthUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum ignitionState {
        
        /// <remarks/>
        On,
        
        /// <remarks/>
        Off,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum PTOState {
        
        /// <remarks/>
        On,
        
        /// <remarks/>
        Off,
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(recloserEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(concentricNeutralCableEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tapeShieldCableEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(lineConstructionEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(synchronousMachineEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(inductionMachineEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ZsmImpedanceEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(loadMixEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(conductorEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(switchEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(sectionalizerEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(regulatorEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(fuseEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(lineEnvironmentalAttributes))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(materialAttributes))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(serviceDropEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(secondaryConductorEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ROWAttributes))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(transformerEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(breakerEntry))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public abstract partial class mspElectricalDefinition : mspObject {
        
        /// <remarks/>
        public string entryName;
        
        /// <remarks/>
        public equipmentType equipmentType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool equipmentTypeSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class recloserEntry : mspElectricalDefinition {
        
        /// <remarks/>
        public voltage ratedVoltage;
        
        /// <remarks/>
        public apparentPower1 ratedPower;
        
        /// <remarks/>
        public current ratedCurrent;
        
        /// <remarks/>
        public voltage bil;
        
        /// <remarks/>
        public frequency frequency;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string numberPhases;
        
        /// <remarks/>
        public bool isGanged;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isGangedSpecified;
        
        /// <remarks/>
        public bool isRemotelyOperable;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isRemotelyOperableSpecified;
        
        /// <remarks/>
        public bool isLoadBreak;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isLoadBreakSpecified;
        
        /// <remarks/>
        public current interruptingRating;
        
        /// <remarks/>
        public current phaseTrip;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string numRecloseLockout;
        
        /// <remarks/>
        public bool isGroundTripCapable;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isGroundTripCapableSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class concentricNeutralCableEntry : mspElectricalDefinition {
        
        /// <remarks/>
        public conductorSize conductorSize;
        
        /// <remarks/>
        public current ampacity;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string coreStranding;
        
        /// <remarks/>
        public eaEquipID coreMaterial;
        
        /// <remarks/>
        public length phaseGMR;
        
        /// <remarks/>
        public eaEquipID insulationMaterial;
        
        /// <remarks/>
        public thickness insulationThickness;
        
        /// <remarks/>
        public thickness ODInsulation;
        
        /// <remarks/>
        public thickness ODScreen;
        
        /// <remarks/>
        public thickness ODCore;
        
        /// <remarks/>
        public thickness ODNeutral;
        
        /// <remarks/>
        public eaEquipID CNMaterial;
        
        /// <remarks/>
        public conductorSize CNStrandSize;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string CNStrandCount;
        
        /// <remarks/>
        public bool isJacketed;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isJacketedSpecified;
        
        /// <remarks/>
        public thickness ODJacket;
        
        /// <remarks/>
        public resistancePerUnitLength rAC;
        
        /// <remarks/>
        public capacitancePerUnitLength capacitance;
        
        /// <remarks/>
        public float coefficientOfFriction;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool coefficientOfFrictionSpecified;
        
        /// <remarks/>
        public weightPerLength weightPerLength;
        
        /// <remarks/>
        public weight maximumPullingTension;
        
        /// <remarks/>
        public length minimumBendingRadius;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class conductorSize {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public sizeUnits sizeUnits;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool sizeUnitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum sizeUnits {
        
        /// <remarks/>
        AWG,
        
        /// <remarks/>
        kcmil,
        
        /// <remarks/>
        MCM,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("square mm")]
        squaremm,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class thickness {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public thicknessUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum thicknessUnits {
        
        /// <remarks/>
        Mils,
        
        /// <remarks/>
        Inches,
        
        /// <remarks/>
        Micrometers,
        
        /// <remarks/>
        Millimeters,
        
        /// <remarks/>
        Centimeters,
        
        /// <remarks/>
        Microns,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class resistancePerUnitLength {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public zUnits resistanceUnits;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool resistanceUnitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public lengthUnits lengthUnits;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lengthUnitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class capacitancePerUnitLength {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public capacitanceUnits capacitanceUnits;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool capacitanceUnitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public lengthUnits lengthUnits;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lengthUnitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum capacitanceUnits {
        
        /// <remarks/>
        F,
        
        /// <remarks/>
        mF,
        
        /// <remarks/>
        microF,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class weightPerLength {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public weightUnits weightUnits;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool weightUnitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public lengthUnits lengthUnits;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lengthUnitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum weightUnits {
        
        /// <remarks/>
        Pound,
        
        /// <remarks/>
        Kilogram,
        
        /// <remarks/>
        Gram,
        
        /// <remarks/>
        Centigram,
        
        /// <remarks/>
        Milligram,
        
        /// <remarks/>
        Microgram,
        
        /// <remarks/>
        Tonne,
        
        /// <remarks/>
        Grain,
        
        /// <remarks/>
        Ounce,
        
        /// <remarks/>
        Stone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Long ton")]
        Longton,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Short ton")]
        Shortton,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class weight {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public weightUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class tapeShieldCableEntry : mspElectricalDefinition {
        
        /// <remarks/>
        public conductorSize conductorSize;
        
        /// <remarks/>
        public current ampacity;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string coreStranding;
        
        /// <remarks/>
        public eaEquipID coreMaterial;
        
        /// <remarks/>
        public length phaseGMR;
        
        /// <remarks/>
        public eaEquipID insulationMaterial;
        
        /// <remarks/>
        public thickness insulationThickness;
        
        /// <remarks/>
        public eaEquipID shieldMaterial;
        
        /// <remarks/>
        public thickness ODInsulation;
        
        /// <remarks/>
        public thickness ODScreen;
        
        /// <remarks/>
        public thickness ODCore;
        
        /// <remarks/>
        public thickness tapeThickness;
        
        /// <remarks/>
        public float lap;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lapSpecified;
        
        /// <remarks/>
        public bool isJacketed;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isJacketedSpecified;
        
        /// <remarks/>
        public thickness ODJacket;
        
        /// <remarks/>
        public resistancePerUnitLength rAC;
        
        /// <remarks/>
        public capacitancePerUnitLength capacitance;
        
        /// <remarks/>
        public float coefficientOfFriction;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool coefficientOfFrictionSpecified;
        
        /// <remarks/>
        public weightPerLength weightPerLength;
        
        /// <remarks/>
        public length minimumBendingRadius;
        
        /// <remarks/>
        public weight maximumPullingTension;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class lineConstructionEntry : mspElectricalDefinition {
        
        /// <remarks/>
        public lineConstructionEntryType type;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeSpecified;
        
        /// <remarks/>
        public voltage maximumVoltage;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public conductorItem[] conductorList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public conductorItem[] neutralConductorList;
        
        /// <remarks/>
        public string downleadConductorID;
        
        /// <remarks/>
        public length downleadLength;
        
        /// <remarks/>
        public resistance1 groundResistance;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum lineConstructionEntryType {
        
        /// <remarks/>
        OH,
        
        /// <remarks/>
        CN,
        
        /// <remarks/>
        TS,
        
        /// <remarks/>
        Secondary,
        
        /// <remarks/>
        ServiceDrop,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class conductorItem {
        
        /// <remarks/>
        public string positionNumber;
        
        /// <remarks/>
        public length hCoordinate;
        
        /// <remarks/>
        public length vCoordinate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string bundleCount;
        
        /// <remarks/>
        public length bundleSeparation;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class synchronousMachineEntry : mspElectricalDefinition {
        
        /// <remarks/>
        public voltage ratedVoltage;
        
        /// <remarks/>
        public eaEquipID ssImpedanceID;
        
        /// <remarks/>
        public eaEquipID tranImpedanceID;
        
        /// <remarks/>
        public eaEquipID stImpedanceID;
        
        /// <remarks/>
        public reactivePower maxLeadQ;
        
        /// <remarks/>
        public reactivePower maxLagQ;
        
        /// <remarks/>
        public voltage maximumVoltage;
        
        /// <remarks/>
        public voltage minimumVoltage;
        
        /// <remarks/>
        public reactivePower maxQ;
        
        /// <remarks/>
        public reactivePower minQ;
        
        /// <remarks/>
        public apparentPower1 ratedMVA;
        
        /// <remarks/>
        public synchronousMachineImpedances impedances;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class inductionMachineEntry : mspElectricalDefinition {
        
        /// <remarks/>
        public float hp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool hpSpecified;
        
        /// <remarks/>
        public float pf;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pfSpecified;
        
        /// <remarks/>
        public float efficiency;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool efficiencySpecified;
        
        /// <remarks/>
        public voltage ratedVoltage;
        
        /// <remarks/>
        public voltage lgVolts;
        
        /// <remarks/>
        public float dropout;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dropoutSpecified;
        
        /// <remarks/>
        public nemaType nemaType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nemaTypeSpecified;
        
        /// <remarks/>
        public float limitVoltage;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool limitVoltageSpecified;
        
        /// <remarks/>
        public float lockedRotorPF;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lockedRotorPFSpecified;
        
        /// <remarks/>
        public float lockedRotorMultiplier;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lockedRotorMultiplierSpecified;
        
        /// <remarks/>
        public inductionMachineImpedances impedances;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class ZsmImpedanceEntry : mspElectricalDefinition {
        
        /// <remarks/>
        public apparentPower1 basePower;
        
        /// <remarks/>
        public voltage baseVoltage;
        
        /// <remarks/>
        public complexImpedanceWithLeakage selfImpedance;
        
        /// <remarks/>
        public complexImpedanceWithLeakage mutualForwardImpedance;
        
        /// <remarks/>
        public complexImpedanceWithLeakage mutualReverseImpedance;
        
        /// <remarks/>
        public complexImpedance positiveSequenceZ;
        
        /// <remarks/>
        public complexImpedance negativeSequenceZ;
        
        /// <remarks/>
        public complexImpedance zeroSequenceZ;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class complexImpedanceWithLeakage {
        
        /// <remarks/>
        public string r;
        
        /// <remarks/>
        public string x;
        
        /// <remarks/>
        public string b;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string units;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class loadMixEntry : mspElectricalDefinition {
        
        /// <remarks/>
        public float constantPower;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool constantPowerSpecified;
        
        /// <remarks/>
        public float constantImpedance;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool constantImpedanceSpecified;
        
        /// <remarks/>
        public float constantCurrent;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool constantCurrentSpecified;
        
        /// <remarks/>
        public ldConnection connection;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool connectionSpecified;
        
        /// <remarks/>
        public bool conformingLoadFlag;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool conformingLoadFlagSpecified;
        
        /// <remarks/>
        public float powerFactor;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool powerFactorSpecified;
        
        /// <remarks/>
        public float pFrequencyExponent;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pFrequencyExponentSpecified;
        
        /// <remarks/>
        public float pVoltageExponent;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pVoltageExponentSpecified;
        
        /// <remarks/>
        public float qFrequencyExponent;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool qFrequencyExponentSpecified;
        
        /// <remarks/>
        public float qVoltageExponent;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool qVoltageExponentSpecified;
        
        /// <remarks/>
        public CIMLoadCharacteristics CIMLoadCharacteristics;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum ldConnection {
        
        /// <remarks/>
        Wye,
        
        /// <remarks/>
        Delta,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Center tap")]
        Centertap,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class CIMLoadCharacteristics {
        
        /// <remarks/>
        public ConformLoadSchedule conformLoadSchedule;
        
        /// <remarks/>
        public NonConformLoadSchedule nonConformLoadSchedule;
        
        /// <remarks/>
        public PerCent feederLoadMgtFactor;
        
        /// <remarks/>
        public PerCent mVArColdPickUpFactor;
        
        /// <remarks/>
        public PerCent mWColdPickUpFactor;
        
        /// <remarks/>
        public float loadAllocationFactor;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool loadAllocationFactorSpecified;
        
        /// <remarks/>
        public string subLoadAreaID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class conductorEntry : mspElectricalDefinition {
        
        /// <remarks/>
        public conductorSize conductorSize;
        
        /// <remarks/>
        public current ampacity;
        
        /// <remarks/>
        public string stranding;
        
        /// <remarks/>
        public material material;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool materialSpecified;
        
        /// <remarks/>
        public string conductorName;
        
        /// <remarks/>
        public thickness coreDiameter;
        
        /// <remarks/>
        public thickness outsideDiameter;
        
        /// <remarks/>
        public length GMR;
        
        /// <remarks/>
        public resistancePerUnitLength rDC1;
        
        /// <remarks/>
        public resistancePerUnitLength rAC1;
        
        /// <remarks/>
        public resistancePerUnitLength rAC2;
        
        /// <remarks/>
        public resistancePerUnitLength rAC3;
        
        /// <remarks/>
        public weightPerLength weightPerLength;
        
        /// <remarks/>
        public weight breakingStrength;
        
        /// <remarks/>
        public float defaultStringingTension;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool defaultStringingTensionSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum material {
        
        /// <remarks/>
        AAAC,
        
        /// <remarks/>
        AAC,
        
        /// <remarks/>
        ACAR,
        
        /// <remarks/>
        ACSR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ACSR/T2")]
        ACSRT2,
        
        /// <remarks/>
        AlumoWeld,
        
        /// <remarks/>
        Anaconda,
        
        /// <remarks/>
        CopperWeld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("CopperWeld copper")]
        CopperWeldcopper,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Expanded ACSR")]
        ExpandedACSR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Galvanized steel")]
        Galvanizedsteel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Hard drawn aluminum")]
        Harddrawnaluminum,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Hard drawn copper")]
        Harddrawncopper,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("HH hollow copper")]
        HHhollowcopper,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("High strength steel")]
        Highstrengthsteel,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Stainless steel strand")]
        Stainlesssteelstrand,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class switchEntry : mspElectricalDefinition {
        
        /// <remarks/>
        public voltage ratedVoltage;
        
        /// <remarks/>
        public apparentPower1 ratedPower;
        
        /// <remarks/>
        public current ratedCurrent;
        
        /// <remarks/>
        public voltage bil;
        
        /// <remarks/>
        public frequency frequency;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string numberPhases;
        
        /// <remarks/>
        public bool isGanged;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isGangedSpecified;
        
        /// <remarks/>
        public bool isRemotelyOperable;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isRemotelyOperableSpecified;
        
        /// <remarks/>
        public current interruptingRating;
        
        /// <remarks/>
        public bool isLoadBreak;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isLoadBreakSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class sectionalizerEntry : mspElectricalDefinition {
        
        /// <remarks/>
        public voltage ratedVoltage;
        
        /// <remarks/>
        public apparentPower1 ratedPower;
        
        /// <remarks/>
        public current ratedCurrent;
        
        /// <remarks/>
        public voltage bil;
        
        /// <remarks/>
        public frequency frequency;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string numberPhases;
        
        /// <remarks/>
        public bool isGanged;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isGangedSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string maximumCounts;
        
        /// <remarks/>
        public bool isLoadBreak;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isLoadBreakSpecified;
        
        /// <remarks/>
        public duration resetTime;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class regulatorEntry : mspElectricalDefinition {
        
        /// <remarks/>
        public voltage ratedVoltage;
        
        /// <remarks/>
        public apparentPower1 ratedPower;
        
        /// <remarks/>
        public current ampacity;
        
        /// <remarks/>
        public voltage bil;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string numberOfSteps;
        
        /// <remarks/>
        public float stepVoltageIncrement;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool stepVoltageIncrementSpecified;
        
        /// <remarks/>
        public double ptRatio;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ptRatioSpecified;
        
        /// <remarks/>
        public current ctRating;
        
        /// <remarks/>
        public regulatorWindingType windingType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool windingTypeSpecified;
        
        /// <remarks/>
        public frequency frequency;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum regulatorWindingType {
        
        /// <remarks/>
        A,
        
        /// <remarks/>
        B,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class fuseEntry : mspElectricalDefinition {
        
        /// <remarks/>
        public voltage ratedVoltage;
        
        /// <remarks/>
        public current ratedCurrent;
        
        /// <remarks/>
        public voltage bil;
        
        /// <remarks/>
        public current linkRtg;
        
        /// <remarks/>
        public string fuseSpeed;
        
        /// <remarks/>
        public frequency frequency;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string numberPhases;
        
        /// <remarks/>
        public bool isGanged;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isGangedSpecified;
        
        /// <remarks/>
        public current interruptingRating;
        
        /// <remarks/>
        public bool isLoadBreak;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isLoadBreakSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class lineEnvironmentalAttributes : mspElectricalDefinition {
        
        /// <remarks/>
        public resistivity soilResistivity;
        
        /// <remarks/>
        public resistance1 defaultPoleGroundResistance;
        
        /// <remarks/>
        public temperature temperature;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string groundSpacing;
        
        /// <remarks/>
        public length spanLength;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class resistivity {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public resistivityUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum resistivityUnits {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ohm-meter")]
        Ohmmeter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ohm-inch")]
        Ohminch,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ohm-centimeter")]
        Ohmcentimeter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Microohm-centimeter")]
        Microohmcentimeter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Microohm-inch")]
        Microohminch,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Statohm-centimeter")]
        Statohmcentimeter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Abohm-centimetercircular")]
        Abohmcentimetercircular,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Circular mil ohm/foot")]
        Circularmilohmfoot,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class materialAttributes : mspElectricalDefinition {
        
        /// <remarks/>
        public resistivity resistivity;
        
        /// <remarks/>
        public thermalCoefficientOfResistance m;
        
        /// <remarks/>
        public float dielectricConstant;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dielectricConstantSpecified;
        
        /// <remarks/>
        public float relativePermeability;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool relativePermeabilitySpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class thermalCoefficientOfResistance {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public thermalCoefficientOfResistanceUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum thermalCoefficientOfResistanceUnits {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Reciprocal degrees C")]
        ReciprocaldegreesC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Reciprocal degrees K")]
        ReciprocaldegreesK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Reciprocal degrees F")]
        ReciprocaldegreesF,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class serviceDropEntry : mspElectricalDefinition {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class secondaryConductorEntry : mspElectricalDefinition {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string numberPhaseConductors;
        
        /// <remarks/>
        public eaEquipID conductorMaterial;
        
        /// <remarks/>
        public conductorSize phaseSize;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string phaseStranding;
        
        /// <remarks/>
        public thickness insulationThickness;
        
        /// <remarks/>
        public eaEquipID insulatorMaterial;
        
        /// <remarks/>
        public eaEquipID neutralMaterial;
        
        /// <remarks/>
        public conductorSize neutralSize;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string neutralStranding;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class ROWAttributes : mspElectricalDefinition {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public circuit[] circuitList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class circuit {
        
        /// <remarks/>
        public objectRef electricLineID;
        
        /// <remarks/>
        public eaEquipID lineConstructionType;
        
        /// <remarks/>
        public length hCoordinate;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class transformerEntry : mspElectricalDefinition {
        
        /// <remarks/>
        public realPower noLoadLoss;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public winding[] windingAttributes;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public windingPair[] windingPairAttributes;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class winding {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string windingNumber;
        
        /// <remarks/>
        public voltage ratedVoltage;
        
        /// <remarks/>
        public apparentPower1 ratedPower;
        
        /// <remarks/>
        public apparentPower1 emergencyRating;
        
        /// <remarks/>
        public voltage insulationBIL;
        
        /// <remarks/>
        public windingConnection windingConnection;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool windingConnectionSpecified;
        
        /// <remarks/>
        public clockPosition phaseShift;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseShiftSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum windingConnection {
        
        /// <remarks/>
        Delta,
        
        /// <remarks/>
        Wye,
        
        /// <remarks/>
        Zigzag,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Center tap")]
        Centertap,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum clockPosition {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Item6,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        Item7,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8")]
        Item8,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9")]
        Item9,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10")]
        Item10,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("11")]
        Item11,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class windingPair {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string firstWindingNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string secondWindingNumber;
        
        /// <remarks/>
        public realPower loadLoss;
        
        /// <remarks/>
        public complexImpedance positiveSeqImpedance;
        
        /// <remarks/>
        public complexImpedance zeroSeqImpedance;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class breakerEntry : mspElectricalDefinition {
        
        /// <remarks/>
        public voltage ratedVoltage;
        
        /// <remarks/>
        public apparentPower1 ratedPower;
        
        /// <remarks/>
        public current ratedCurrent;
        
        /// <remarks/>
        public voltage bil;
        
        /// <remarks/>
        public frequency frequency;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string numberPhases;
        
        /// <remarks/>
        public bool isGanged;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isGangedSpecified;
        
        /// <remarks/>
        public current interruptingRating;
        
        /// <remarks/>
        public seconds inTransitTime;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class HANDeviceGroup : mspObject {
        
        /// <remarks/>
        public string groupName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public HANDeviceID[] HANDeviceList;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(meterBaseExchange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LMDeviceExchange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(inHomeDisplayExchange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CDDeviceExchange))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public abstract partial class mspDeviceExchange : mspObject {
        
        /// <remarks/>
        public string serviceLocationID;
        
        /// <remarks/>
        public serviceID serviceID;
        
        /// <remarks/>
        public string meterBaseID;
        
        /// <remarks/>
        public meterID meterID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class meterBaseExchange : mspDeviceExchange {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class LMDeviceExchange : mspDeviceExchange {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class inHomeDisplayExchange : mspDeviceExchange {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class CDDeviceExchange : mspDeviceExchange {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(shortCircuitAnalysisResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(loadFlowResult))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public abstract partial class mspResultsBase : mspObject {
        
        /// <remarks/>
        public resultsType resultsType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool resultsTypeSpecified;
        
        /// <remarks/>
        public string source;
        
        /// <remarks/>
        public string feeder;
        
        /// <remarks/>
        public eaLoc eaLoc;
        
        /// <remarks/>
        public objectRef parentID;
        
        /// <remarks/>
        public phaseCode phaseCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseCodeSpecified;
        
        /// <remarks/>
        public loadConnection loadCon;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool loadConSpecified;
        
        /// <remarks/>
        public string equipRef;
        
        /// <remarks/>
        public length distanceFromSource;
        
        /// <remarks/>
        public length sectionLength;
        
        /// <remarks/>
        public voltage baseVoltageA;
        
        /// <remarks/>
        public voltage baseVoltageB;
        
        /// <remarks/>
        public voltage baseVoltageC;
        
        /// <remarks/>
        public voltage baseVoltageBalanced;
        
        /// <remarks/>
        public apparentPower1 basePower;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum resultsType {
        
        /// <remarks/>
        loadFlow,
        
        /// <remarks/>
        shortCircuit,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class shortCircuitAnalysisResult : mspResultsBase {
        
        /// <remarks/>
        public complexImpedance faultImpedance;
        
        /// <remarks/>
        public current minimumLGFault;
        
        /// <remarks/>
        public current maximumLGFault;
        
        /// <remarks/>
        public current maximumLLFault;
        
        /// <remarks/>
        public current maximumLLGFault;
        
        /// <remarks/>
        public current maximumLLLGFault;
        
        /// <remarks/>
        public impedance positiveSequenceZ;
        
        /// <remarks/>
        public impedance negativeSequenceZ;
        
        /// <remarks/>
        public impedance zeroSequenceZ;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class impedance {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public zUnits units;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class loadFlowResult : mspResultsBase {
        
        /// <remarks/>
        public voltage priKvA;
        
        /// <remarks/>
        public voltage priKvB;
        
        /// <remarks/>
        public voltage priKvC;
        
        /// <remarks/>
        public voltage priKvBal;
        
        /// <remarks/>
        public sectionDrop sectionDropA;
        
        /// <remarks/>
        public sectionDrop sectionDropB;
        
        /// <remarks/>
        public sectionDrop sectionDropC;
        
        /// <remarks/>
        public sectionDrop sectionDropBal;
        
        /// <remarks/>
        public cumulativeDrop cumulativeDropA;
        
        /// <remarks/>
        public cumulativeDrop cumulativeDropB;
        
        /// <remarks/>
        public cumulativeDrop cumulativeDropC;
        
        /// <remarks/>
        public cumulativeDrop cumulativeDropBal;
        
        /// <remarks/>
        public current thruCurrentA;
        
        /// <remarks/>
        public current thruCurrentB;
        
        /// <remarks/>
        public current thruCurrentC;
        
        /// <remarks/>
        public current thruCurrentBal;
        
        /// <remarks/>
        public float pctCapA;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pctCapASpecified;
        
        /// <remarks/>
        public float pctCapB;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pctCapBSpecified;
        
        /// <remarks/>
        public float pctCapC;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pctCapCSpecified;
        
        /// <remarks/>
        public float pctCapBal;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pctCapBalSpecified;
        
        /// <remarks/>
        public realPower thruPowerA;
        
        /// <remarks/>
        public realPower thruPowerB;
        
        /// <remarks/>
        public realPower thruPowerC;
        
        /// <remarks/>
        public realPower thruPowerBal;
        
        /// <remarks/>
        public reactivePower thruReactiveA;
        
        /// <remarks/>
        public reactivePower thruReactiveB;
        
        /// <remarks/>
        public reactivePower thruReactiveC;
        
        /// <remarks/>
        public reactivePower thruReactiveBal;
        
        /// <remarks/>
        public float pctPfA;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pctPfASpecified;
        
        /// <remarks/>
        public float pctPfB;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pctPfBSpecified;
        
        /// <remarks/>
        public float pctPfC;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pctPfCSpecified;
        
        /// <remarks/>
        public float pctPfBal;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pctPfBalSpecified;
        
        /// <remarks/>
        public float pctLoss;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pctLossSpecified;
        
        /// <remarks/>
        public realPower sectPowerA;
        
        /// <remarks/>
        public realPower sectPowerB;
        
        /// <remarks/>
        public realPower sectPowerC;
        
        /// <remarks/>
        public realPower sectPowerBal;
        
        /// <remarks/>
        public reactivePower secReactiveA;
        
        /// <remarks/>
        public reactivePower secReactiveB;
        
        /// <remarks/>
        public reactivePower secReactiveC;
        
        /// <remarks/>
        public reactivePower secReactiveBal;
        
        /// <remarks/>
        public long consOnA;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool consOnASpecified;
        
        /// <remarks/>
        public long consOnB;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool consOnBSpecified;
        
        /// <remarks/>
        public long consOnC;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool consOnCSpecified;
        
        /// <remarks/>
        public long consOnBal;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool consOnBalSpecified;
        
        /// <remarks/>
        public long consThruA;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool consThruASpecified;
        
        /// <remarks/>
        public long consThruB;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool consThruBSpecified;
        
        /// <remarks/>
        public long consThruC;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool consThruCSpecified;
        
        /// <remarks/>
        public long consThruBal;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool consThruBalSpecified;
        
        /// <remarks/>
        public voltage baseVoltage;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class ppmStatus {
        
        /// <remarks/>
        public string meterStatus;
        
        /// <remarks/>
        public errorObject errorObject;
        
        /// <remarks/>
        public remainingBalance remainingBalance;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class errorObject {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string objectID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string errorString;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string nounType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.DateTime eventTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool eventTimeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class cashPayment {
        
        /// <remarks/>
        public tender tender;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class achPayment {
        
        /// <remarks/>
        public checkInfo checkInfo;
        
        /// <remarks/>
        public tender tender;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class checkInfo {
        
        /// <remarks/>
        public string checkingAccountNumber;
        
        /// <remarks/>
        public string bankRoutingNumber;
        
        /// <remarks/>
        public string nameOnCheck;
        
        /// <remarks/>
        public string checkNumber;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class eCheckPayment {
        
        /// <remarks/>
        public checkInfo checkInfo;
        
        /// <remarks/>
        public tender tender;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class creditCardInfo {
        
        /// <remarks/>
        public string type;
        
        /// <remarks/>
        public string creditCardNumber;
        
        /// <remarks/>
        public string creditCardExpDate;
        
        /// <remarks/>
        public string cardVerificationValue;
        
        /// <remarks/>
        public string firstName;
        
        /// <remarks/>
        public string lastName;
        
        /// <remarks/>
        public string mName;
        
        /// <remarks/>
        public string suffix;
        
        /// <remarks/>
        public address address;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class creditCardPayment {
        
        /// <remarks/>
        public creditCardInfo creditCardInfo;
        
        /// <remarks/>
        public tender tender;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class paymentTransaction {
        
        /// <remarks/>
        public string accountNumber;
        
        /// <remarks/>
        public string typeService;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("creditCardPayment")]
        public creditCardPayment[] creditCardPayment;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("eCheckPayment")]
        public eCheckPayment[] eCheckPayment;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("achPayment")]
        public achPayment[] achPayment;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("cashPayment")]
        public cashPayment[] cashPayment;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class HANRegistration {
        
        /// <remarks/>
        public HANDeviceID deviceID;
        
        /// <remarks/>
        public HANInterfaceID interfaceID;
        
        /// <remarks/>
        public HANRegistrationStatus registrationStatus;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum HANRegistrationStatus {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        Joining,
        
        /// <remarks/>
        Leaving,
        
        /// <remarks/>
        Connected,
        
        /// <remarks/>
        Disconnected,
        
        /// <remarks/>
        Registered,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class registrationStatus {
        
        /// <remarks/>
        public HANInterfaceID interfaceID;
        
        /// <remarks/>
        public HANDeviceID deviceID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class HANSecurityToken {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string encoding;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string tokenType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class readingScheduleResult {
        
        /// <remarks/>
        public string readingScheduleID;
        
        /// <remarks/>
        public readingSchedulingResult result;
        
        /// <remarks/>
        public string reason;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum readingSchedulingResult {
        
        /// <remarks/>
        Accepted,
        
        /// <remarks/>
        Rejected,
        
        /// <remarks/>
        RejectedInPart,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class thermostatScheduleTime {
        
        /// <remarks/>
        public System.DateTime startTime;
        
        /// <remarks/>
        public temperature coolingSetPoint;
        
        /// <remarks/>
        public temperature heatingSetPoint;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class thermostatScheduleDay {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("day", IsNullable=false)]
        public dayLabel[] days;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("setPoint", IsNullable=false)]
        public thermostatScheduleTime[] setPoints;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class tunnelCommandContent {
        
        /// <remarks/>
        public string commandContent;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string commandEncoding;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class HANGroupID {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string groupName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string deviceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string objectID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string utility;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class capabilityActionCode {
        
        /// <remarks/>
        public string capabilityActionCodeName;
        
        /// <remarks/>
        public string capabilityActionCodeValue;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class capabilityAction {
        
        /// <remarks/>
        public string conditionIdentifier;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public capabilityActionCode[] capabilityActionCodes;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public partial class inHomeDisplayCapabilitySetting {
        
        /// <remarks/>
        public string capabilityCode;
        
        /// <remarks/>
        public string conditionCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public capabilityAction[] capabilityActions;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum IHDMessageStatus {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        Accepted,
        
        /// <remarks/>
        Cancelled,
        
        /// <remarks/>
        Displayed,
        
        /// <remarks/>
        Off,
        
        /// <remarks/>
        Expired,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.multispeak.org/Version_4.1_Release")]
    public enum IHDMessageType {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        BillingMessage,
        
        /// <remarks/>
        Message,
        
        /// <remarks/>
        Unknown,
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateIHDCapabilitySettingsCompletedEventHandler(object sender, InitiateIHDCapabilitySettingsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateIHDCapabilitySettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateIHDCapabilitySettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateIHDCapabilitySettingsToGroupCompletedEventHandler(object sender, InitiateIHDCapabilitySettingsToGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateIHDCapabilitySettingsToGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateIHDCapabilitySettingsToGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateManufacturerSpecificCommandCompletedEventHandler(object sender, InitiateManufacturerSpecificCommandCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateManufacturerSpecificCommandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateManufacturerSpecificCommandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateManufacturerSpecificCommandToGroupCompletedEventHandler(object sender, InitiateManufacturerSpecificCommandToGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateManufacturerSpecificCommandToGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateManufacturerSpecificCommandToGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void ManufacturerSpecificCommandNotificationCompletedEventHandler(object sender, ManufacturerSpecificCommandNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ManufacturerSpecificCommandNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ManufacturerSpecificCommandNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void ThermostatAddNotificationCompletedEventHandler(object sender, ThermostatAddNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ThermostatAddNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ThermostatAddNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void ThermostatRemoveNotificationCompletedEventHandler(object sender, ThermostatRemoveNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ThermostatRemoveNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ThermostatRemoveNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void ThermostatScheduleNotificationCompletedEventHandler(object sender, ThermostatScheduleNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ThermostatScheduleNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ThermostatScheduleNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void ThermostatScheduleConfirmedNotificationCompletedEventHandler(object sender, ThermostatScheduleConfirmedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ThermostatScheduleConfirmedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ThermostatScheduleConfirmedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void ThermostatConfigurationNotificationCompletedEventHandler(object sender, ThermostatConfigurationNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ThermostatConfigurationNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ThermostatConfigurationNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateThermostatScheduleCompletedEventHandler(object sender, InitiateThermostatScheduleCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateThermostatScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateThermostatScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateThermostatScheduleRequestCompletedEventHandler(object sender, InitiateThermostatScheduleRequestCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateThermostatScheduleRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateThermostatScheduleRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateThermostatConfigurationCompletedEventHandler(object sender, InitiateThermostatConfigurationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateThermostatConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateThermostatConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateThermostatConfigurationRequestCompletedEventHandler(object sender, InitiateThermostatConfigurationRequestCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateThermostatConfigurationRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateThermostatConfigurationRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void IHDCapabilitySettingsNotificationCompletedEventHandler(object sender, IHDCapabilitySettingsNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IHDCapabilitySettingsNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IHDCapabilitySettingsNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetIHDGroupNamesByInHomeDisplayIDCompletedEventHandler(object sender, GetIHDGroupNamesByInHomeDisplayIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIHDGroupNamesByInHomeDisplayIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIHDGroupNamesByInHomeDisplayIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void EstablishIHDGroupCompletedEventHandler(object sender, EstablishIHDGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EstablishIHDGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EstablishIHDGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void DeleteIHDGroupCompletedEventHandler(object sender, DeleteIHDGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteIHDGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteIHDGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void DeleteHANDeviceGroupCompletedEventHandler(object sender, DeleteHANDeviceGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteHANDeviceGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteHANDeviceGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InHomeDisplayMessageNotificationCompletedEventHandler(object sender, InHomeDisplayMessageNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InHomeDisplayMessageNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InHomeDisplayMessageNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateInHomeDisplayMessageToGroupCompletedEventHandler(object sender, InitiateInHomeDisplayMessageToGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateInHomeDisplayMessageToGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateInHomeDisplayMessageToGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateInHomeDisplayMessageCompletedEventHandler(object sender, InitiateInHomeDisplayMessageCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateInHomeDisplayMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateInHomeDisplayMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateHANCommissioningCompletedEventHandler(object sender, InitiateHANCommissioningCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateHANCommissioningCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateHANCommissioningCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void HANCommissioningNotificationCompletedEventHandler(object sender, HANCommissioningNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HANCommissioningNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HANCommissioningNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CancelInHomeDisplayMessageCompletedEventHandler(object sender, CancelInHomeDisplayMessageCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelInHomeDisplayMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelInHomeDisplayMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CancelInHomeDisplayMessageToGroupCompletedEventHandler(object sender, CancelInHomeDisplayMessageToGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelInHomeDisplayMessageToGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelInHomeDisplayMessageToGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InHomeDisplayBillingMessageNotificationCompletedEventHandler(object sender, InHomeDisplayBillingMessageNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InHomeDisplayBillingMessageNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InHomeDisplayBillingMessageNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void ReadingScheduleResultNotificationCompletedEventHandler(object sender, ReadingScheduleResultNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadingScheduleResultNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadingScheduleResultNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void MeterEventNotificationCompletedEventHandler(object sender, MeterEventNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeterEventNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MeterEventNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void MeterBaseExchangeNotificationCompletedEventHandler(object sender, MeterBaseExchangeNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeterBaseExchangeNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MeterBaseExchangeNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void MeterBaseInstalledNotificationCompletedEventHandler(object sender, MeterBaseInstalledNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeterBaseInstalledNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MeterBaseInstalledNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void MeterBaseChangedNotificationCompletedEventHandler(object sender, MeterBaseChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeterBaseChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MeterBaseChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void MeterBaseRemoveNotificationCompletedEventHandler(object sender, MeterBaseRemoveNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeterBaseRemoveNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MeterBaseRemoveNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void MeterBaseRetireNotificationCompletedEventHandler(object sender, MeterBaseRetireNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeterBaseRetireNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MeterBaseRetireNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void MeterBaseAddNotificationCompletedEventHandler(object sender, MeterBaseAddNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeterBaseAddNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MeterBaseAddNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void ConnectDisconnectChangedNotificationCompletedEventHandler(object sender, ConnectDisconnectChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConnectDisconnectChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConnectDisconnectChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void PricingTiersChangedNotificationCompletedEventHandler(object sender, PricingTiersChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PricingTiersChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PricingTiersChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void TemperatureTiersChangedNotificationCompletedEventHandler(object sender, TemperatureTiersChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TemperatureTiersChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TemperatureTiersChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void LoadCycleTiersChangedNotificationCompletedEventHandler(object sender, LoadCycleTiersChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadCycleTiersChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadCycleTiersChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void ServiceOrderChangedNotificationCompletedEventHandler(object sender, ServiceOrderChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServiceOrderChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ServiceOrderChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void ServiceOrderOpenedNotificationCompletedEventHandler(object sender, ServiceOrderOpenedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServiceOrderOpenedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ServiceOrderOpenedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void ServiceOrderClosedNotificationCompletedEventHandler(object sender, ServiceOrderClosedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServiceOrderClosedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ServiceOrderClosedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void UsageMonitoringNotificationCompletedEventHandler(object sender, UsageMonitoringNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UsageMonitoringNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UsageMonitoringNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void LMDeviceAddNotificationCompletedEventHandler(object sender, LMDeviceAddNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LMDeviceAddNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LMDeviceAddNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void LMDeviceChangedNotificationCompletedEventHandler(object sender, LMDeviceChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LMDeviceChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LMDeviceChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void LMDeviceExchangeNotificationCompletedEventHandler(object sender, LMDeviceExchangeNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LMDeviceExchangeNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LMDeviceExchangeNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void LMDeviceRemoveNotificationCompletedEventHandler(object sender, LMDeviceRemoveNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LMDeviceRemoveNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LMDeviceRemoveNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void LMDeviceRetireNotificationCompletedEventHandler(object sender, LMDeviceRetireNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LMDeviceRetireNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LMDeviceRetireNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void SCADAAnalogChangedNotificationCompletedEventHandler(object sender, SCADAAnalogChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SCADAAnalogChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SCADAAnalogChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void SCADAAnalogChangedNotificationByPointIDCompletedEventHandler(object sender, SCADAAnalogChangedNotificationByPointIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SCADAAnalogChangedNotificationByPointIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SCADAAnalogChangedNotificationByPointIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void SCADAAnalogChangedNotificationForPowerCompletedEventHandler(object sender, SCADAAnalogChangedNotificationForPowerCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SCADAAnalogChangedNotificationForPowerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SCADAAnalogChangedNotificationForPowerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void SCADAAnalogChangedNotificationForVoltageCompletedEventHandler(object sender, SCADAAnalogChangedNotificationForVoltageCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SCADAAnalogChangedNotificationForVoltageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SCADAAnalogChangedNotificationForVoltageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void SCADAPointChangedNotificationCompletedEventHandler(object sender, SCADAPointChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SCADAPointChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SCADAPointChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void SCADAPointChangedNotificationForAnalogCompletedEventHandler(object sender, SCADAPointChangedNotificationForAnalogCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SCADAPointChangedNotificationForAnalogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SCADAPointChangedNotificationForAnalogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void SCADAPointChangedNotificationForStatusCompletedEventHandler(object sender, SCADAPointChangedNotificationForStatusCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SCADAPointChangedNotificationForStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SCADAPointChangedNotificationForStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void SCADAStatusChangedNotificationCompletedEventHandler(object sender, SCADAStatusChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SCADAStatusChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SCADAStatusChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void SCADAStatusChangedNotificationByPointIDCompletedEventHandler(object sender, SCADAStatusChangedNotificationByPointIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SCADAStatusChangedNotificationByPointIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SCADAStatusChangedNotificationByPointIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void StatusChangedNotificationByPointIDCompletedEventHandler(object sender, StatusChangedNotificationByPointIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StatusChangedNotificationByPointIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StatusChangedNotificationByPointIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void AnalogChangedNotificationByPointIDCompletedEventHandler(object sender, AnalogChangedNotificationByPointIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AnalogChangedNotificationByPointIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AnalogChangedNotificationByPointIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetSubstationNamesCompletedEventHandler(object sender, GetSubstationNamesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubstationNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubstationNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetDownlineCircuitElementsCompletedEventHandler(object sender, GetDownlineCircuitElementsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDownlineCircuitElementsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDownlineCircuitElementsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public circuitElement[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((circuitElement[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetUplineCircuitElementsCompletedEventHandler(object sender, GetUplineCircuitElementsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUplineCircuitElementsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUplineCircuitElementsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public circuitElement[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((circuitElement[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetChildCircuitElementsCompletedEventHandler(object sender, GetChildCircuitElementsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChildCircuitElementsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChildCircuitElementsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public circuitElement[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((circuitElement[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetParentCircuitElementsCompletedEventHandler(object sender, GetParentCircuitElementsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetParentCircuitElementsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetParentCircuitElementsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public circuitElement[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((circuitElement[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAllCircuitElementsCompletedEventHandler(object sender, GetAllCircuitElementsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllCircuitElementsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllCircuitElementsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public circuitElement[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((circuitElement[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetModifiedCircuitElementsCompletedEventHandler(object sender, GetModifiedCircuitElementsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetModifiedCircuitElementsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetModifiedCircuitElementsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public circuitElement[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((circuitElement[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetDownlineMeterConnectivityCompletedEventHandler(object sender, GetDownlineMeterConnectivityCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDownlineMeterConnectivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDownlineMeterConnectivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meterConnectivity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meterConnectivity[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetUplineMeterConnectivityCompletedEventHandler(object sender, GetUplineMeterConnectivityCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUplineMeterConnectivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUplineMeterConnectivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meterConnectivity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meterConnectivity[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetSiblingMeterConnectivityCompletedEventHandler(object sender, GetSiblingMeterConnectivityCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiblingMeterConnectivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSiblingMeterConnectivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meterConnectivity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meterConnectivity[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAllOtherMetersCompletedEventHandler(object sender, GetAllOtherMetersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllOtherMetersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllOtherMetersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public otherMeter[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((otherMeter[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAllServiceLocationsCompletedEventHandler(object sender, GetAllServiceLocationsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllServiceLocationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllServiceLocationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public serviceLocation[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((serviceLocation[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetBilledUsageCompletedEventHandler(object sender, GetBilledUsageCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBilledUsageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBilledUsageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public billedUsage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((billedUsage)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetBillingDataCompletedEventHandler(object sender, GetBillingDataCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBillingDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBillingDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public billingData[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((billingData[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetBillingDetailCompletedEventHandler(object sender, GetBillingDetailCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBillingDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBillingDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public billingDetail[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((billingDetail[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetChargeableDevicesByAccountNumberCompletedEventHandler(object sender, GetChargeableDevicesByAccountNumberCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChargeableDevicesByAccountNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChargeableDevicesByAccountNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public chargeableDevice[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((chargeableDevice[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetIHDGroupMembersCompletedEventHandler(object sender, GetIHDGroupMembersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIHDGroupMembersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIHDGroupMembersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public inHomeDisplayGroup Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((inHomeDisplayGroup)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetIHDGroupNamesCompletedEventHandler(object sender, GetIHDGroupNamesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIHDGroupNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIHDGroupNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateHANRegistrationCompletedEventHandler(object sender, InitiateHANRegistrationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateHANRegistrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateHANRegistrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CancelHANRegistrationCompletedEventHandler(object sender, CancelHANRegistrationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelHANRegistrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelHANRegistrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateHANRegistrationStatusRequestCompletedEventHandler(object sender, InitiateHANRegistrationStatusRequestCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateHANRegistrationStatusRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateHANRegistrationStatusRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void HANRegistrationNotificationCompletedEventHandler(object sender, HANRegistrationNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HANRegistrationNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HANRegistrationNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetMeterHistoryByMeterIDCompletedEventHandler(object sender, GetMeterHistoryByMeterIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMeterHistoryByMeterIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMeterHistoryByMeterIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meterHistoryEvent[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meterHistoryEvent[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetPPMBalanceAdjustmentsCompletedEventHandler(object sender, GetPPMBalanceAdjustmentsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPPMBalanceAdjustmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPPMBalanceAdjustmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public ppmBalanceAdjustment[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ppmBalanceAdjustment[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetPPMCustomerCompletedEventHandler(object sender, GetPPMCustomerCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPPMCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPPMCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public ppmLocation Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ppmLocation)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetPPMPaymentsCompletedEventHandler(object sender, GetPPMPaymentsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPPMPaymentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPPMPaymentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public paymentTransaction[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((paymentTransaction[][])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetServiceOrderByServiceOrderIDCompletedEventHandler(object sender, GetServiceOrderByServiceOrderIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceOrderByServiceOrderIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceOrderByServiceOrderIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public serviceOrder Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((serviceOrder)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetServiceOrdersByServiceLocationCompletedEventHandler(object sender, GetServiceOrdersByServiceLocationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceOrdersByServiceLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceOrdersByServiceLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public serviceOrder[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((serviceOrder[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetServiceOrdersByStatusCompletedEventHandler(object sender, GetServiceOrdersByStatusCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceOrdersByStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceOrdersByStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public serviceOrder[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((serviceOrder[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void AdjustPPMBalanceCompletedEventHandler(object sender, AdjustPPMBalanceCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustPPMBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustPPMBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CommitPaymentTransactionCompletedEventHandler(object sender, CommitPaymentTransactionCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitPaymentTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitPaymentTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public paymentTransaction[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((paymentTransaction[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void EnrollPPMCustomerCompletedEventHandler(object sender, EnrollPPMCustomerCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnrollPPMCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnrollPPMCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void UnenrollPPMCustomerCompletedEventHandler(object sender, UnenrollPPMCustomerCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnenrollPPMCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnenrollPPMCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetPrePayStatusCompletedEventHandler(object sender, GetPrePayStatusCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrePayStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPrePayStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public ppmStatus[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ppmStatus[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetMeterConnectivityByMeterIDCompletedEventHandler(object sender, GetMeterConnectivityByMeterIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMeterConnectivityByMeterIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMeterConnectivityByMeterIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meterConnectivity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meterConnectivity)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateMeterEventMonitoringCompletedEventHandler(object sender, InitiateMeterEventMonitoringCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateMeterEventMonitoringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateMeterEventMonitoringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CancelMeterEventMonitoringCompletedEventHandler(object sender, CancelMeterEventMonitoringCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelMeterEventMonitoringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelMeterEventMonitoringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetMetersByMeterConnectionStatusCompletedEventHandler(object sender, GetMetersByMeterConnectionStatusCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMetersByMeterConnectionStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMetersByMeterConnectionStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meters Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meters)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetMeterByTransponderIDCompletedEventHandler(object sender, GetMeterByTransponderIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMeterByTransponderIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMeterByTransponderIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meters Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meters)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void IsCDSupportedCompletedEventHandler(object sender, IsCDSupportedCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsCDSupportedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsCDSupportedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateThresholdMonitoringCompletedEventHandler(object sender, InitiateThresholdMonitoringCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateThresholdMonitoringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateThresholdMonitoringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void AdjustThresholdMonitoringCompletedEventHandler(object sender, AdjustThresholdMonitoringCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustThresholdMonitoringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustThresholdMonitoringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CancelThresholdMonitoringCompletedEventHandler(object sender, CancelThresholdMonitoringCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelThresholdMonitoringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelThresholdMonitoringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void ThresholdEventNotificationCompletedEventHandler(object sender, ThresholdEventNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ThresholdEventNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ThresholdEventNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateMeterExchangeCompletedEventHandler(object sender, InitiateMeterExchangeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateMeterExchangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateMeterExchangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void MeterExchangedNotificationCompletedEventHandler(object sender, MeterExchangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeterExchangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MeterExchangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetCustomersAffectedByOutageCompletedEventHandler(object sender, GetCustomersAffectedByOutageCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomersAffectedByOutageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomersAffectedByOutageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public customersAffectedByOutage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((customersAffectedByOutage)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void MeterConfigurationNotificationCompletedEventHandler(object sender, MeterConfigurationNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeterConfigurationNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MeterConfigurationNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void RateChangedNotificationCompletedEventHandler(object sender, RateChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RateChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RateChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateMeterInstallationCompletedEventHandler(object sender, InitiateMeterInstallationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateMeterInstallationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateMeterInstallationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateInHomeDisplayBillingMessageCompletedEventHandler(object sender, InitiateInHomeDisplayBillingMessageCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateInHomeDisplayBillingMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateInHomeDisplayBillingMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CancelInHomeDisplayBillingMessageCompletedEventHandler(object sender, CancelInHomeDisplayBillingMessageCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelInHomeDisplayBillingMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelInHomeDisplayBillingMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateHistoricalMeterReadingsByMeterIDAndDateCompletedEventHandler(object sender, InitiateHistoricalMeterReadingsByMeterIDAndDateCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateHistoricalMeterReadingsByMeterIDAndDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateHistoricalMeterReadingsByMeterIDAndDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetSupportedMeterEventCodesCompletedEventHandler(object sender, GetSupportedMeterEventCodesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSupportedMeterEventCodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSupportedMeterEventCodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meterEvent[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meterEvent[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateBillingDeterminantsCompletedEventHandler(object sender, InitiateBillingDeterminantsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateBillingDeterminantsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateBillingDeterminantsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void LMDeviceInstalledNotificationCompletedEventHandler(object sender, LMDeviceInstalledNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LMDeviceInstalledNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LMDeviceInstalledNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetReadingsByMeterIDAndFieldNameIntervalDataCompletedEventHandler(object sender, GetReadingsByMeterIDAndFieldNameIntervalDataCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReadingsByMeterIDAndFieldNameIntervalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReadingsByMeterIDAndFieldNameIntervalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public intervalData[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((intervalData[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetLatestReadingsByMeterIDListIntervalDataCompletedEventHandler(object sender, GetLatestReadingsByMeterIDListIntervalDataCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatestReadingsByMeterIDListIntervalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatestReadingsByMeterIDListIntervalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public intervalData[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((intervalData[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetLatestReadingsByMeterListIntervalDataCompletedEventHandler(object sender, GetLatestReadingsByMeterListIntervalDataCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatestReadingsByMeterListIntervalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatestReadingsByMeterListIntervalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public intervalData[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((intervalData[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void OutageReasonChangedNotificationCompletedEventHandler(object sender, OutageReasonChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OutageReasonChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OutageReasonChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void OutageReasonContainerChangedNotificationCompletedEventHandler(object sender, OutageReasonContainerChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OutageReasonContainerChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OutageReasonContainerChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void OutageEventChangedNotificationCompletedEventHandler(object sender, OutageEventChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OutageEventChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OutageEventChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InsertInHomeDisplayInIHDGroupCompletedEventHandler(object sender, InsertInHomeDisplayInIHDGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertInHomeDisplayInIHDGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertInHomeDisplayInIHDGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void RemoveInHomeDisplayFromIHDGroupCompletedEventHandler(object sender, RemoveInHomeDisplayFromIHDGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveInHomeDisplayFromIHDGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveInHomeDisplayFromIHDGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CancelCriticalPeakPriceEventCompletedEventHandler(object sender, CancelCriticalPeakPriceEventCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelCriticalPeakPriceEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelCriticalPeakPriceEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CancelCriticalPeakPriceEventToGroupCompletedEventHandler(object sender, CancelCriticalPeakPriceEventToGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelCriticalPeakPriceEventToGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelCriticalPeakPriceEventToGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CriticalPeakPriceEventNotificationCompletedEventHandler(object sender, CriticalPeakPriceEventNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CriticalPeakPriceEventNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CriticalPeakPriceEventNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateCriticalPeakPriceEventCompletedEventHandler(object sender, InitiateCriticalPeakPriceEventCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateCriticalPeakPriceEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateCriticalPeakPriceEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateCriticalPeakPriceEventToGroupCompletedEventHandler(object sender, InitiateCriticalPeakPriceEventToGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateCriticalPeakPriceEventToGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateCriticalPeakPriceEventToGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateLoadManagementEventCompletedEventHandler(object sender, InitiateLoadManagementEventCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateLoadManagementEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateLoadManagementEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateLoadManagementEventsCompletedEventHandler(object sender, InitiateLoadManagementEventsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateLoadManagementEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateLoadManagementEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiatePowerFactorManagementEventCompletedEventHandler(object sender, InitiatePowerFactorManagementEventCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiatePowerFactorManagementEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiatePowerFactorManagementEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiatePlannedOutageCompletedEventHandler(object sender, InitiatePlannedOutageCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiatePlannedOutageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiatePlannedOutageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CancelPlannedOutageCompletedEventHandler(object sender, CancelPlannedOutageCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelPlannedOutageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelPlannedOutageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateUsageMonitoringCompletedEventHandler(object sender, InitiateUsageMonitoringCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateUsageMonitoringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateUsageMonitoringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CancelUsageMonitoringCompletedEventHandler(object sender, CancelUsageMonitoringCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelUsageMonitoringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelUsageMonitoringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateDisconnectedStatusCompletedEventHandler(object sender, InitiateDisconnectedStatusCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateDisconnectedStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateDisconnectedStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CancelDisconnectedStatusCompletedEventHandler(object sender, CancelDisconnectedStatusCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelDisconnectedStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelDisconnectedStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateMeterReadingsByMeterIDCompletedEventHandler(object sender, InitiateMeterReadingsByMeterIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateMeterReadingsByMeterIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateMeterReadingsByMeterIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void EstablishMeterGroupCompletedEventHandler(object sender, EstablishMeterGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EstablishMeterGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EstablishMeterGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void EstablishHANDeviceGroupCompletedEventHandler(object sender, EstablishHANDeviceGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EstablishHANDeviceGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EstablishHANDeviceGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InsertIntoHANDeviceGroupCompletedEventHandler(object sender, InsertIntoHANDeviceGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertIntoHANDeviceGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertIntoHANDeviceGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void RemoveFromHANDeviceGroupCompletedEventHandler(object sender, RemoveFromHANDeviceGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveFromHANDeviceGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveFromHANDeviceGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetHANDeviceGroupNamesCompletedEventHandler(object sender, GetHANDeviceGroupNamesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHANDeviceGroupNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHANDeviceGroupNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetHANDeviceGroupMembersCompletedEventHandler(object sender, GetHANDeviceGroupMembersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHANDeviceGroupMembersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHANDeviceGroupMembersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public HANDeviceGroup Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HANDeviceGroup)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetHANDeviceGroupNamesByHANDeviceIDCompletedEventHandler(object sender, GetHANDeviceGroupNamesByHANDeviceIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHANDeviceGroupNamesByHANDeviceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHANDeviceGroupNamesByHANDeviceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void DeleteMeterGroupCompletedEventHandler(object sender, DeleteMeterGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteMeterGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteMeterGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InsertMeterInMeterGroupCompletedEventHandler(object sender, InsertMeterInMeterGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertMeterInMeterGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertMeterInMeterGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void RemoveMetersFromMeterGroupCompletedEventHandler(object sender, RemoveMetersFromMeterGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveMetersFromMeterGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveMetersFromMeterGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InsertMeterInConfigurationGroupCompletedEventHandler(object sender, InsertMeterInConfigurationGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertMeterInConfigurationGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertMeterInConfigurationGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void RemoveMetersFromConfigurationGroupCompletedEventHandler(object sender, RemoveMetersFromConfigurationGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveMetersFromConfigurationGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveMetersFromConfigurationGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateGroupMeterReadingCompletedEventHandler(object sender, InitiateGroupMeterReadingCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateGroupMeterReadingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateGroupMeterReadingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void ScheduleGroupMeterReadingCompletedEventHandler(object sender, ScheduleGroupMeterReadingCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScheduleGroupMeterReadingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ScheduleGroupMeterReadingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateMeterReadingByMeterIDAndFieldNameCompletedEventHandler(object sender, InitiateMeterReadingByMeterIDAndFieldNameCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateMeterReadingByMeterIDAndFieldNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateMeterReadingByMeterIDAndFieldNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateMeterReadingByObjectCompletedEventHandler(object sender, InitiateMeterReadingByObjectCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateMeterReadingByObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateMeterReadingByObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateOutageDetectionEventRequestCompletedEventHandler(object sender, InitiateOutageDetectionEventRequestCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateOutageDetectionEventRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateOutageDetectionEventRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateODEventRequestByObjectCompletedEventHandler(object sender, InitiateODEventRequestByObjectCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateODEventRequestByObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateODEventRequestByObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateODMonitoringRequestByObjectCompletedEventHandler(object sender, InitiateODMonitoringRequestByObjectCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateODMonitoringRequestByObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateODMonitoringRequestByObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void DisplayODMonitoringRequestsCompletedEventHandler(object sender, DisplayODMonitoringRequestsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DisplayODMonitoringRequestsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DisplayODMonitoringRequestsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public objectRef[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((objectRef[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CancelODMonitoringRequestByObjectCompletedEventHandler(object sender, CancelODMonitoringRequestByObjectCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelODMonitoringRequestByObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelODMonitoringRequestByObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateConnectDisconnectCompletedEventHandler(object sender, InitiateConnectDisconnectCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateConnectDisconnectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateConnectDisconnectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CDStateChangedNotificationCompletedEventHandler(object sender, CDStateChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CDStateChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CDStateChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CDStatesChangedNotificationCompletedEventHandler(object sender, CDStatesChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CDStatesChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CDStatesChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void UpdateServiceLocationDisplaysCompletedEventHandler(object sender, UpdateServiceLocationDisplaysCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateServiceLocationDisplaysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateServiceLocationDisplaysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void IntervalDataNotificationCompletedEventHandler(object sender, IntervalDataNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IntervalDataNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IntervalDataNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateLPMeterReadingsByMeterIDCompletedEventHandler(object sender, InitiateLPMeterReadingsByMeterIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateLPMeterReadingsByMeterIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateLPMeterReadingsByMeterIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateCDStateRequestCompletedEventHandler(object sender, InitiateCDStateRequestCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateCDStateRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateCDStateRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CDStateNotificationCompletedEventHandler(object sender, CDStateNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CDStateNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CDStateNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CDStatesNotificationCompletedEventHandler(object sender, CDStatesNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CDStatesNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CDStatesNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CancelDemandResponseEventCompletedEventHandler(object sender, CancelDemandResponseEventCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelDemandResponseEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelDemandResponseEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CancelDemandResponseEventToGroupCompletedEventHandler(object sender, CancelDemandResponseEventToGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelDemandResponseEventToGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelDemandResponseEventToGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void DemandResponseEventNotificationCompletedEventHandler(object sender, DemandResponseEventNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DemandResponseEventNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DemandResponseEventNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void DemandResponseSetupNotificationCompletedEventHandler(object sender, DemandResponseSetupNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DemandResponseSetupNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DemandResponseSetupNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateDemandResponseEventCompletedEventHandler(object sender, InitiateDemandResponseEventCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateDemandResponseEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateDemandResponseEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateDemandResponseEventStatusRequestCompletedEventHandler(object sender, InitiateDemandResponseEventStatusRequestCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateDemandResponseEventStatusRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateDemandResponseEventStatusRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateDemandResponseEventToGroupCompletedEventHandler(object sender, InitiateDemandResponseEventToGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateDemandResponseEventToGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateDemandResponseEventToGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateDemandResponseEventStatusRequestToGroupCompletedEventHandler(object sender, InitiateDemandResponseEventStatusRequestToGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateDemandResponseEventStatusRequestToGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateDemandResponseEventStatusRequestToGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateDemandResponseSetupCompletedEventHandler(object sender, InitiateDemandResponseSetupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateDemandResponseSetupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateDemandResponseSetupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateDemandResetCompletedEventHandler(object sender, InitiateDemandResetCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateDemandResetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateDemandResetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateArmCDDeviceCompletedEventHandler(object sender, InitiateArmCDDeviceCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateArmCDDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateArmCDDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateEnableCDDeviceCompletedEventHandler(object sender, InitiateEnableCDDeviceCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateEnableCDDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateEnableCDDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateDisableCDDeviceCompletedEventHandler(object sender, InitiateDisableCDDeviceCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateDisableCDDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateDisableCDDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void EstablishSchedulesCompletedEventHandler(object sender, EstablishSchedulesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EstablishSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EstablishSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void DeleteScheduleCompletedEventHandler(object sender, DeleteScheduleCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void EstablishReadingSchedulesCompletedEventHandler(object sender, EstablishReadingSchedulesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EstablishReadingSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EstablishReadingSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void EnableReadingSchedulesCompletedEventHandler(object sender, EnableReadingSchedulesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnableReadingSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnableReadingSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void DisableReadingScheduleCompletedEventHandler(object sender, DisableReadingScheduleCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DisableReadingScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DisableReadingScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void DeleteReadingScheduleCompletedEventHandler(object sender, DeleteReadingScheduleCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteReadingScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteReadingScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateMeterReadingsByFieldNameCompletedEventHandler(object sender, InitiateMeterReadingsByFieldNameCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateMeterReadingsByFieldNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateMeterReadingsByFieldNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateODEventRequestByServiceLocationCompletedEventHandler(object sender, InitiateODEventRequestByServiceLocationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateODEventRequestByServiceLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateODEventRequestByServiceLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAllActiveOutageEventsCompletedEventHandler(object sender, GetAllActiveOutageEventsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllActiveOutageEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllActiveOutageEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public outageEvent[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((outageEvent[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetOutageEventCompletedEventHandler(object sender, GetOutageEventCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOutageEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOutageEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public outageEvent Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((outageEvent)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetCircuitElementByObjectCompletedEventHandler(object sender, GetCircuitElementByObjectCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCircuitElementByObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCircuitElementByObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public circuitElement Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((circuitElement)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAllLoadManagementDevicesCompletedEventHandler(object sender, GetAllLoadManagementDevicesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllLoadManagementDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllLoadManagementDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public loadManagementDevice[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((loadManagementDevice[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAmountOfControllableLoadCompletedEventHandler(object sender, GetAmountOfControllableLoadCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAmountOfControllableLoadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAmountOfControllableLoadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public float Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((float)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAmountOfControlledLoadCompletedEventHandler(object sender, GetAmountOfControlledLoadCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAmountOfControlledLoadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAmountOfControlledLoadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public float Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((float)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetLoadManagementDeviceByMeterIDCompletedEventHandler(object sender, GetLoadManagementDeviceByMeterIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLoadManagementDeviceByMeterIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLoadManagementDeviceByMeterIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public loadManagementDevice[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((loadManagementDevice[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetLoadManagementDeviceByServiceLocationIDCompletedEventHandler(object sender, GetLoadManagementDeviceByServiceLocationIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLoadManagementDeviceByServiceLocationIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLoadManagementDeviceByServiceLocationIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public loadManagementDevice[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((loadManagementDevice[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void IsLoadManagementActiveCompletedEventHandler(object sender, IsLoadManagementActiveCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsLoadManagementActiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsLoadManagementActiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAllSubstationLoadControlStatusesCompletedEventHandler(object sender, GetAllSubstationLoadControlStatusesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllSubstationLoadControlStatusesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllSubstationLoadControlStatusesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public substationLoadControlStatus[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((substationLoadControlStatus[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void ModifyODDataForOutageDetectionDeviceCompletedEventHandler(object sender, ModifyODDataForOutageDetectionDeviceCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyODDataForOutageDetectionDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModifyODDataForOutageDetectionDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void BlinkAlarmNotificationCompletedEventHandler(object sender, BlinkAlarmNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BlinkAlarmNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BlinkAlarmNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void VoltageAlarmNotificationCompletedEventHandler(object sender, VoltageAlarmNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VoltageAlarmNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VoltageAlarmNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CustomerChangedNotificationCompletedEventHandler(object sender, CustomerChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void AccountChangedNotificationCompletedEventHandler(object sender, AccountChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AccountChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AccountChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void ServiceLocationChangedNotificationCompletedEventHandler(object sender, ServiceLocationChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServiceLocationChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ServiceLocationChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void MeterChangedNotificationCompletedEventHandler(object sender, MeterChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeterChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MeterChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void MeterRemoveNotificationCompletedEventHandler(object sender, MeterRemoveNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeterRemoveNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MeterRemoveNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void MeterRetireNotificationCompletedEventHandler(object sender, MeterRetireNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeterRetireNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MeterRetireNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void MeterAddNotificationCompletedEventHandler(object sender, MeterAddNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeterAddNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MeterAddNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void MeterExchangeNotificationCompletedEventHandler(object sender, MeterExchangeNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeterExchangeNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MeterExchangeNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CustomersAffectedByOutageNotificationCompletedEventHandler(object sender, CustomersAffectedByOutageNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomersAffectedByOutageNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomersAffectedByOutageNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void MeterConnectivityNotificationCompletedEventHandler(object sender, MeterConnectivityNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeterConnectivityNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MeterConnectivityNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void EndDeviceShipmentNotificationCompletedEventHandler(object sender, EndDeviceShipmentNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EndDeviceShipmentNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EndDeviceShipmentNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void FormattedBlockNotificationCompletedEventHandler(object sender, FormattedBlockNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FormattedBlockNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FormattedBlockNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void ODEventNotificationCompletedEventHandler(object sender, ODEventNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ODEventNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ODEventNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void ODDeviceChangedNotificationCompletedEventHandler(object sender, ODDeviceChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ODDeviceChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ODDeviceChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CDDeviceAddNotificationCompletedEventHandler(object sender, CDDeviceAddNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CDDeviceAddNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CDDeviceAddNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CDDeviceChangedNotificationCompletedEventHandler(object sender, CDDeviceChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CDDeviceChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CDDeviceChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CDDeviceExchangeNotificationCompletedEventHandler(object sender, CDDeviceExchangeNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CDDeviceExchangeNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CDDeviceExchangeNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CDDeviceRemoveNotificationCompletedEventHandler(object sender, CDDeviceRemoveNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CDDeviceRemoveNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CDDeviceRemoveNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CDDeviceInstalledNotificationCompletedEventHandler(object sender, CDDeviceInstalledNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CDDeviceInstalledNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CDDeviceInstalledNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CDDeviceRetireNotificationCompletedEventHandler(object sender, CDDeviceRetireNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CDDeviceRetireNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CDDeviceRetireNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void HistoryLogChangedNotificationCompletedEventHandler(object sender, HistoryLogChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HistoryLogChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HistoryLogChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void LoadProfileChangedNotificationCompletedEventHandler(object sender, LoadProfileChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProfileChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadProfileChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void MeterTestNotificationCompletedEventHandler(object sender, MeterTestNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeterTestNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MeterTestNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void MeterInstalledNotificationCompletedEventHandler(object sender, MeterInstalledNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeterInstalledNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MeterInstalledNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void PPMMeterExchangeNotificationCompletedEventHandler(object sender, PPMMeterExchangeNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PPMMeterExchangeNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PPMMeterExchangeNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void ChargeableDeviceChangedNotificationCompletedEventHandler(object sender, ChargeableDeviceChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChargeableDeviceChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChargeableDeviceChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void ModifyCBDataForCustomerCompletedEventHandler(object sender, ModifyCBDataForCustomerCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyCBDataForCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModifyCBDataForCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void ModifyCBDataForServiceLocationsCompletedEventHandler(object sender, ModifyCBDataForServiceLocationsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyCBDataForServiceLocationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModifyCBDataForServiceLocationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void ModifyCBDataForMetersCompletedEventHandler(object sender, ModifyCBDataForMetersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyCBDataForMetersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModifyCBDataForMetersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void ReadingChangedNotificationCompletedEventHandler(object sender, ReadingChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadingChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadingChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void IHDMessageStatusNotificationCompletedEventHandler(object sender, IHDMessageStatusNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IHDMessageStatusNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IHDMessageStatusNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void IHDMessageConfirmedNotificationCompletedEventHandler(object sender, IHDMessageConfirmedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IHDMessageConfirmedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IHDMessageConfirmedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InHomeDisplayAddNotificationCompletedEventHandler(object sender, InHomeDisplayAddNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InHomeDisplayAddNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InHomeDisplayAddNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InHomeDisplayChangedNotificationCompletedEventHandler(object sender, InHomeDisplayChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InHomeDisplayChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InHomeDisplayChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InHomeDisplayExchangeNotificationCompletedEventHandler(object sender, InHomeDisplayExchangeNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InHomeDisplayExchangeNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InHomeDisplayExchangeNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InHomeDisplayInstalledNotificationCompletedEventHandler(object sender, InHomeDisplayInstalledNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InHomeDisplayInstalledNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InHomeDisplayInstalledNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InHomeDisplayRemoveNotificationCompletedEventHandler(object sender, InHomeDisplayRemoveNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InHomeDisplayRemoveNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InHomeDisplayRemoveNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InHomeDisplayRetireNotificationCompletedEventHandler(object sender, InHomeDisplayRetireNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InHomeDisplayRetireNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InHomeDisplayRetireNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateHANPricingCompletedEventHandler(object sender, InitiateHANPricingCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateHANPricingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateHANPricingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void InitiateHANPricingRequestCompletedEventHandler(object sender, InitiateHANPricingRequestCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateHANPricingRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateHANPricingRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void HANPricingNotificationCompletedEventHandler(object sender, HANPricingNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HANPricingNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HANPricingNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void PingURLCompletedEventHandler(object sender, PingURLCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PingURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PingURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetMethodsCompletedEventHandler(object sender, GetMethodsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMethodsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMethodsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetDomainNamesCompletedEventHandler(object sender, GetDomainNamesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDomainNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDomainNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetDomainMembersCompletedEventHandler(object sender, GetDomainMembersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDomainMembersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDomainMembersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public domainMember[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((domainMember[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void RequestRegistrationIDCompletedEventHandler(object sender, RequestRegistrationIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestRegistrationIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestRegistrationIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void RegisterForServiceCompletedEventHandler(object sender, RegisterForServiceCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterForServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterForServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void UnregisterForServiceCompletedEventHandler(object sender, UnregisterForServiceCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnregisterForServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnregisterForServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetRegistrationInfoByIDCompletedEventHandler(object sender, GetRegistrationInfoByIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRegistrationInfoByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRegistrationInfoByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public registrationInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((registrationInfo)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetPublishMethodsCompletedEventHandler(object sender, GetPublishMethodsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPublishMethodsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPublishMethodsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void DomainMembersChangedNotificationCompletedEventHandler(object sender, DomainMembersChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DomainMembersChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DomainMembersChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void DomainNamesChangedNotificationCompletedEventHandler(object sender, DomainNamesChangedNotificationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DomainNamesChangedNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DomainNamesChangedNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public errorObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((errorObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAllMetersCompletedEventHandler(object sender, GetAllMetersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllMetersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllMetersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meters Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meters)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAMRSupportedMetersCompletedEventHandler(object sender, GetAMRSupportedMetersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAMRSupportedMetersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAMRSupportedMetersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meters Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meters)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetModifiedAMRMetersCompletedEventHandler(object sender, GetModifiedAMRMetersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetModifiedAMRMetersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetModifiedAMRMetersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meters Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meters)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void IsAMRMeterCompletedEventHandler(object sender, IsAMRMeterCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsAMRMeterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsAMRMeterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetReadingsByDateCompletedEventHandler(object sender, GetReadingsByDateCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReadingsByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReadingsByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meterReading[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meterReading[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetReadingsByMeterIDCompletedEventHandler(object sender, GetReadingsByMeterIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReadingsByMeterIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReadingsByMeterIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meterReading[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meterReading[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetReadingsByMeterIDListAndFieldNameIntervalDataCompletedEventHandler(object sender, GetReadingsByMeterIDListAndFieldNameIntervalDataCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReadingsByMeterIDListAndFieldNameIntervalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReadingsByMeterIDListAndFieldNameIntervalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public intervalData[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((intervalData[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetLatestReadingByMeterIDCompletedEventHandler(object sender, GetLatestReadingByMeterIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatestReadingByMeterIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatestReadingByMeterIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meterReading Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meterReading)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetReadingsByBillingCycleCompletedEventHandler(object sender, GetReadingsByBillingCycleCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReadingsByBillingCycleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReadingsByBillingCycleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public formattedBlock[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((formattedBlock[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetReadingByMeterIDFormattedBlockCompletedEventHandler(object sender, GetReadingByMeterIDFormattedBlockCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReadingByMeterIDFormattedBlockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReadingByMeterIDFormattedBlockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public formattedBlock[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((formattedBlock[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetReadingsByDateFormattedBlockCompletedEventHandler(object sender, GetReadingsByDateFormattedBlockCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReadingsByDateFormattedBlockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReadingsByDateFormattedBlockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public formattedBlock[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((formattedBlock[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetHistoryLogByMeterIDCompletedEventHandler(object sender, GetHistoryLogByMeterIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoryLogByMeterIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistoryLogByMeterIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public historyLog[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((historyLog[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetHistoryLogsByDateCompletedEventHandler(object sender, GetHistoryLogsByDateCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoryLogsByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistoryLogsByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public historyLog[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((historyLog[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetHistoryLogsByMeterIDAndEventCodeCompletedEventHandler(object sender, GetHistoryLogsByMeterIDAndEventCodeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoryLogsByMeterIDAndEventCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistoryLogsByMeterIDAndEventCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public historyLog[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((historyLog[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetHistoryLogsByDateAndEventCodeCompletedEventHandler(object sender, GetHistoryLogsByDateAndEventCodeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoryLogsByDateAndEventCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistoryLogsByDateAndEventCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public historyLog[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((historyLog[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetLatestMeterReadingsByMeterGroupCompletedEventHandler(object sender, GetLatestMeterReadingsByMeterGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatestMeterReadingsByMeterGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatestMeterReadingsByMeterGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public formattedBlock Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((formattedBlock)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetLatestReadingByMeterIDAndFieldNameCompletedEventHandler(object sender, GetLatestReadingByMeterIDAndFieldNameCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatestReadingByMeterIDAndFieldNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatestReadingByMeterIDAndFieldNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public formattedBlock Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((formattedBlock)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetLatestReadingByFieldNameCompletedEventHandler(object sender, GetLatestReadingByFieldNameCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatestReadingByFieldNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatestReadingByFieldNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public formattedBlock[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((formattedBlock[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetReadingsByDateAndFieldNameCompletedEventHandler(object sender, GetReadingsByDateAndFieldNameCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReadingsByDateAndFieldNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReadingsByDateAndFieldNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public formattedBlock[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((formattedBlock[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetSupportedFieldNamesCompletedEventHandler(object sender, GetSupportedFieldNamesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSupportedFieldNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSupportedFieldNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetReadingsByMeterIDAndFieldNameCompletedEventHandler(object sender, GetReadingsByMeterIDAndFieldNameCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReadingsByMeterIDAndFieldNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReadingsByMeterIDAndFieldNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public formattedBlock[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((formattedBlock[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetLatestReadingsCompletedEventHandler(object sender, GetLatestReadingsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatestReadingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatestReadingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meterReading[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meterReading[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAllInHomeDisplaysCompletedEventHandler(object sender, GetAllInHomeDisplaysCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllInHomeDisplaysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllInHomeDisplaysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public inHomeDisplay[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((inHomeDisplay[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetReadingsByUOMAndDateCompletedEventHandler(object sender, GetReadingsByUOMAndDateCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReadingsByUOMAndDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReadingsByUOMAndDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meterReading[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meterReading[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAllOutageDetectionDevicesCompletedEventHandler(object sender, GetAllOutageDetectionDevicesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllOutageDetectionDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllOutageDetectionDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public outageDetectionDevice[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((outageDetectionDevice[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetOutageDetectionDevicesByMeterIDCompletedEventHandler(object sender, GetOutageDetectionDevicesByMeterIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOutageDetectionDevicesByMeterIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOutageDetectionDevicesByMeterIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public outageDetectionDevice[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((outageDetectionDevice[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetOutageDetectionDevicesByStatusCompletedEventHandler(object sender, GetOutageDetectionDevicesByStatusCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOutageDetectionDevicesByStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOutageDetectionDevicesByStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public outageDetectionDevice[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((outageDetectionDevice[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetOutageDetectionDevicesByTypeCompletedEventHandler(object sender, GetOutageDetectionDevicesByTypeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOutageDetectionDevicesByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOutageDetectionDevicesByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public outageDetectionDevice[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((outageDetectionDevice[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetOutagedODDevicesCompletedEventHandler(object sender, GetOutagedODDevicesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOutagedODDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOutagedODDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public outageDetectionDevice[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((outageDetectionDevice[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetCDSupportedMetersCompletedEventHandler(object sender, GetCDSupportedMetersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCDSupportedMetersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCDSupportedMetersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meters Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meters)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetModifiedCDMetersCompletedEventHandler(object sender, GetModifiedCDMetersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetModifiedCDMetersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetModifiedCDMetersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meters Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meters)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetCDMeterStateCompletedEventHandler(object sender, GetCDMeterStateCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCDMeterStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCDMeterStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public CDState Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CDState)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetOutageEventStatusCompletedEventHandler(object sender, GetOutageEventStatusCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOutageEventStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOutageEventStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public outageEventStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((outageEventStatus)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetActiveOutagesCompletedEventHandler(object sender, GetActiveOutagesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActiveOutagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActiveOutagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetOutageEventStatusByOutageLocationCompletedEventHandler(object sender, GetOutageEventStatusByOutageLocationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOutageEventStatusByOutageLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOutageEventStatusByOutageLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public outageEventStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((outageEventStatus)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAllElectricMetersCompletedEventHandler(object sender, GetAllElectricMetersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllElectricMetersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllElectricMetersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public electricMeter[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((electricMeter[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAllGasMetersCompletedEventHandler(object sender, GetAllGasMetersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllGasMetersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllGasMetersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public gasMeter[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((gasMeter[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAllWaterMetersCompletedEventHandler(object sender, GetAllWaterMetersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllWaterMetersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllWaterMetersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public waterMeter[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((waterMeter[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAllPropaneMetersCompletedEventHandler(object sender, GetAllPropaneMetersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllPropaneMetersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllPropaneMetersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public propaneMeter[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((propaneMeter[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetElectricMetersByAccountNumberCompletedEventHandler(object sender, GetElectricMetersByAccountNumberCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetElectricMetersByAccountNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetElectricMetersByAccountNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public electricMeter[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((electricMeter[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetGasMetersByAccountNumberCompletedEventHandler(object sender, GetGasMetersByAccountNumberCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGasMetersByAccountNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGasMetersByAccountNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public gasMeter[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((gasMeter[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetWaterMetersByAccountNumberCompletedEventHandler(object sender, GetWaterMetersByAccountNumberCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWaterMetersByAccountNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWaterMetersByAccountNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public waterMeter[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((waterMeter[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetPropaneMetersByAccountNumberCompletedEventHandler(object sender, GetPropaneMetersByAccountNumberCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropaneMetersByAccountNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPropaneMetersByAccountNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public propaneMeter[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((propaneMeter[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAllCustomersByServiceTypeCompletedEventHandler(object sender, GetAllCustomersByServiceTypeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllCustomersByServiceTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllCustomersByServiceTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public customer[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((customer[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAllMetersByServiceTypeCompletedEventHandler(object sender, GetAllMetersByServiceTypeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllMetersByServiceTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllMetersByServiceTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meters Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meters)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAllServiceLocationsByServiceTypeCompletedEventHandler(object sender, GetAllServiceLocationsByServiceTypeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllServiceLocationsByServiceTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllServiceLocationsByServiceTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public serviceLocation[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((serviceLocation[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetMetersByAccountNumberAndServiceTypeCompletedEventHandler(object sender, GetMetersByAccountNumberAndServiceTypeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMetersByAccountNumberAndServiceTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMetersByAccountNumberAndServiceTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meters Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meters)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAllCustomersCompletedEventHandler(object sender, GetAllCustomersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllCustomersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllCustomersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public customer[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((customer[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetModifiedCustomersCompletedEventHandler(object sender, GetModifiedCustomersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetModifiedCustomersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetModifiedCustomersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public customer[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((customer[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetModifiedServiceLocationsCompletedEventHandler(object sender, GetModifiedServiceLocationsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetModifiedServiceLocationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetModifiedServiceLocationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public serviceLocation[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((serviceLocation[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetCustomerByCustomerIDCompletedEventHandler(object sender, GetCustomerByCustomerIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerByCustomerIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerByCustomerIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public customer Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((customer)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetCustomerByMeterIDCompletedEventHandler(object sender, GetCustomerByMeterIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerByMeterIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerByMeterIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public customer Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((customer)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetCustomerByNameCompletedEventHandler(object sender, GetCustomerByNameCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public customer[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((customer[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetCustomerByDBANameCompletedEventHandler(object sender, GetCustomerByDBANameCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerByDBANameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerByDBANameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public customer Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((customer)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetDeviceTreeConnectivityCompletedEventHandler(object sender, GetDeviceTreeConnectivityCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeviceTreeConnectivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDeviceTreeConnectivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public circuitElement[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((circuitElement[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetMeterConnectivityBySubstationCompletedEventHandler(object sender, GetMeterConnectivityBySubstationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMeterConnectivityBySubstationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMeterConnectivityBySubstationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meterConnectivity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meterConnectivity[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetEndDeviceShipmentByShipmentIDCompletedEventHandler(object sender, GetEndDeviceShipmentByShipmentIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEndDeviceShipmentByShipmentIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEndDeviceShipmentByShipmentIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public endDeviceShipment Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((endDeviceShipment)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetEndDeviceShipmentsByDateRangeCompletedEventHandler(object sender, GetEndDeviceShipmentsByDateRangeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEndDeviceShipmentsByDateRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEndDeviceShipmentsByDateRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public endDeviceShipment[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((endDeviceShipment[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetEndDeviceShipmentByMeterIDCompletedEventHandler(object sender, GetEndDeviceShipmentByMeterIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEndDeviceShipmentByMeterIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEndDeviceShipmentByMeterIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public endDeviceShipment Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((endDeviceShipment)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetEndDeviceShipmentByTransponderIDCompletedEventHandler(object sender, GetEndDeviceShipmentByTransponderIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEndDeviceShipmentByTransponderIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEndDeviceShipmentByTransponderIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public endDeviceShipment Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((endDeviceShipment)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetLPDataByMeterIDCompletedEventHandler(object sender, GetLPDataByMeterIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLPDataByMeterIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLPDataByMeterIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public profileObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((profileObject[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetMeterByMeterIDCompletedEventHandler(object sender, GetMeterByMeterIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMeterByMeterIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMeterByMeterIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meters Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meters)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetMeterByServiceLocationIDCompletedEventHandler(object sender, GetMeterByServiceLocationIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMeterByServiceLocationIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMeterByServiceLocationIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meters Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meters)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAllMetersByAccountNumberCompletedEventHandler(object sender, GetAllMetersByAccountNumberCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllMetersByAccountNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllMetersByAccountNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meters Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meters)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetMeterByCustomerIDCompletedEventHandler(object sender, GetMeterByCustomerIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMeterByCustomerIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMeterByCustomerIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meters Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meters)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetMetersByAMRTypeCompletedEventHandler(object sender, GetMetersByAMRTypeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMetersByAMRTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMetersByAMRTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meters Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meters)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetMeterGroupNamesCompletedEventHandler(object sender, GetMeterGroupNamesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMeterGroupNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMeterGroupNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetMeterGroupNamesByMeterIDCompletedEventHandler(object sender, GetMeterGroupNamesByMeterIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMeterGroupNamesByMeterIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMeterGroupNamesByMeterIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetMeterGroupMembersCompletedEventHandler(object sender, GetMeterGroupMembersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMeterGroupMembersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMeterGroupMembersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meterGroups Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meterGroups)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetModifiedMetersCompletedEventHandler(object sender, GetModifiedMetersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetModifiedMetersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetModifiedMetersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meters Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meters)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetServiceLocationByServiceStatusCompletedEventHandler(object sender, GetServiceLocationByServiceStatusCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceLocationByServiceStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceLocationByServiceStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public serviceLocation[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((serviceLocation[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetServiceLocationByServiceLocationIDCompletedEventHandler(object sender, GetServiceLocationByServiceLocationIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceLocationByServiceLocationIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceLocationByServiceLocationIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public serviceLocation[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((serviceLocation[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetServiceLocationByCustomerIDCompletedEventHandler(object sender, GetServiceLocationByCustomerIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceLocationByCustomerIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceLocationByCustomerIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public serviceLocation[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((serviceLocation[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetServiceLocationByMeterIDCompletedEventHandler(object sender, GetServiceLocationByMeterIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceLocationByMeterIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceLocationByMeterIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public serviceLocation[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((serviceLocation[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetServiceLocationByAccountNumberCompletedEventHandler(object sender, GetServiceLocationByAccountNumberCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceLocationByAccountNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceLocationByAccountNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public serviceLocation[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((serviceLocation[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetServiceLocationByGridLocationCompletedEventHandler(object sender, GetServiceLocationByGridLocationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceLocationByGridLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceLocationByGridLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public serviceLocation[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((serviceLocation[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetServiceLocationByPhaseCodeCompletedEventHandler(object sender, GetServiceLocationByPhaseCodeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceLocationByPhaseCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceLocationByPhaseCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public serviceLocation[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((serviceLocation[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetServiceLocationByLoadGroupCompletedEventHandler(object sender, GetServiceLocationByLoadGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceLocationByLoadGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceLocationByLoadGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public serviceLocation[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((serviceLocation[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetServiceLocationByServiceTypeCompletedEventHandler(object sender, GetServiceLocationByServiceTypeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceLocationByServiceTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceLocationByServiceTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public serviceLocation[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((serviceLocation[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetServiceLocationByShutOffDateCompletedEventHandler(object sender, GetServiceLocationByShutOffDateCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceLocationByShutOffDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceLocationByShutOffDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public serviceLocation[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((serviceLocation[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetMetersByEALocationCompletedEventHandler(object sender, GetMetersByEALocationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMetersByEALocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMetersByEALocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meters Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meters)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetMetersByFacilityIDCompletedEventHandler(object sender, GetMetersByFacilityIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMetersByFacilityIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMetersByFacilityIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meters Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meters)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetMetersBySiteIDCompletedEventHandler(object sender, GetMetersBySiteIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMetersBySiteIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMetersBySiteIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meters Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meters)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetMetersByCustomerNameCompletedEventHandler(object sender, GetMetersByCustomerNameCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMetersByCustomerNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMetersByCustomerNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meters Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meters)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetMetersByHomePhoneCompletedEventHandler(object sender, GetMetersByHomePhoneCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMetersByHomePhoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMetersByHomePhoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meters Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meters)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetMetersBySearchStringCompletedEventHandler(object sender, GetMetersBySearchStringCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMetersBySearchStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMetersBySearchStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meters Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meters)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetLPReadingsByMeterIDFormattedBlockCompletedEventHandler(object sender, GetLPReadingsByMeterIDFormattedBlockCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLPReadingsByMeterIDFormattedBlockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLPReadingsByMeterIDFormattedBlockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public formattedBlock[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((formattedBlock[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetLPReadingsByDateFormattedBlockCompletedEventHandler(object sender, GetLPReadingsByDateFormattedBlockCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLPReadingsByDateFormattedBlockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLPReadingsByDateFormattedBlockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public formattedBlock[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((formattedBlock[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetLPReadingsByBillingCycleCompletedEventHandler(object sender, GetLPReadingsByBillingCycleCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLPReadingsByBillingCycleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLPReadingsByBillingCycleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public formattedBlock[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((formattedBlock[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAllAccountsCompletedEventHandler(object sender, GetAllAccountsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllAccountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllAccountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public account[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((account[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAccountsByCustomerIDCompletedEventHandler(object sender, GetAccountsByCustomerIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountsByCustomerIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountsByCustomerIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public account[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((account[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAccountByMeterIDCompletedEventHandler(object sender, GetAccountByMeterIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountByMeterIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountByMeterIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public account Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((account)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAccountByServiceLocationIDAndServiceTypeCompletedEventHandler(object sender, GetAccountByServiceLocationIDAndServiceTypeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountByServiceLocationIDAndServiceTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountByServiceLocationIDAndServiceTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public account Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((account)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetConfigurationGroupNamesCompletedEventHandler(object sender, GetConfigurationGroupNamesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetConfigurationGroupNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetConfigurationGroupNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetConfigurationGroupNamesByMeterIDCompletedEventHandler(object sender, GetConfigurationGroupNamesByMeterIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetConfigurationGroupNamesByMeterIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetConfigurationGroupNamesByMeterIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetConfigurationGroupMembersCompletedEventHandler(object sender, GetConfigurationGroupMembersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetConfigurationGroupMembersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetConfigurationGroupMembersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public configurationGroup Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((configurationGroup)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetSchedulesCompletedEventHandler(object sender, GetSchedulesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public schedule[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((schedule[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetScheduleByIDCompletedEventHandler(object sender, GetScheduleByIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScheduleByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScheduleByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public schedule Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((schedule)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetReadingSchedulesCompletedEventHandler(object sender, GetReadingSchedulesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReadingSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReadingSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public readingSchedule[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((readingSchedule[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetReadingScheduleByIDCompletedEventHandler(object sender, GetReadingScheduleByIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReadingScheduleByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReadingScheduleByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public readingSchedule Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((readingSchedule)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetLatestReadingsByMeterIDListCompletedEventHandler(object sender, GetLatestReadingsByMeterIDListCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatestReadingsByMeterIDListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatestReadingsByMeterIDListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public formattedBlock[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((formattedBlock[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetMeterBaseByObjectIDCompletedEventHandler(object sender, GetMeterBaseByObjectIDCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMeterBaseByObjectIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMeterBaseByObjectIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public meterBase Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((meterBase)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetFormattedBlockTemplatesCompletedEventHandler(object sender, GetFormattedBlockTemplatesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFormattedBlockTemplatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFormattedBlockTemplatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public formattedBlockTemplate[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((formattedBlockTemplate[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetLatestReadingsByMeterListFormattedBlockCompletedEventHandler(object sender, GetLatestReadingsByMeterListFormattedBlockCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatestReadingsByMeterListFormattedBlockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatestReadingsByMeterListFormattedBlockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public formattedBlock[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((formattedBlock[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAllConnectDisconnectEventsByReasonCodeCompletedEventHandler(object sender, GetAllConnectDisconnectEventsByReasonCodeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllConnectDisconnectEventsByReasonCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllConnectDisconnectEventsByReasonCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public connectDisconnectEvent[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((connectDisconnectEvent[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetSupportedReadingStatusCodesCompletedEventHandler(object sender, GetSupportedReadingStatusCodesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSupportedReadingStatusCodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSupportedReadingStatusCodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public readingStatusCodeEntry[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((readingStatusCodeEntry[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetLPReadingsByMeterIDIntervalDataCompletedEventHandler(object sender, GetLPReadingsByMeterIDIntervalDataCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLPReadingsByMeterIDIntervalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLPReadingsByMeterIDIntervalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public intervalData[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((intervalData[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetLPReadingsByDateIntervalDataCompletedEventHandler(object sender, GetLPReadingsByDateIntervalDataCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLPReadingsByDateIntervalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLPReadingsByDateIntervalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public intervalData[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((intervalData[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetLPReadingsByBillingCycleIntervalDataCompletedEventHandler(object sender, GetLPReadingsByBillingCycleIntervalDataCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLPReadingsByBillingCycleIntervalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLPReadingsByBillingCycleIntervalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public intervalData[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((intervalData[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetReadingsByBillingCycleIntervalDataCompletedEventHandler(object sender, GetReadingsByBillingCycleIntervalDataCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReadingsByBillingCycleIntervalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReadingsByBillingCycleIntervalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public intervalData[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((intervalData[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetReadingByMeterIDIntervalDataCompletedEventHandler(object sender, GetReadingByMeterIDIntervalDataCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReadingByMeterIDIntervalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReadingByMeterIDIntervalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public intervalData[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((intervalData[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetReadingsByDateIntervalDataCompletedEventHandler(object sender, GetReadingsByDateIntervalDataCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReadingsByDateIntervalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReadingsByDateIntervalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public intervalData[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((intervalData[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetLatestMeterReadingsByMeterGroupIntervalDataCompletedEventHandler(object sender, GetLatestMeterReadingsByMeterGroupIntervalDataCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatestMeterReadingsByMeterGroupIntervalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatestMeterReadingsByMeterGroupIntervalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public intervalData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((intervalData)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetLatestReadingByMeterIDAndFieldNameIntervalDataCompletedEventHandler(object sender, GetLatestReadingByMeterIDAndFieldNameIntervalDataCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatestReadingByMeterIDAndFieldNameIntervalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatestReadingByMeterIDAndFieldNameIntervalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public intervalData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((intervalData)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetLatestReadingByFieldNameIntervalDataCompletedEventHandler(object sender, GetLatestReadingByFieldNameIntervalDataCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatestReadingByFieldNameIntervalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatestReadingByFieldNameIntervalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public intervalData[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((intervalData[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetReadingsByDateAndFieldNameIntervalDataCompletedEventHandler(object sender, GetReadingsByDateAndFieldNameIntervalDataCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReadingsByDateAndFieldNameIntervalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReadingsByDateAndFieldNameIntervalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public intervalData[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((intervalData[])(this.results[0]));
            }
        }
    }
}
